{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/vector.ts","webpack://assemblyscript/./src/extra/ast.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","STUB_DELIMITER","CommonNames","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","funcref","externref","exnref","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_LOW_MEMORY_LIMIT","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","ASC_FEATURE_GC","ASC_FEATURE_MEMORY64","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Funcref","Externref","Exnref","Anyref","String","Array","StaticArray","Set","Map","Function","ArrayBufferView","ArrayBuffer","Math","Mathf","NativeMath","NativeMathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","trace","seed","pow","ipow32","ipow64","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocBuffer","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","DiagnosticCategory","diagnosticCategoryToString","category","PEDANTIC","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","other","thisRange","otherRange","equals","thisRelatedRange","otherRelatedRange","source","toString","normalizedPath","lineAt","start","columnAt","end","formatDiagnosticContext","useColors","text","len","length","isLineBreak","charCodeAt","sb","substring","push","join","showContext","relatedSource","diagnostics","seen","withRange","has","seenInSource","seenMessagesAtPos","k","set","emitDiagnostic","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","kind","TypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","parameterKind","type","initializer","ParameterNode","args","DecoratorNode","fromNode","commentKind","CommentNode","isQuoted","IdentifierExpression","elementExpressions","ArrayLiteralExpression","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","elementExpression","ElementAccessExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","typeName","NewExpression","NullExpression","names","values","ObjectLiteralExpression","OmittedExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","patternFlags","RegexpLiteralExpression","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","statements","BlockStatement","label","BreakStatement","decorators","flags","typeParameters","implementsTypes","members","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","ExportDefaultStatement","externalName","ExportImportStatement","localName","exportedName","ExportMember","ExpressionStatement","ifTrue","ifFalse","IfStatement","declarations","ImportStatement","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","variable","iterable","ForOfStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureNode","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","literalKind","LITERAL","changetype","FLOAT","INTEGER","STRING","NULL","TRUE","FALSE","node","CALL","PROPERTYACCESS","isAccessOn","THIS","SUPER","TypeNode","super","typeParameterNodes","NAMEDTYPE","namedTypeNode","next","typeArgumentNodes","hasGenericComponent","identifier","FUNCTIONTYPE","functionTypeNode","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","flag","nameNode","IDENTIFIER","nameStr","BUILTIN","EXTERNAL","FINAL","GLOBAL","INLINE","LAZY","OPERATOR","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","decoratorKind","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","numTypeArguments","Range","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","OMITTED","PARENTHESIZED","REGEXP","TERNARY","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","sourceKind","SOURCE","debugInfoIndex","exportPaths","lineCache","lineColumn","internalPath","mangleInternalPath","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","off","unchecked","DeclarationStatement","INDEXSIGNATURE","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","indexSignature","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","normalizePath","startsWith","resolvePath","EXPORTDEFAULT","EXPRESSION","parameterIndex","FIELDDECLARATION","FOR","FOROF","ArrowKind","FUNCTIONDECLARATION","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","cur","isTrivialAlphanum","decorator","Token","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","CONST","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","ENUM","EXTENDS","FINALLY","FROM","GET","IMPLEMENTS","IN","INTERFACE","IS","KEYOF","LET","MODULE","NAMESPACE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","SET","STATIC","TYPE","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","debugInfoRef","a","b","Tokenizer","DiagnosticEmitter","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","MAX_VALUE","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","error","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","result","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","sepEnd","i64_new","i64_4","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","sepCount","readDecimalFloatPartial","replaceAll","parseFloat","allowLeadingZeroSep","remain","value32","i64_low","invalid","i64_high","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PREFIX_INC","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","fromBinaryToken","fromUnaryPrefixToken","fromUnaryPostfixToken","Program","options","sources","diagnosticsOffset","nextClassId","nextSignatureId","initialized","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","_arrayBufferViewInstance","_arrayBufferInstance","_arrayPrototype","_staticArrayPrototype","_setPrototype","_mapPrototype","_functionPrototype","_int8ArrayPrototype","_int16ArrayPrototype","_int32ArrayPrototype","_int64ArrayPrototype","_uint8ArrayPrototype","_uint8ClampedArrayPrototype","_uint16ArrayPrototype","_uint32ArrayPrototype","_uint64ArrayPrototype","_float32ArrayPrototype","_float64ArrayPrototype","_stringInstance","_allocInstance","_reallocInstance","_freeInstance","_retainInstance","_releaseInstance","_collectInstance","_visitInstance","_typeinfoInstance","_instanceofInstance","_allocBufferInstance","_allocArrayInstance","nativeDummySignature","nativeSource","Source","parser","Parser","resolver","Resolver","nativeFile","File","internalName","cached","requireClass","CLASS_PROTOTYPE","lookupFunction","requireFunction","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamedType","createFunctionDeclaration","createNamespaceDeclaration","parent","decoratorFlags","FunctionPrototype","makeNativeFunctionDeclaration","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","registerConstantInteger","isWasm64","WASM64","WASM32","noAssert","memoryBase","tableBase","optimizeLevelHint","shrinkLevelHint","lowMemoryLimit","hasFeature","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","_keys","Map_keys","starExports","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","madeProgress","queuedImport","element","lookupForeign","splice","asAliasNamespace","Module_0_has_no_exported_member_1","exportNames","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","isDeclaredElement","arrayBufferInstance","id","stringInstance","arrayBufferViewInstance","registerWrapperClass","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_final_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","INTERFACE_PROTOTYPE","An_interface_can_only_extend_an_interface","implementsNodes","implementsNode","interfaceElement","interfacePrototype","interfacePrototypes","A_class_can_only_implement_an_interface","markVirtuals","globalAliases","isWasi","BuiltinNames","wasiAbort","wasiTrace","wasiSeed","alias","delete","firstChar","parseInt","_values","Map_values","USER_ENTRY","markModuleExports","thisInstanceMembers","instanceMembers","baseInstanceMembers","thisMember","isAny","baseMember","FUNCTION_PROTOTYPE","thisMethod","baseMethod","visibilityEquals","errorRelated","Overload_signatures_must_all_be_public_private_or_protected","VIRTUAL","overloads","baseMethodInstances","instances","PROPERTY_PROTOTYPE","thisProperty","baseProperty","baseGetter","getterPrototype","thisGetter","baseGetterInstances","baseSetter","setterPrototype","thisSetter","baseSetterInstances","Duplicate_identifier_0","nextPrototype","resolved","resolveClass","resolveFunction","markModuleExport","exportsStar","MODULE_EXPORT","member","propertyPrototype","PROPERTY","FIELD","staticMembers","setType","className","isInternalReference","classElement","wrappedType","isIntegerInclReference","global","Global","makeNativeVariableDeclaration","setConstantIntegerValue","isFloatValue","setConstantFloatValue","existing","merged","tryMerge","elements","lookupExport","fileQueuedExports","queuedExportForeignPath","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","initializeProperty","method","initializeMethod","constructorPrototype","is","AMBIENT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","isLiteralKind","_0_is_not_a_valid_operator","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","endsWith","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","initializeFieldAsProperty","typeNode","atEnd","createMethodDeclaration","createParameter","original","Namespace","copyMembers","cyclics","instance","isAcyclic","Element","program","shadowType","FILE","current","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isBound","isPublic","vis","declaredElements","DeclaredElement","signatureNode","base","isAssignableTo","selfProperty","selfGetter","getterInstance","selfSetter","setterInstance","AcyclicState","typedElements","TypedElement","RESOLVED","aliasNamespaces","startFunction","makeNativeFunction","Signature","ensureGlobal","includes","makeNativeNamespaceDeclaration","SCOPED","copyExportsToNamespace","memberName","TYPEDEFINITION","mangleInternalName","lookup","inSelf","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","i64_zero","constantFloatValue","INLINED","ENUMVALUE","isImmutable","Local","index","LOCAL","originalName","boundPrototypes","classInstance","bound","instanceKey","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","varargsStub","virtualStub","memorySegment","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempFuncrefs","tempExternrefs","tempExnrefs","tempAnyrefs","nextBreakId","breakStack","breakLabel","localIndex","thisType","local","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","createParent","registerConcreteElement","getDefaultParameterName","postfix","stub","clone","COMPILED","STUB","locals","sourceMap","setDebugLocation","FIELD_PROTOTYPE","memoryOffset","getterRef","setterRef","firstDeclaration","toBound","isUnchecked","lookupOverload","_isInterface","extendees","extends","basePtototype","Class","interfaces","nextMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","implementers","didCheckFieldInitialization","size","classReference","isBuiltinArray","lengthField","inheritedTypeArguments","baseName","baseType","iface","target","Set_values","uncheckedOverload","overload","fieldName","field","overhead","buffer","runtimeHeaderSize","writeI32","baseOffset","fieldInstance","offset","typeKind","i64_is","writeI8","writeI16","writeI64","writeI32AsI64","writeI64AsI32","writeF32","writeF64","extendedPrototype","arrayPrototype","getTypeArgumentsTo","staticArrayPrototype","abvInstance","float32ArrayPrototype","float64ArrayPrototype","int8ArrayPrototype","int16ArrayPrototype","int32ArrayPrototype","int64ArrayPrototype","uint8ArrayPrototype","uint8ClampedArrayPrototype","uint16ArrayPrototype","uint32ArrayPrototype","uint64ArrayPrototype","acyclic","hasCycle","cyclesTo","except","fieldType","isReference","getClass","setPrototype","mapPrototype","exceptIfMember","out","extendee","getAllExtendees","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","cachedDefaultParameterNames","NativeType","FeatureFlags","ExpressionId","BinaryOp","SideEffects","None","Unreachable","Auto","UnaryOp","AtomicRMWOp","SIMDExtractOp","SIMDReplaceOp","SIMDShiftOp","SIMDTernaryOp","SIMDLoadOp","ExpressionRunnerFlags","Module","hasTemporaryFunction","cachedStrings","lit","binaryen","_malloc","_BinaryenSizeofLiteral","_BinaryenModuleCreate","cArr","allocU8Array","_BinaryenModuleRead","_free","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","op","expr","_BinaryenUnary","_BinaryenBinary","_BinaryenMemorySize","delta","_BinaryenMemoryGrow","_BinaryenLocalGet","_BinaryenExpressionGetType","_BinaryenLocalTee","cStr","allocStringCached","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","allocPtrArray","ret","_BinaryenBlock","stmts","nop","single","getExpressionId","Return","Throw","singleType","getExpressionType","block","_BinaryenBreak","_BinaryenDrop","getSideEffects","ReadsLocal","ReadsGlobal","drop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","_BinaryenSwitch","operands","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPop","_BinaryenTupleMake","tuple","_BinaryenTupleExtract","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","segment","cArr1","cArr2","cArr3","cArr4","u32s","val","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenGetAllowInliningFunctionsWithLoops","enabled","_BinaryenSetAllowInliningFunctionsWithLoops","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","pass","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","passes","cStrs","optimizeLevel","shrinkLevel","debugInfo","usesARC","setOptimizeLevel","setShrinkLevel","setDebugInfo","clearPassArguments","setAlwaysInlineMaxSize","setFlexibleInlineMaxSize","setOneCallerInlineMaxSize","setAllowInliningFunctionsWithLoops","getLowMemoryUnused","runPasses","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","binary","BinaryModule","__i32_load8_u","readBuffer","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenExpressionCopy","maxLoopIterations","runner","_ExpressionRunnerCreate","precomp","_ExpressionRunnerRunAndDispose","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","UNLIMITED_MEMORY","UNLIMITED_TABLE","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChildAt","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperandAt","_BinaryenMemoryGrowGetDelta","_BinaryenFunctionGetBody","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","i32s","allocI32Array","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","features","All","_BinaryenExpressionGetSideEffects","u8s","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","arr","ch","fromCharCodes","defaultIndex","indexOf","labelPostfix","numCases","numValues","labels","local_set","br","EqI32","local_get","defaultLabel","unshift","lastCase","output","needsExplicitUnreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperandAt","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","Select","Drop","MemorySize","MemoryGrow","Nop","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperandAt","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TupleMake","_BinaryenTupleMakeGetNumOperands","_BinaryenTupleMakeGetOperandAt","TupleExtract","TypeKind","TypeFlags","_nonNullableType","_nullableType","byteSize","ceil","signatureReference","auto","isize64","isize32","usize64","usize32","clz","isIntegerValue","getSignature","wrapper","functionPrototype","isExternalReference","targetType","nullableType","isNullableReference","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isBooleanValue","isSignedIntegerValue","isVectorValue","signednessIsImportant","validWat","nullablePostfix","typesToNativeTypes","numTypes","toNativeType","requiredParameters","hasRest","signatureTypes","compare","numParameterTypes","nativeTypes","thisThisType","otherThisType","thisParameterTypes","otherParameterTypes","numParameters","requireSameSize","targetThisType","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cloneParameterTypes","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveClassPending","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Type_0_cannot_be_nullable","resolveClassInclTypeArguments","uniqueMap","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","getClassOrWrapper","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","currentType","ensureResolvedLazyGlobal","isTypedElement","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","variableLikeElement","propertyInstance","resolveProperty","indexedGet","resolvedType","functionInstance","baseInstance","targetExpression","intValue","isValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","PREFIX","Type_0_is_illegal_in_this_context","NONNULL","Not_implemented_0","nonNullableType","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","isNumericValue","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","isInline","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","elementType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","maybeInferCall","varType","varElement","ftype","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","nameInclTypeParamters","Interface","pendingClasses","anyPending","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","addInterface","finishResolveClass","unimplemented","ifaceMembers","isCompatibleOverride","This_overload_signature_is_not_compatible_with_its_implementation_signature","identifierAndSignatureRange","baseMembers","instanceMemberPrototypes","properties","fieldPrototype","fieldTypeNode","baseField","Field","isPowerOf2","boundPrototype","propertyGetter","propertySetter","Getter_and_setter_accessors_do_not_agree_in_visibility","Property_0_only_has_a_setter_and_is_missing_a_getter","Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2","ctorPrototype","ctorInstance","operatorInstance","overloadKind","overloadPrototype","Type_0_is_not_assignable_to_type_1","IndexSignature","pending","dependsOnInstance","_values2","Property","LocalFlags","FieldFlags","FlowFlags","ConditionKind","parentFunction","continueLabel","scopedLocals","localFlags","thisFieldFlags","inlineFunction","inlineReturnLabel","initThisFieldFlags","resetBreakContext","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","setLocalFlag","RETAINED","resetTemporaryName","scopedLocal","setTemporaryName","scopedDummy","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","actualClass","setThisFieldFlag","INITIALIZED","fieldFlags","stack","otherFlags","conditionKind","inherit","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","max","CONSTANT","WRAPPED","CONDITIONALLY_RETAINED","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","leftFieldFlags","newFieldFlags","rightFieldFlags","before","after","min","isShortIntegerValue","isLocalFlag","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","iff","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","retainInstance","getCallOperandAt","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChildAt","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","started","argumentsLength","setArgumentsLength","isInteger","isFloat","isBoolean","isSigned","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isManaged","isVoid","sub","mul","ctz","popcnt","rotl","rotr","abs","floor","copysign","nearest","reinterpret","sqrt","trunc","load","store","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","unreachable","instantiate","idof","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_add","f32_add","f64_add","i32_sub","f32_sub","f64_sub","i32_mul","f32_mul","f64_mul","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_saturate","v128_sub_saturate","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_bitmask","v128_min","v128_max","v128_pmin","v128_pmax","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_ceil","v128_floor","v128_trunc","v128_nearest","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_widen_low","v128_widen_high","v128_qfma","v128_qfms","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_abs","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_bitmask","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_abs","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_abs","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_bitmask","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_pmin","f32x4_pmax","f32x4_abs","f32x4_sqrt","f32x4_ceil","f32x4_floor","f32x4_trunc","f32x4_nearest","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_pmin","f64x2_pmax","f64x2_abs","f64x2_sqrt","f64x2_ceil","f64x2_floor","f64x2_trunc","f64x2_nearest","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","heap_base","rtti_base","visit_globals","visit_members","isNaN","isFinite","memory_size","memory_grow","memory_copy","memory_fill","memory_data","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","compileExpression","unary","ClzI64","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","builtin_ctz","CtzI64","builtin_popcnt","PopcntI64","builtin_rotl","ensureSmallIntegerWrap","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","currentFlow","temp1","temp2","XorI32","AddI32","local_tee","XorI64","AddI64","ShrI64","nativeSizeType","AbsF32","AbsF64","builtin_max","isNumericLiteral","MaxF32","MaxF64","nativeType","builtin_min","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","contextualType","outType","numOperands","immOffset","immAlign","evaluateImmediateOffset","evaluateImmediateAlign","builtin_store","contextIsExact","inType","convertExpression","builtin_add","AddF32","AddF64","builtin_sub","SubI32","SubI64","SubF32","SubF64","builtin_mul","MulI64","MulF32","MulF64","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","builtin_atomic_wait","builtin_diagnostic","checkTypeAbsent","User_defined_0","builtin_conversion","builtin_i8x16","runExpression","PreserveSideeffects","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","maxIdx","_0_must_be_a_value_between_1_and_2_inclusive","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleV8x16","builtin_v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","builtin_v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_pmin","PminF32x4","PminF64x2","builtin_v128_pmax","PmaxF32x4","PmaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsI8x16","AbsI16x8","AbsI32x4","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_ceil","CeilF32x4","CeilF64x2","builtin_v128_floor","FloorF32x4","FloorF64x2","builtin_v128_trunc","TruncF32x4","TruncF64x2","builtin_v128_nearest","NearestF32x4","NearestF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","builtin_v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","builtin_v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","builtin_v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_any_true","AnyTrueI8x16","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_bitmask","BitmaskI8x16","BitmaskI16x8","BitmaskI32x4","builtin_v128_qfma","simd_ternary","QFMAF32x4","QFMAF64x2","builtin_v128_qfms","QFMSF32x4","QFMSF64x2","typeToRuntimeFlags","alignLog2","evaluateConstantType","argumentsRange","naturalAlign","_0_must_be_a_power_of_two","feature","Feature_0_is_not_enabled","setCurrentTypeOnError","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","thisOperand","builtins","function_builtins","firstOperand","classMembers","Type_0_has_no_property_1","resultType","ensureStaticString","maybeDropCondition","temp","makeIsTrueish","compileFunction","compileCallDirect","valuesOperand","Array_literal_expected","numElements","exprs","makeZero","buf","writeStaticBuffer","byteLength","addMemorySegment","isChangeableTo","Type_0_cannot_be_changed_to_type_1","evaled","Default","makeAbort","if","ref_is_null","alreadyUnchecked","unset","indexArg","operandExprs","nativeParamTypes","ctor","ensureConstructor","checkFieldInitialization","compileInstantiate","thisArg","compileCallIndirect","AndV128","OrV128","XorV128","AndNotV128","builtin_v128_bitwise_unary","NotV128","builtin_v128_bitwise_ternary","Bitselect","runtimeFeatures","visitInstance","global_get","addFunction","nativeSizeSize","blocks","relooper","outer","addBlockWithSwitch","lastId","visitImpl","instanceId","isDeclaredInLibrary","visitFunc","visitSig","visitThisType","isStrictlyAssignableTo","fieldOffset","return","addBlock","flatten","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","getArrayValueType","addGlobal","instanceofInstance","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","ExportNames","mangleImportName_moduleName","mangleImportName_elementName","exportMemory","importMemory","initialMemory","maximumMemory","sharedMemory","importTable","exportTable","explicitStart","noUnsafe","pedantic","Constraints","RuntimeFeatures","memory","table","Compiler","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","skippedAutoreleases","inlineStack","lazyFunctions","pendingClassInstanceOf","virtualCalls","pendingElements","doneModuleExports","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","i32PowInstance","i64PowInstance","setLowMemoryUnused","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","GC","Memory64","setFeatures","startFunctionInstance","currentBody","compile","initialize","startFunctionBody","files","compileFile","compileExports","startIsEmpty","global_set","funcRef","nativeParams","nativeResults","finalize","addFunctionExport","setStart","cyclicClasses","findCyclicClasses","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","functionsToCompile","clear","compileClassInstanceOf","ensureVirtualStub","finalizeVirtualStub","ensureVarargsStub","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","lowMemoryLimit32","i64_gt","Low_memory_limit_exceeded_by_static_data_0_1","i64_to_string","initialPages","i64_shr_u","Module_requires_at_least_0_pages_of_initial_memory","maximumPages","Module_requires_at_least_0_pages_of_maximum_memory","isSharedMemory","Shared_memory_requires_maximum_memory_to_be_defined","Shared_memory_requires_feature_threads_to_be_enabled","setMemory","addMemoryImport","functionTableNames","setFunctionTable","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","elementName","ensureModuleExport","prefix","functionInstances","fullName","warning","Exported_generic_function_or_class_has_no_concrete_instances","classInstances","addGlobalExport","Cannot_export_a_mutable_global","enumValue","ensureArgumentsLength","internalGetterName","internalSetterName","isUnmanaged","subPrefix","implicitExport","compileMembers","compileGlobal","compileEnum","compileClass","compileProperty","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","ERRORED","initExpr","checkTypeSupported","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","initializeInStart","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","compileInlineConstant","findDecorator","decoratorNodes","makeRetain","previousParent","previousValue","previousValueIsMut","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","forceStdAlternative","previousType","bodyNode","declarationNode","checkSignatureSupported","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","performAutoreleases","addFunctionImport","getFunction","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileStatements","compileReturnedExpression","indexBefore","nonNull","isNonnull","allocStmts","makeAllocation","makeFieldInitializationInConstructor","firstStmt","Explicitly_returning_constructor_drops_this_allocation","A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","compileField","compileFieldGetter","compileFieldSetter","nativeThisType","nativeValueType","valueExpr","makeRelease","compilePropertyGetter","compilePropertySetter","alignment","MemorySegment","stringValue","stringSegment","rtHeaderSize","createBuffer","bufferSegment","arrayInstance","bufferLength","arrayLength","bufferAddress","writeField","rtInstance","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","labelNode","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","condKind","evaluateCondition","tcond","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","elseStmts","elseFlow","inheritMutual","valueExpression","constraints","context","tempLocal","tempLocalIndex","breaks","breakIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","newArgs","dropped","numDeclarations","initializers","initAutoreleaseSkipped","dummy","addScopedDummyLocal","freeScopedDummyLocal","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","doCompileWhileStatement","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","isLongIntegerValue","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","isVaryingIntegerValue","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","exceptVoid","info","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","compileAssignment","makeCallDirect","namespace","namespaceMembers","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrU64","AndI64","OrI32","OrI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","retainLeftInThen","makeAssignment","thisExpression","Variable_0_used_before_its_declaration","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","Indexed_access_may_involve_bounds_checking","indexExpression","tee","makeLocalAssignment","isConstructor","fieldParent","makeFieldAssignment","makeAutorelease","thisExpr","nativeReturnType","tempThis","elementExpr","tempTarget","tempElement","alreadyRetained","makeReplace","nativeFieldType","findUsedLocals","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","baseCtorInstance","superCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","compileCallExpressionBuiltin","callee","BuiltinContext","fn","methodName","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","relatedReportNode","Operation_is_unsafe","argumentExpressions","checkCallSignature","isAccessOnThis","isAccessOnSuper","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","addScopedAlias","initType","checkFieldInitializationInFlow","originalSignature","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","newStub","ofN","switch","Optional_parameter_must_have_an_initializer","theCall","tempIndex","builder","SwitchBuilder","unboundOverloadPrototype","unboundOverloadParent","isProperty","propertyParent","overloadInstance","boundProperty","boundPropertyInstance","overloadType","originalType","overloadSignature","overloadParameterTypes","overloadNumParameters","paramExprs","needsVarargsStub","calledName","addCase","removeFunction","render","releaseInstance","newExpr","newType","oldExpr","oldType","getAutoreleaseLocal","lengthBefore","maybeFinishAutorelease","skipAutorelease","Function_0_is_virtual_and_will_not_be_inlined","theOperands","allOptionalsAreConstant","compilesToConst","lastOperand","WritesGlobal","lastOperandType","makeCallIndirect","numExpressions","contextualSignature","numPresentParameters","thisTypeNode","ensureRuntimeFunction","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","namedType","hasTypeArguments","makeInstanceofClass","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","contextualClass","compileStaticArrayLiteral","arrayType","tempDataStart","nativeElementType","addStaticBuffer","arraySegment","addStaticArrayHeader","arrayAddress","allocArrayInstance","nativeArrayType","dataStartMember","bufferSize","allocBufferInstance","classType","Cannot_create_an_instance_of_an_abstract_class","Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal","hasErrors","nativeClassType","omittedFields","memberKey","Property_0_is_private_and_only_accessible_within_class_1","Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses","Property_0_is_missing_in_type_1_but_required_in_type_2","baseClass","baseCtor","allocExpr","relatedNode","isThisFieldFlag","DEFINITELY_ASSIGNED","Property_0_is_always_assigned_before_being_used","Unnecessary_definite_assignment","Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned","parentEnum","Property_0_is_used_before_being_assigned","Object_is_possibly_null","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","supported","v128_zero","ref_null","allocInstance","thisLocalIndex","codeLocation","abortInstance","messageArg","makeStaticAbort","messageExpr","filenameExpr","Dependee","backlog","seenlog","donelog","currentSource","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","dependee","USER","tn","parseTopLevelStatement","skipStatement","startPos","parseDecorator","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","abstractStart","abstractEnd","reset","parseStatement","_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","parameter","notNullStart","notNull","bracketStart","bracketRange","nullable","isSignature","firstParamNameNoType","firstParamKind","paramStart","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","explicitThis","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","getStart","getEnd","setEnd","isGetterOrSetter","createConstructorExpression","retIndex","parseIndexSignature","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","_0_keyword_cannot_be_used_here","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignature","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createWildcardImportStatement","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createOmittedExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","ExportsWalker","includePrivate","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","walk","TSDBuilder","remainingMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","Infinity","NaN","clz32","round","x","y","sign","isTrueish","apply","parts","fromCodePoint","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","arguments","console","byteOffset","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","i64_neg_one","fromInt","isLong","lo","hi","fromBits","low","high","i64_pow","rightLo","rightHi","eq","shru","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","i64_not","not","i64_eq","i64_ne","ne","gt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","map","keys","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","FEATURE_GC","FEATURE_MEMORY64","getSource","parseFile","nextFile","getDependee","finish","util","readI32","readI64","valueI64","overrides","cloned","v","ipos","dirname","origin","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","ASTBuilder","visitNode","visitSource","visitNamedTypeNode","visitFunctionTypeNode","visitTypeParameter","visitIdentifierExpression","visitAssertionExpression","visitBinaryExpression","visitCallExpression","visitClassExpression","visitCommaExpression","visitElementAccessExpression","visitFunctionExpression","visitInstanceOfExpression","visitLiteralExpression","visitNewExpression","visitParenthesizedExpression","visitPropertyAccessExpression","visitTernaryExpression","visitUnaryPostfixExpression","visitUnaryPrefixExpression","visitBlockStatement","visitBreakStatement","visitContinueStatement","visitDoStatement","visitEmptyStatement","visitExportStatement","visitExportDefaultStatement","visitExportImportStatement","visitExpressionStatement","visitForStatement","visitForOfStatement","visitIfStatement","visitImportStatement","visitReturnStatement","visitSwitchStatement","visitThrowStatement","visitTryStatement","visitVariableStatement","visitWhileStatement","visitClassDeclaration","visitEnumDeclaration","visitEnumValueDeclaration","visitFieldDeclaration","visitFunctionDeclaration","visitImportDeclaration","visitInterfaceDeclaration","visitMethodDeclaration","visitNamespaceDeclaration","visitTypeDeclaration","visitVariableDeclaration","serializeDecorator","visitExportMember","serializeParameter","visitSwitchCase","visitIndexSignature","visitNodeAndTerminate","visitTypeName","visitTypeNode","visitStringLiteral","visitArguments","visitFunctionCommon","visitFloatLiteralExpression","visitIntegerLiteralExpression","visitStringLiteralExpression","visitRegexpLiteralExpression","visitArrayLiteralExpression","visitObjectLiteralExpression","singleQuoted","lastCharPos","isDefault","serializeExternalModifiers","numMembers","serializeAccessModifiers"],"mappings":"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ACX,KAAKyE,EAAMW,QACX,KAAKX,EAAMa,OACX,KAAKb,EAAMkB,KACX,KAAKlB,EAAMvB,IACX,KAAKuB,EAAMmB,IACX,KAAKnB,EAAMtE,WACX,KAAKsE,EAAMuB,GACX,KAAKvB,EAAMwB,MACX,KAAKxB,EAAM0B,OACX,KAAK1B,EAAM2B,UACX,KAAK3B,EAAMtI,KACX,KAAKsI,EAAMiC,SACX,KAAKjC,EAAMkC,IACX,KAAKlC,EAAMoC,KACX,KAAKpC,EAAML,KAAM,OAAO,EACxB,QAAS,OAAO,IAlSpB,SAAYK,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYC,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAgIA,0BAwBA,uCAA4C7f,GAE1C,OADA8K,OAAO9K,EAA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CA,wBACA,gCACA,gCACA,kBACA,kCACA,sCACA,8BACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,gCACA,4BACA,gCACA,gCACA,kBACA,0BACA,8BACA,0BACA,kBACA,sBACA,0BACA,0BACA,8BACA,oCAjDF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAoDxB,SAAYM,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,8BACA,gCACA,gCACA,oCACA,4BACA,4BACA,8BACA,8BACA,gCACA,gCACA,oCACA,oDACA,qDACA,qDACA,qDACA,mDACA,mDACA,mDACA,mDACA,qDACA,uDACA,qDACA,uDACA,qDACA,uDACA,qDACA,uDAzHF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KA4HnB,SAAYL,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BAEA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,+BACA,iDACA,iDACA,iDACA,iDACA,qCApLF,CAAYA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KAuLpB,SAAYM,GACV,iBACA,iBACA,iBACA,eACA,iBACA,mBANF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KASvB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CARF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAWzB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CANF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KASzB,SAAYC,GACV,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,4B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FACA,+DACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,2FACA,uEACA,mDACA,+EACA,mGACA,uKACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,uFACA,yDACA,uGACA,qHACA,yEACA,yLACA,qIACA,2GACA,6IACA,uIACA,uIACA,+GACA,iGACA,yHACA,2EACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,kFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,8HACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,0HACA,wGACA,oIACA,wFACA,4KACA,sHACA,gFACA,oKACA,gLACA,4FACA,0MACA,wKACA,0FACA,kQACA,8DACA,kGACA,gKACA,oIACA,kJACA,0GACA,kKACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,sNACA,8FACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,0HACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MA9KF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KAkL1B,kCAAuCI,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,sDACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO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AG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IA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tBzI,EAAK7G,WAAW,IACM,IAAtB6G,EAAK7G,WAAW,IAChB,CAEAH,GADAgH,EAAOA,EAAK3G,UAAUoP,EAAM,IACjBxP,OACX,WAKRwP,IAEF,OAAOzP,EAAM,EAAIgH,EAAO,IAc1B,SAAgBmqH,EAAQ3xH,GACtB,IAAIiQ,EAAMjQ,EAAeS,OACzB,GAAIwP,GAAO,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAxGc,IAwGVjQ,EAAeW,WAAW,GAC5B,OAAOX,EAGX,OAASiQ,EAAM,GACb,GA7Gc,IA6GVjQ,EAAeW,WAAWsP,GAC5B,OAAOjQ,EAAea,UAAU,EAAGoP,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4BjQ,EAAwB4xH,GAClD,OAAI5xH,EAAeuR,WAAW,QACrBvR,EAEFsR,EACLqgH,EAAQC,GAAU,EAAA18H,eAAiB8K,IAKvC,a,sPC3GA,SAAkB6xH,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4Bv+H,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkC0L,GAChC,OAAOA,GAAQ,IAAcA,GAAQ,KAC9BA,GAAQ,IAAcA,GAAQ,IAC9BA,GAAQ,IAAeA,GAAQ,IAIxC,6BAAkC1L,GAChC,MAAMw+H,EAAS,GAAJx+H,EACX,OAAOw+H,GAAM,IAAcA,GAAM,KACrB,IAALx+H,GACK,IAALA,GACAA,EAAI,SAmLqB0L,EAnLY1L,GAoL9B,KAAO0L,EAAO,QACrB+yH,EAAmB/yH,EAAagzH,IAFzC,IAAkChzH,GA/KlC,8BAAmC1L,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAMw+H,EAAS,GAAJx+H,EACX,OAAOw+H,GAAM,IAAcA,GAAM,KAC1Bx+H,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoB0L,EAzKY1L,GA0K7B,KAAO0L,EAAO,QACrB+yH,EAAmB/yH,EAAaizH,IAFzC,IAAiCjzH,GArKjC,MAAMgzH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./vector\";\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITELY_ASSIGNED = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Did error. */\n  ERRORED = 1 << 23,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 24,\n  /** Is scoped. */\n  SCOPED = 1 << 25,\n  /** Is a stub. */\n  STUB = 1 << 26,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 27,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 28,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 29\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n/** Stub function delimiter. */\nexport const STUB_DELIMITER = \"@\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const funcref = \"funcref\";\n  export const externref = \"externref\";\n  export const exnref = \"exnref\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n  export const ASC_WASI = \"ASC_WASI\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  export const ASC_FEATURE_GC = \"ASC_FEATURE_GC\";\n  export const ASC_FEATURE_MEMORY64 = \"ASC_FEATURE_MEMORY64\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Funcref = \"Funcref\";\n  export const Externref = \"Externref\";\n  export const Exnref = \"Exnref\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const Function = \"Function\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const ipow32 = \"ipow32\";\n  export const ipow64 = \"ipow64\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocBuffer = \"__allocBuffer\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence for magenta foreground. */\nexport const COLOR_MAGENTA: string = \"\\u001b[95m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null; // TODO: Make this a related message for chains?\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Tests if this message equals the specified. */\n  equals(other: DiagnosticMessage): bool {\n    if (this.code != other.code) return false;\n    var thisRange = this.range;\n    var otherRange = other.range;\n    if (thisRange) {\n      if (!otherRange || !thisRange.equals(otherRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    var thisRelatedRange = this.relatedRange;\n    var otherRelatedRange = other.relatedRange;\n    if (thisRelatedRange) {\n      if (!otherRelatedRange || !thisRelatedRange.equals(otherRelatedRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    return this.message == other.message;\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      let source = range.source;\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        source.normalizedPath +\n        \"(\" +\n        source.lineAt(range.start).toString() +\n        \",\" +\n        source.columnAt().toString() +\n        \"+\" +\n        (range.end - range.start).toString() +\n        \")\"\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n    let source = range.source;\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(source.lineAt(range.start).toString());\n    sb.push(\",\");\n    sb.push(source.columnAt().toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      let relatedSource = relatedRange.source;\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedSource.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedSource.lineAt(relatedRange.start).toString());\n      sb.push(\",\");\n      sb.push(relatedSource.columnAt().toString());\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,DiagnosticMessage[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenMessagesAtPos = assert(seenInSource.get(range.start));\n          for (let i = 0, k = seenMessagesAtPos.length; i < k; ++i) {\n            if (seenMessagesAtPos[i].equals(message)) return;\n          }\n          seenMessagesAtPos.push(message);\n        } else {\n          seenInSource.set(range.start, [ message ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,DiagnosticMessage[]>();\n        seenInSource.set(range.start, [ message ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode,\n  isTrivialAlphanum\n} from \"./util\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  OMITTED,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  INDEXSIGNATURE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  constructor(\n    /** Kind of this node. */\n    public kind: NodeKind,\n    /** Source range. */\n    public range: Range\n  ) {}\n\n  // types\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return new TypeName(Node.createIdentifierExpression(name, range), null, range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(name, typeArguments, isNullable, range);\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    return new FunctionTypeNode(parameters, returnType, explicitThisType, isNullable, range);\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(Node.createSimpleTypeName(\"\", range), null, false, range);\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    return new TypeParameterNode(name, extendsType, defaultType, range);\n  }\n\n  static createParameter(\n    parameterKind: ParameterKind,\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    range: Range\n  ): ParameterNode {\n    return new ParameterNode(parameterKind, name, type, initializer, range);\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    return new DecoratorNode(DecoratorKind.fromNode(name), name, args, range);\n  }\n\n  static createComment(\n    commentKind: CommentKind,\n    text: string,\n    range: Range\n  ): CommentNode {\n    return new CommentNode(commentKind, text, range);\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    text: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    return new IdentifierExpression(text, isQuoted, range);\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    return new IdentifierExpression(\"\", false, range);\n  }\n\n  static createArrayLiteralExpression(\n    elementExpressions: Expression[],\n    range: Range\n  ): ArrayLiteralExpression {\n    return new ArrayLiteralExpression(elementExpressions, range);\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    return new AssertionExpression(assertionKind, expression, toType, range);\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    return new BinaryExpression(operator, left, right, range);\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    return new CallExpression(expression, typeArguments, args, range);\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    return new ClassExpression(declaration);\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    return new CommaExpression(expressions, range);\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    return new ConstructorExpression(range);\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    elementExpression: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    return new ElementAccessExpression(expression, elementExpression, range);\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    return new FalseExpression(range);\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    return new FloatLiteralExpression(value, range);\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    return new FunctionExpression(declaration);\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    return new InstanceOfExpression(expression, isType, range);\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    return new IntegerLiteralExpression(value, range);\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    return new NewExpression(typeName, typeArguments, args, range);\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    return new NullExpression(range);\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    return new ObjectLiteralExpression(names, values, range);\n  }\n\n  static createOmittedExpression(\n    range: Range\n  ): OmittedExpression {\n    return new OmittedExpression(range);\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    return new ParenthesizedExpression(expression, range);\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    return new PropertyAccessExpression(expression, property, range);\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    patternFlags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    return new RegexpLiteralExpression(pattern, patternFlags, range);\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    return new TernaryExpression(condition, ifThen, ifElse, range);\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    return new StringLiteralExpression(value, range);\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    return new SuperExpression(range);\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    return new ThisExpression(range);\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    return new TrueExpression(range);\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    return new UnaryPostfixExpression(operator, operand, range);\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    return new UnaryPrefixExpression(operator, operand, range);\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    return new BlockStatement(statements, range);\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    return new BreakStatement(label, range);\n  }\n\n  static createClassDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): ClassDeclaration {\n    return new ClassDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    return new ContinueStatement(label, range);\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    return new DoStatement(statement, condition, range);\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    return new EmptyStatement(range);\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    values: EnumValueDeclaration[],\n    range: Range\n  ): EnumDeclaration {\n    return new EnumDeclaration(name, decorators, flags, values, range);\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    flags: CommonFlags,\n    initializer: Expression | null,\n    range: Range\n  ): EnumValueDeclaration {\n    return new EnumValueDeclaration(name, flags, initializer, range);\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    return new ExportStatement(members, path, isDeclare, range);\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    return new ExportDefaultStatement(declaration, range);\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    return new ExportImportStatement(name, externalName, range);\n  }\n\n  static createExportMember(\n    localName: IdentifierExpression,\n    exportedName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    if (!exportedName) exportedName = localName;\n    return new ExportMember(localName, exportedName, range);\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    return new ExpressionStatement(expression);\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    return new IfStatement(condition, ifTrue, ifFalse, range);\n  }\n\n  static createImportStatement(\n    declarations: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(declarations, null, path, range);\n  }\n\n  static createWildcardImportStatement(\n    namespaceName: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(null, namespaceName, path, range);\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    if (!name) name = foreignName;\n    return new ImportDeclaration(name, foreignName, range);\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): InterfaceDeclaration {\n    return new InterfaceDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): FieldDeclaration {\n    return new FieldDeclaration(name, decorators, flags, type, initializer, -1, range);\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    return new ForStatement(initializer, condition, incrementor, statement, range);\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    return new ForOfStatement(variable, iterable, statement, range);\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    return new FunctionDeclaration(name, decorators, flags, typeParameters, signature, body, arrowKind, range);\n  }\n\n  static createIndexSignature(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureNode {\n    return new IndexSignatureNode(keyType, valueType, flags, range);\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    range: Range\n  ): MethodDeclaration {\n    return new MethodDeclaration(name, decorators, flags, typeParameters, signature, body, range);\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    members: Statement[],\n    range: Range\n  ): NamespaceDeclaration {\n    return new NamespaceDeclaration(name, decorators, flags, members, range);\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    return new ReturnStatement(value, range);\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    return new SwitchStatement(condition, cases, range);\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    return new SwitchCase(label, statements, range);\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    return new ThrowStatement(value, range);\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    return new TryStatement(statements, catchVariable, catchStatements, finallyStatements, range);\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    type: TypeNode,\n    range: Range\n  ): TypeDeclaration {\n    return new TypeDeclaration(name, decorators, flags, typeParameters, type, range);\n  }\n\n  static createVariableStatement(\n    decorators: DecoratorNode[] | null,\n    declarations: VariableDeclaration[],\n    range: Range\n  ): VariableStatement {\n    return new VariableStatement(decorators, declarations, range);\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): VariableDeclaration {\n    return new VariableDeclaration(name, decorators, flags, type, initializer, range);\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    return new VoidStatement(expression, range);\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    return new WhileStatement(condition, statement, range);\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n\n  private isAccessOn(kind: NodeKind): bool {\n    let node = changetype<Node>(this);\n    if (node.kind == NodeKind.CALL) {\n      node = (<CallExpression>node).expression;\n    }\n    if (node.kind == NodeKind.PROPERTYACCESS) {\n      let target = (<PropertyAccessExpression>node).expression;\n      if (target.kind == kind) return true;\n    }\n    return false;\n  }\n\n  /** Checks if this node accesses a method or property on `this`. */\n  get isAccessOnThis(): bool {\n    return this.isAccessOn(NodeKind.THIS);\n  }\n\n  /** Checks if this node accesses a method or property on `super`. */\n  get isAccessOnSuper(): bool {\n    return this.isAccessOn(NodeKind.SUPER);\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  constructor(\n    /** Kind of the type node. */\n    kind: NodeKind,\n    /** Whether nullable or not. */\n    public isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  constructor(\n    /** Identifier of this part. */\n    public identifier: IdentifierExpression,\n    /** Next part of the type name or `null` if this is the last part. */\n    public next: TypeName | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPENAME, range);\n  }\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  constructor(\n    /** Type name. */\n    public name: TypeName,\n    /** Type argument references. */\n    public typeArguments: TypeNode[] | null,\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMEDTYPE, isNullable, range);\n  }\n\n  /** Checks if this type node has type arguments. */\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  constructor(\n    /** Function parameters. */\n    public parameters: ParameterNode[],\n    /** Return type. */\n    public returnType: TypeNode,\n    /** Explicitly provided this type, if any. */\n    public explicitThisType: NamedTypeNode | null, // can't be a function\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONTYPE, isNullable, range);\n  }\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  constructor(\n    /** Identifier reference. */\n    public name: IdentifierExpression,\n    /** Extended type reference, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Default type if omitted, if any. */\n    public defaultType: NamedTypeNode | null, // can't be a function\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEPARAMETER, range);\n  }\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  constructor(\n    /** Parameter kind. */\n    public parameterKind: ParameterKind,\n    /** Parameter name. */\n    public name: IdentifierExpression,\n    /** Parameter type. */\n    public type: TypeNode,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARAMETER, range);\n  }\n\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  FINAL,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.f: {\n          if (nameStr == \"final\") return DecoratorKind.FINAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  constructor(\n    /** Built-in decorator kind, or custom. */\n    public decoratorKind: DecoratorKind,\n    /** Name expression. */\n    public name: Expression,\n    /** Argument expressions. */\n    public args: Expression[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DECORATOR, range);\n  }\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash line comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  constructor(\n    /** Comment kind. */\n    public commentKind: CommentKind,\n    /** Comment text. */\n    public text: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMENT, range);\n  }\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  constructor(\n    /** Textual name. */\n    public text: string,\n    /** Whether quoted or not. */\n    public isQuoted: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IDENTIFIER, range);\n  }\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  constructor(\n    /** Specific literal kind. */\n    public literalKind: LiteralKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.LITERAL, range);\n  }\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Nested element expressions. */\n    public elementExpressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.ARRAY, range);\n  }\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  /** A prefix assertion, i.e. `<T>expr`. */\n  PREFIX,\n  /** An as assertion, i.e. `expr as T`. */\n  AS,\n  /** A non-null assertion, i.e. `!expr`. */\n  NONNULL,\n  /** A const assertion, i.e. `expr as const`. */\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  constructor(\n    /** Specific kind of this assertion. */\n    public assertionKind: AssertionKind,\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Target type, if applicable. */\n    public toType: TypeNode | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ASSERTION, range);\n  }\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  constructor(\n    /** Operator token. */\n    public operator: Token,\n    /** Left-hand side expression */\n    public left: Expression,\n    /** Right-hand side expression. */\n    public right: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BINARY, range);\n  }\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  constructor(\n    /** Called expression. Usually an identifier or property access expression. */\n    public expression: Expression,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CALL, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  constructor(\n    /** Inline class declaration. */\n    public declaration: ClassDeclaration\n  ) {\n    super(NodeKind.CLASS, declaration.range);\n  }\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  constructor(\n    /** Sequential expressions. */\n    public expressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMA, range);\n  }\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"constructor\", false, range);\n    this.kind = NodeKind.CONSTRUCTOR;\n  }\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Element of the expression being accessed. */\n    public elementExpression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ELEMENTACCESS, range);\n  }\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Float value. */\n    public value: f64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.FLOAT, range);\n  }\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  constructor(\n    /** Inline function declaration. */\n    public declaration: FunctionDeclaration\n  ) {\n    super(NodeKind.FUNCTION, declaration.range);\n  }\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  constructor(\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Type to test for. */\n    public isType: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INSTANCEOF, range);\n  }\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Integer value. */\n    public value: i64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.INTEGER, range);\n  }\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  constructor(\n    /** Type being constructed. */\n    public typeName: TypeName,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NEW, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"null\", false, range);\n    this.kind = NodeKind.NULL;\n  }\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Field names. */\n    public names: IdentifierExpression[],\n    /** Field values. */\n    public values: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.OBJECT, range);\n  }\n}\n\n/** Represents an omitted expression, e.g. within an array literal. */\nexport class OmittedExpression extends Expression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.OMITTED, range);\n  }\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  constructor(\n    /** Expression in parenthesis. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARENTHESIZED, range);\n  }\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Property of the expression being accessed. */\n    public property: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PROPERTYACCESS, range);\n  }\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Regular expression pattern. */\n    public pattern: string,\n    /** Regular expression flags. */\n    public patternFlags: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.REGEXP, range);\n  }\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Expression executed when condition is `true`. */\n    public ifThen: Expression,\n    /** Expression executed when condition is `false`. */\n    public ifElse: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TERNARY, range);\n  }\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  constructor(\n    /** String value without quotes. */\n    public value: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.STRING, range);\n  }\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"super\", false, range);\n    this.kind = NodeKind.SUPER;\n  }\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"this\", false, range);\n    this.kind = NodeKind.THIS;\n  }\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"true\", false, range);\n    this.kind = NodeKind.TRUE;\n  }\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"false\", false, range);\n    this.kind = NodeKind.FALSE;\n  }\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  constructor(\n    /** Unary expression kind. */\n    kind: NodeKind,\n    /** Operator token. */\n    public operator: Token,\n    /** Operand expression. */\n    public operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPOSTFIX, operator, operand, range);\n  }\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPREFIX, operator, operand, range);\n  }\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  constructor(\n    /** Source kind. */\n    public sourceKind: SourceKind,\n    /** Normalized path with file extension. */\n    public normalizedPath: string,\n    /** Full source text. */\n    public text: string\n  ) {\n    super(NodeKind.SOURCE, new Range(0, text.length));\n    var internalPath = mangleInternalPath(normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.range.source = this;\n  }\n\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[] = new Array();\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n\n  /** Cached line starts. */\n  private lineCache: i32[] | null = null;\n\n  /** Remembered column number. */\n  private lineColumn: i32 = 1;\n\n  /** Determines the line number at the specified position. Starts at `1`. */\n  lineAt(pos: i32): i32 {\n    assert(pos >= 0 && pos < 0x7fffffff);\n    var lineCache = this.lineCache;\n    if (!lineCache) {\n      this.lineCache = lineCache = [0];\n      let text = this.text;\n      let off = 0;\n      let end = text.length;\n      while (off < end) {\n        if (text.charCodeAt(off++) == CharCode.LINEFEED) lineCache.push(off);\n      }\n      lineCache.push(0x7fffffff);\n    }\n    var l = 0;\n    var r = lineCache.length - 1;\n    while (l < r) {\n      let m = l + ((r - l) >> 1);\n      let s = unchecked(lineCache[m]);\n      if (pos < s) r = m;\n      else if (pos < unchecked(lineCache[m + 1])) {\n        this.lineColumn = pos - s + 1;\n        return m + 1;\n      }\n      else l = m + 1;\n    }\n    return assert(0);\n  }\n\n  /** Gets the column number at the last position queried with `lineAt`. Starts at `1`. */\n  columnAt(): i32 {\n    return this.lineColumn;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  constructor(\n    /** Declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    public name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    public decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature. */\nexport class IndexSignatureNode extends Node {\n  constructor(\n    /** Key type. */\n    public keyType: NamedTypeNode,\n    /** Value type. */\n    public valueType: TypeNode,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INDEXSIGNATURE, range);\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  constructor(\n    /** Variable-like declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    public type: TypeNode | null,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, name, decorators, flags, range);\n  }\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BLOCK, range);\n  }\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  constructor(\n    /** Target label, if any. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BREAK, range);\n  }\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    public implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    public members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CLASSDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Index signature, if present. */\n  indexSignature: IndexSignatureNode | null = null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  constructor(\n    /** Target label, if applicable. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CONTINUE, range);\n  }\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  constructor(\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Condition when to repeat. */\n    public condition: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DO, range);\n  }\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EMPTY, range);\n  }\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Enum value declarations. */\n    public values: EnumValueDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMVALUEDECLARATION, name, null, flags, null, initializer, range);\n  }\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  constructor(\n    /** Identifier being imported. */\n    public name: IdentifierExpression,\n    /** Identifier being exported. */\n    public externalName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTIMPORT, range);\n  }\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  constructor(\n    /** Local identifier. */\n    public localName: IdentifierExpression,\n    /** Exported identifier. */\n    public exportedName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTMEMBER, range);\n  }\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  constructor(\n    /** Array of members if a set of named exports, or `null` if a file export. */\n    public members: ExportMember[] | null,\n    /** Path being exported from, if applicable. */\n    public path: StringLiteralExpression | null,\n    /** Whether this is a declared export. */\n    public isDeclare: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORT, range);\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      this.internalPath = normalizedPath;\n    } else {\n      this.internalPath = null;\n    }\n  }\n\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  constructor(\n    /** Declaration being exported as default. */\n    public declaration: DeclarationStatement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTDEFAULT, range);\n  }\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  constructor(\n    /** Expression being used as a statement.*/\n    public expression: Expression\n  ) {\n    super(NodeKind.EXPRESSION, expression.range);\n  }\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n    public parameterIndex: i32,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FIELDDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  constructor(\n    /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n    public initializer: Statement | null,\n    /** Condition expression, if present. */\n    public condition: Expression | null,\n    /** Incrementor expression, if present. */\n    public incrementor: Expression | null,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOR, range);\n  }\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  constructor(\n    /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n    public variable: Statement,\n    /** Iterable expression being iterated. */\n    public iterable: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOROF, range);\n  }\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    public signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    public body: Statement | null,\n    /** Arrow function kind, if applicable. */\n    public arrowKind: ArrowKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Gets if this function is generic. */\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return new FunctionDeclaration(\n      this.name,\n      this.decorators,\n      this.flags,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  constructor(\n    /** Condition. */\n    public condition: Expression,\n    /** Statement executed when condition is `true`. */\n    public ifTrue: Statement,\n    /** Statement executed when condition is `false`. */\n    public ifFalse: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IF, range);\n  }\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Identifier being imported. */\n    public foreignName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORTDECLARATION, name, null, CommonFlags.NONE, range);\n  }\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  constructor(\n    /** Array of member declarations or `null` if an asterisk import. */\n    public declarations: ImportDeclaration[] | null,\n    /** Name of the local namespace, if an asterisk import. */\n    public namespaceName: IdentifierExpression | null,\n    /** Path being imported from. */\n    public path: StringLiteralExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORT, range);\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    this.internalPath = normalizedPath;\n  }\n\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n    this.kind = NodeKind.INTERFACEDECLARATION;\n  }\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    body: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, signature, body, ArrowKind.NONE, range);\n    this.kind = NodeKind.METHODDECLARATION;\n  }\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Array of namespace members. */\n    public members: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMESPACEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  constructor(\n    /** Value expression being returned, if present. */\n    public value: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.RETURN, range);\n  }\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  constructor(\n    /** Label expression. `null` indicates the default case. */\n    public label: Expression | null,\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCHCASE, range);\n  }\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Contained cases. */\n    public cases: SwitchCase[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCH, range);\n  }\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  constructor(\n    /** Value expression being thrown. */\n    public value: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.THROW, range);\n  }\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Exception variable name, if a `catch` clause is present. */\n    public catchVariable: IdentifierExpression | null,\n    /** Statements being executed on catch, if a `catch` clause is present. */\n    public catchStatements: Statement[] | null,\n    /** Statements being executed afterwards, if a `finally` clause is present. */\n    public finallyStatements: Statement[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TRY, range);\n  }\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Type being aliased. */\n    public type: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLEDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  constructor(\n    /** Array of decorators. */\n    public decorators: DecoratorNode[] | null,\n    /** Array of member declarations. */\n    public declarations: VariableDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLE, range);\n  }\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  constructor(\n    /** Expression being dropped. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VOID, range);\n  }\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.WHILE, range);\n  }\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  var pos = path.lastIndexOf(\".\");\n  var len = path.length;\n  if (pos >= 0 && len - pos >= 2) { // at least one char plus dot\n    let cur = pos;\n    while (++cur < len) {\n      if (!isTrivialAlphanum(path.charCodeAt(cur))) {\n        assert(false); // not a valid external path\n        return path;\n      }\n    }\n    return path.substring(0, pos);\n  }\n  assert(false); // not an external path\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  start: i32;\n  end: i32;\n  source!: Source;\n  debugInfoRef: usize = 0;\n\n  constructor(start: i32, end: i32) {\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    let range = new Range(\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n    range.source = a.source;\n    return range;\n  }\n\n  equals(other: Range): bool {\n    return this.source == other.source && this.start == other.start && this.end == other.end;\n  }\n\n  get atStart(): Range {\n    let range = new Range(this.start, this.start);\n    range.source = this.source;\n    return range;\n  }\n\n  get atEnd(): Range {\n    let range = new Range(this.end, this.end);\n    range.source = this.source;\n    return range;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n    this.source = source;\n\n    var text = source.text;\n    var end = text.length;\n    var pos = 0;\n    // skip bom\n    if (\n      pos < end &&\n      text.charCodeAt(pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++pos;\n    }\n\n    // skip shebang\n    if (\n      pos + 1 < end &&\n      text.charCodeAt(pos) == CharCode.HASH &&\n      text.charCodeAt(pos + 1) == CharCode.EXCLAMATION\n    ) {\n      pos += 2;\n      while (\n        pos < end &&\n        text.charCodeAt(pos) != CharCode.LINEFEED\n      ) {\n        ++pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n    this.pos = pos;\n    this.end = end;\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    while (pos < end) {\n      this.tokenPos = pos;\n      let c = text.charCodeAt(pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++pos < end &&\n            text.charCodeAt(pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            ++pos;\n            if (\n              maxTokenLength > 2 && pos < end &&\n              text.charCodeAt(pos) == CharCode.EQUALS\n            ) {\n              this.pos = pos + 1;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            this.pos = pos;\n            return Token.EXCLAMATION_EQUALS;\n          }\n          this.pos = pos;\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          this.pos = pos;\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.PERCENT_EQUALS;\n          }\n          this.pos = pos;\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.AMPERSAND) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          this.pos = pos + 1;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          this.pos = pos + 1;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++pos;\n              if (\n                maxTokenLength > 2 && pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              this.pos = pos;\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          this.pos = pos;\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.PLUS) {\n              this.pos = pos + 1;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          this.pos = pos + 1;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.MINUS) {\n              this.pos = pos + 1;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (isDecimalDigit(chr)) {\n              this.pos = pos - 1;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(pos + 1) == CharCode.DOT\n            ) {\n              this.pos = pos + 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          this.pos = pos;\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = pos;\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                pos + 1 < end &&\n                text.charCodeAt(pos + 1) == CharCode.SLASH\n              ) {\n                ++pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++pos < end) {\n                if (text.charCodeAt(pos) == CharCode.LINEFEED) {\n                  ++pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++pos < end) {\n                c = text.charCodeAt(pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  pos + 1 < end &&\n                  text.charCodeAt(pos + 1) == CharCode.SLASH\n                ) {\n                  pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          this.pos = pos;\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          this.pos = pos + 1;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          this.pos = pos + 1;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              this.pos = pos;\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              this.pos = pos;\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              this.pos = pos + 1;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          this.pos = pos;\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++pos;\n              if (maxTokenLength > 2 && pos < end) {\n                chr = text.charCodeAt(pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++pos;\n                  if (\n                    maxTokenLength > 3 && pos < end &&\n                    text.charCodeAt(pos) == CharCode.EQUALS\n                  ) {\n                    this.pos = pos + 1;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  this.pos = pos;\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  this.pos = pos + 1;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              this.pos = pos;\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          this.pos = pos + 1;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          this.pos = pos + 1;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.CARET_EQUALS;\n          }\n          this.pos = pos;\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          this.pos = pos + 1;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.BAR) {\n              this.pos = pos + 1;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.BAR_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          this.pos = pos + 1;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          this.pos = pos + 1;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = pos;\n              while (\n                ++pos < end &&\n                isIdentifierPart(c = text.charCodeAt(pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                this.pos = pos;\n                return keywordToken;\n              }\n              this.pos = pos = posBefore;\n            }\n            this.pos = pos;\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++pos;\n            break;\n          }\n          let start = pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && pos < end &&\n            ((text.charCodeAt(pos)) & 0xFC00) == 0xDC00\n          ) ++pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, pos)\n          );\n          this.pos = pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    this.pos = pos;\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    if (token == Token.GREATERTHAN) {  // where parsing type arguments\n      maxCompoundLength = 1;\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) {\n      reusableState = null;\n      state.pos = this.pos;\n      state.token = this.token;\n      state.tokenPos = this.tokenPos;\n    } else {\n      state = new State(this.pos, this.token, this.tokenPos);\n    }\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    let range = new Range(start, end);\n    range.source = this.source;\n    return range;\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    var start = pos;\n    while (\n      ++pos < end &&\n      isIdentifierPart(text.charCodeAt(pos))\n    );\n    this.pos = pos;\n    return text.substring(start, pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    var quote = text.charCodeAt(pos++);\n    var start = pos;\n    var result = \"\";\n    while (true) {\n      if (pos >= end) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(pos);\n      if (c == quote) {\n        result += text.substring(start, pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, pos);\n        this.pos = pos; // save\n        result += this.readEscapeSequence();\n        pos = this.pos; // restore\n        start = pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, pos)\n        );\n        break;\n      }\n      ++pos;\n    }\n    this.pos = pos;\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 2 < this.end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos = pos + 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos = pos + 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos = pos + 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(pos + 1))) {\n        let start = pos;\n        this.pos = pos + 1;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    let pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    var text = this.source.text;\n    var end = this.end;\n    var start = this.pos;\n    var sepCount = this.readDecimalFloatPartial(false);\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      sepCount += this.readDecimalFloatPartial();\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        sepCount += this.readDecimalFloatPartial();\n      }\n    }\n    let result = text.substring(start, this.pos);\n    if (sepCount) result = result.replaceAll(\"_\", \"\");\n    return parseFloat(result);\n  }\n\n  /** Reads past one section of a decimal float literal. Returns the number of separators encountered. */\n  private readDecimalFloatPartial(allowLeadingZeroSep: bool = true): u32 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var start = pos;\n    var end = this.end;\n    var sepEnd = start;\n    var sepCount = 0;\n\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n\n      if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (!allowLeadingZeroSep && pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n        ++sepCount;\n      } else if (!isDecimalDigit(c)) {\n        break;\n      }\n      ++pos;\n    }\n\n    if (pos != start && sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n\n    this.pos = pos;\n    return sepCount;\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    while (pos < end) {\n      let c = text.charCodeAt(pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(pos - 1, pos)\n        );\n        this.pos = pos;\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(pos)\n      );\n      this.pos = pos;\n      return \"\";\n    }\n    this.pos = pos;\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  constructor(\n    /** Current position. */\n    public pos: i32,\n    /** Current token. */\n    public token: Token,\n    /** Current token's position. */\n    public tokenPos: i32\n  ) {}\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// └─File                     File, analogous to Source in the AST\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  STUB_DELIMITER,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  Signature,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n  ParameterKind\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef,\n  MemorySegment\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  writeI64,\n  writeI32AsI64,\n  writeI64AsI32\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    public options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(SourceKind.LIBRARY_ENTRY, LIBRARY_SUBST + \".wasm\", \"[native code]\");\n    this.nativeSource = nativeSource;\n    this.parser = new Parser(this.diagnostics, this.sources);\n    this.resolver = new Resolver(this);\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n  }\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver!: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile!: File;\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  // Lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // Standard library\n\n  /** Gets the standard `ArrayBufferView` instance. */\n  get arrayBufferViewInstance(): Class {\n    var cached = this._arrayBufferViewInstance;\n    if (!cached) this._arrayBufferViewInstance = cached = this.requireClass(CommonNames.ArrayBufferView);\n    return cached;\n  }\n  private _arrayBufferViewInstance: Class | null = null;\n\n  /** Gets the standard `ArrayBuffer` instance. */\n  get arrayBufferInstance(): Class {\n    var cached = this._arrayBufferInstance;\n    if (!cached) this._arrayBufferInstance = cached = this.requireClass(CommonNames.ArrayBuffer);\n    return cached;\n  }\n  private _arrayBufferInstance: Class | null = null;\n\n  /** Gets the standard `Array` prototype. */\n  get arrayPrototype(): ClassPrototype {\n    var cached = this._arrayPrototype;\n    if (!cached) this._arrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _arrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `StaticArray` prototype. */\n  get staticArrayPrototype(): ClassPrototype {\n    var cached = this._staticArrayPrototype;\n    if (!cached) this._staticArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _staticArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Set` prototype. */\n  get setPrototype(): ClassPrototype {\n    var cached = this._setPrototype;\n    if (!cached) this._setPrototype = cached = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _setPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Map` prototype. */\n  get mapPrototype(): ClassPrototype {\n    var cached = this._mapPrototype;\n    if (!cached) this._mapPrototype = cached = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _mapPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Function` prototype. */\n  get functionPrototype(): ClassPrototype {\n    var cached = this._functionPrototype;\n    if (!cached) this._functionPrototype = cached = <ClassPrototype>this.require(CommonNames.Function, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _functionPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int8Array` prototype. */\n  get int8ArrayPrototype(): ClassPrototype {\n    var cached = this._int8ArrayPrototype;\n    if (!cached) this._int8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int16Array` prototype. */\n  get int16ArrayPrototype(): ClassPrototype {\n    var cached = this._int16ArrayPrototype;\n    if (!cached) this._int16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int32Array` prototype. */\n  get int32ArrayPrototype(): ClassPrototype {\n    var cached = this._int32ArrayPrototype;\n    if (!cached) this._int32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int64Array` prototype. */\n  get int64ArrayPrototype(): ClassPrototype {\n    var cached = this._int64ArrayPrototype;\n    if (!cached) this._int64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8Array` prototype. */\n  get uint8ArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ArrayPrototype;\n    if (!cached) this._uint8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8ClampedArray` prototype. */\n  get uint8ClampedArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ClampedArrayPrototype;\n    if (!cached) this._uint8ClampedArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ClampedArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint16Array` prototype. */\n  get uint16ArrayPrototype(): ClassPrototype {\n    var cached = this._uint16ArrayPrototype;\n    if (!cached) this._uint16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint32Array` prototype. */\n  get uint32ArrayPrototype(): ClassPrototype {\n    var cached = this._uint32ArrayPrototype;\n    if (!cached) this._uint32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint64Array` prototype. */\n  get uint64ArrayPrototype(): ClassPrototype {\n    var cached = this._uint64ArrayPrototype;\n    if (!cached) this._uint64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float32Array` prototype. */\n  get float32ArrayPrototype(): ClassPrototype {\n    var cached = this._float32ArrayPrototype;\n    if (!cached) this._float32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float64Array` prototype. */\n  get float64ArrayPrototype(): ClassPrototype {\n    var cached = this._float64ArrayPrototype;\n    if (!cached) this._float64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `String` instance. */\n  get stringInstance(): Class {\n    var cached = this._stringInstance;\n    if (!cached) this._stringInstance = cached = this.requireClass(CommonNames.String);\n    return cached;\n  }\n  private _stringInstance: Class | null = null;\n\n  /** Gets the standard `abort` instance, if not explicitly disabled. */\n  get abortInstance(): Function | null {\n    return this.lookupFunction(CommonNames.abort);\n  }\n\n  // Runtime interface\n\n  /** Gets the runtime `__alloc(size: usize, id: u32): usize` instance. */\n  get allocInstance(): Function {\n    var cached = this._allocInstance;\n    if (!cached) this._allocInstance = cached = this.requireFunction(CommonNames.alloc);\n    return cached;\n  }\n  private _allocInstance: Function | null = null;\n\n  /** Gets the runtime `__realloc(ptr: usize, newSize: usize): usize` instance. */\n  get reallocInstance(): Function {\n    var cached = this._reallocInstance;\n    if (!cached) this._reallocInstance = cached = this.requireFunction(CommonNames.realloc);\n    return cached;\n  }\n  private _reallocInstance: Function | null = null;\n\n  /** Gets the runtime `__free(ptr: usize): void` instance. */\n  get freeInstance(): Function {\n    var cached = this._freeInstance;\n    if (!cached) this._freeInstance = cached = this.requireFunction(CommonNames.free);\n    return cached;\n  }\n  private _freeInstance: Function | null = null;\n\n  /** Gets the runtime `__retain(ptr: usize): usize` instance. */\n  get retainInstance(): Function {\n    var cached = this._retainInstance;\n    if (!cached) this._retainInstance = cached = this.requireFunction(CommonNames.retain);\n    return cached;\n  }\n  private _retainInstance: Function | null = null;\n\n  /** Gets the runtime `__release(ptr: usize): void` instance. */\n  get releaseInstance(): Function {\n    var cached = this._releaseInstance;\n    if (!cached) this._releaseInstance = cached = this.requireFunction(CommonNames.release);\n    return cached;\n  }\n  private _releaseInstance: Function | null = null;\n\n  /** Gets the runtime `__collect(): void` instance. */\n  get collectInstance(): Function {\n    var cached = this._collectInstance;\n    if (!cached) this._collectInstance = cached = this.requireFunction(CommonNames.collect);\n    return cached;\n  }\n  private _collectInstance: Function | null = null;\n\n  /** Gets the runtime `__visit(ptr: usize, cookie: u32): void` instance. */\n  get visitInstance(): Function {\n    var cached = this._visitInstance;\n    if (!cached) this._visitInstance = cached = this.requireFunction(CommonNames.visit);\n    return cached;\n  }\n  private _visitInstance: Function | null = null;\n\n  /** Gets the runtime `__typeinfo(id: u32): RTTIFlags` instance. */\n  get typeinfoInstance(): Function {\n    var cached = this._typeinfoInstance;\n    if (!cached) this._typeinfoInstance = cached = this.requireFunction(CommonNames.typeinfo);\n    return cached;\n  }\n  private _typeinfoInstance: Function | null = null;\n\n  /** Gets the runtime `__instanceof(ptr: usize, superId: u32): bool` instance. */\n  get instanceofInstance(): Function {\n    var cached = this._instanceofInstance;\n    if (!cached) this._instanceofInstance = cached = this.requireFunction(CommonNames.instanceof_);\n    return cached;\n  }\n  private _instanceofInstance: Function | null = null;\n\n  /** Gets the runtime `__allocBuffer(size: usize, id: u32, data: usize = 0): usize` instance. */\n  get allocBufferInstance(): Function {\n    var cached = this._allocBufferInstance;\n    if (!cached) this._allocBufferInstance = cached = this.requireFunction(CommonNames.allocBuffer);\n    return cached;\n  }\n  private _allocBufferInstance: Function | null = null;\n\n  /** Gets the runtime `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` instance. */\n  get allocArrayInstance(): Function {\n    var cached = this._allocArrayInstance;\n    if (!cached) this._allocArrayInstance = cached = this.requireFunction(CommonNames.allocArray);\n    return cached;\n  }\n  private _allocArrayInstance: Function | null = null;\n\n  // Utility\n\n  /** Tests whether this is a WASI program. */\n  get isWasi(): bool {\n    return this.elementsByName.has(CommonNames.ASC_WASI);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, null, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null, flags, null,\n      Node.createOmittedType(range),\n      range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, signature, null, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, [], range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      null,\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(): void {\n    if (this.initialized) return;\n    this.initialized = true;\n\n    var options = this.options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n\n    // The following types might not be enabled by compiler options, so the\n    // compiler needs to check this condition whenever such a value is created\n    // respectively stored or loaded.\n    this.registerNativeType(CommonNames.v128, Type.v128);\n    this.registerNativeType(CommonNames.funcref, Type.funcref);\n    this.registerNativeType(CommonNames.externref, Type.externref);\n    this.registerNativeType(CommonNames.exnref, Type.exnref);\n    this.registerNativeType(CommonNames.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_LOW_MEMORY_LIMIT, Type.i32,\n      i64_new(options.lowMemoryLimit, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_GC, Type.bool,\n      i64_new(options.hasFeature(Feature.GC) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MEMORY64, Type.bool,\n      i64_new(options.hasFeature(Feature.MEMORY64) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file, queuedExtends);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports.\n    // note that imports may depend upon imports, so repeat until there's no more progress.\n    do {\n      let i = 0, madeProgress = false;\n      while (i < queuedImports.length) {\n        let queuedImport = queuedImports[i];\n        let localIdentifier = queuedImport.localIdentifier;\n        let foreignIdentifier = queuedImport.foreignIdentifier;\n        if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            foreignIdentifier.text,\n            queuedImport.foreignPath,\n            queuedImport.foreignPathAlt,\n            queuedExports\n          );\n          if (element) {\n            queuedImport.localFile.add(\n              localIdentifier.text,\n              element,\n              localIdentifier // isImport\n            );\n            queuedImports.splice(i, 1);\n            madeProgress = true;\n          } else {\n            ++i;\n          }\n        } else { // i.e. import * as bar from \"./bar\"\n          let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n          if (foreignFile) {\n            let localFile = queuedImport.localFile;\n            let localName = localIdentifier.text;\n            localFile.add(\n              localName,\n              foreignFile.asAliasNamespace(\n                localName,\n                localFile,\n                localIdentifier\n              ),\n              localIdentifier // isImport\n            );\n            queuedImports.splice(i, 1);\n            madeProgress = true;\n          } else {\n            ++i;\n            assert(false); // already reported by the parser not finding the file\n          }\n        }\n      }\n      if (!madeProgress) {\n        // report queued imports we were unable to resolve\n        for (let j = 0, l = queuedImports.length; j < l; ++j) {\n          let queuedImport = queuedImports[j];\n          let foreignIdentifier = queuedImport.foreignIdentifier;\n          if (foreignIdentifier) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n            );\n          }\n        }\n        break;\n      }\n    } while (true);\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.arrayBufferInstance.id == 0);\n    assert(this.stringInstance.id == 1);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) {\n      this.registerWrapperClass(Type.funcref, CommonNames.Funcref);\n      this.registerWrapperClass(Type.externref, CommonNames.Externref);\n      if (options.hasFeature(Feature.EXCEPTION_HANDLING)) {\n        this.registerWrapperClass(Type.exnref, CommonNames.Exnref);\n      }\n      if (options.hasFeature(Feature.GC)) {\n        this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n      }\n    }\n\n    // resolve prototypes of extended classes or interfaces\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent);\n      if (!baseElement) continue;\n      if (thisPrototype.kind == ElementKind.CLASS_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n          let basePrototype = <ClassPrototype>baseElement;\n          if (basePrototype.hasDecorator(DecoratorFlags.FINAL)) {\n            this.error(\n              DiagnosticCode.Class_0_is_final_and_cannot_be_extended,\n              extendsNode.range, basePrototype.identifierNode.text\n            );\n          }\n          if (\n            basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n            thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n          ) {\n            this.error(\n              DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n              Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n            );\n          }\n          thisPrototype.basePrototype = basePrototype;\n        } else {\n          this.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            extendsNode.range\n          );\n        }\n      } else if (thisPrototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          thisPrototype.basePrototype = <InterfacePrototype>baseElement;\n        } else {\n          this.error(\n            DiagnosticCode.An_interface_can_only_extend_an_interface,\n            extendsNode.range\n          );\n        }\n      }\n    }\n\n    // resolve prototypes of implemented interfaces\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let implementsNodes = assert(thisPrototype.implementsNodes); // must be present if in queuedImplements\n      for (let j = 0, l = implementsNodes.length; j < l; ++j) {\n        let implementsNode = implementsNodes[j];\n        let interfaceElement = resolver.resolveTypeName(implementsNode.name, thisPrototype.parent);\n        if (!interfaceElement) continue;\n        if (interfaceElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          let interfacePrototype = <InterfacePrototype>interfaceElement;\n          let interfacePrototypes = thisPrototype.interfacePrototypes;\n          if (!interfacePrototypes) thisPrototype.interfacePrototypes = interfacePrototypes = new Array();\n          interfacePrototypes.push(interfacePrototype);\n        } else {\n          this.error(\n            DiagnosticCode.A_class_can_only_implement_an_interface,\n            implementsNode.range\n          );\n        }\n      }\n    }\n\n    // check for virtual overloads in extended classes and implemented interfaces\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let basePrototype = thisPrototype.basePrototype;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n    }\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let basePrototype = thisPrototype.basePrototype;\n      let interfacePrototypes = thisPrototype.interfacePrototypes;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n      if (interfacePrototypes) {\n        for (let j = 0, l = interfacePrototypes.length; j < l; ++j) {\n          this.markVirtuals(thisPrototype, interfacePrototypes[j]);\n        }\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      let isWasi = this.isWasi;\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort,\n          isWasi\n            ? BuiltinNames.wasiAbort\n            : BuiltinNames.abort\n        );\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace,\n          isWasi\n            ? BuiltinNames.wasiTrace\n            : BuiltinNames.trace\n        );\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed,\n          isWasi\n            ? BuiltinNames.wasiSeed\n            : BuiltinNames.seed\n        );\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = changetype<string>(globalAliases.get(alias));\n        assert(name != null);\n        if (!name.length) {\n          this.elementsByName.delete(alias);\n          continue;\n        }\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Marks virtual members in a base class overloaded in this class. */\n  private markVirtuals(thisPrototype: ClassPrototype, basePrototype: ClassPrototype): void {\n    // TODO: make this work with interfaaces as well\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _values = Map_values(thisInstanceMembers), j = 0, l = _values.length; j < l; ++j) {\n            let thisMember = _values[j];\n            if (\n              !thisMember.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.PRIVATE) &&\n              baseInstanceMembers.has(thisMember.name)\n            ) {\n              let baseMember = assert(baseInstanceMembers.get(thisMember.name));\n              if (\n                thisMember.kind == ElementKind.FUNCTION_PROTOTYPE &&\n                baseMember.kind == ElementKind.FUNCTION_PROTOTYPE\n              ) {\n                let thisMethod = <FunctionPrototype>thisMember;\n                let baseMethod = <FunctionPrototype>baseMember;\n                if (!thisMethod.visibilityEquals(baseMethod)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisMethod.identifierNode.range, baseMethod.identifierNode.range\n                  );\n                }\n                baseMember.set(CommonFlags.VIRTUAL);\n                let overloads = baseMethod.overloads;\n                if (!overloads) baseMethod.overloads = overloads = new Set();\n                overloads.add(<FunctionPrototype>thisMember);\n                let baseMethodInstances = baseMethod.instances;\n                if (baseMethodInstances) {\n                  for (let _values = Map_values(baseMethodInstances), a = 0, b = _values.length; a < b; ++a) {\n                    let baseMethodInstance = _values[a];\n                    baseMethodInstance.set(CommonFlags.VIRTUAL);\n                  }\n                }\n              } else if (\n                thisMember.kind == ElementKind.PROPERTY_PROTOTYPE &&\n                baseMember.kind == ElementKind.PROPERTY_PROTOTYPE\n              ) {\n                let thisProperty = <PropertyPrototype>thisMember;\n                let baseProperty = <PropertyPrototype>baseMember;\n                if (!thisProperty.visibilityEquals(baseProperty)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisProperty.identifierNode.range, baseProperty.identifierNode.range\n                  );\n                }\n                baseProperty.set(CommonFlags.VIRTUAL);\n                let baseGetter = baseProperty.getterPrototype;\n                if (baseGetter) {\n                  baseGetter.set(CommonFlags.VIRTUAL);\n                  let thisGetter = thisProperty.getterPrototype;\n                  if (thisGetter) {\n                    let overloads = baseGetter.overloads;\n                    if (!overloads) baseGetter.overloads = overloads = new Set();\n                    overloads.add(thisGetter);\n                  }\n                  let baseGetterInstances = baseGetter.instances;\n                  if (baseGetterInstances) {\n                    for (let _values = Map_values(baseGetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseGetterInstance = _values[a];\n                      baseGetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n                let baseSetter = baseProperty.setterPrototype;\n                if (baseSetter !== null && thisProperty.setterPrototype !== null) {\n                  baseSetter.set(CommonFlags.VIRTUAL);\n                  let thisSetter = thisProperty.setterPrototype;\n                  if (thisSetter) {\n                    let overloads = baseSetter.overloads;\n                    if (!overloads) baseSetter.overloads = overloads = new Set();\n                    overloads.add(thisSetter);\n                  }\n                  let baseSetterInstances = baseSetter.instances;\n                  if (baseSetterInstances) {\n                    for (let _values = Map_values(baseSetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseSetterInstance = _values[a];\n                      baseSetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n              } else {\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  thisMember.identifierNode.range,\n                  baseMember.identifierNode.range\n                );\n              }\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"Missing standard library component: \" + name);\n    if (element.kind != kind) throw Error(\"Invalid standard library component: \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"Invalid standard library class: \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"Invalid standard library function: \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the wrapper class of a non-class type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.isInternalReference && !wrapperClasses.has(type));\n    var element = assert(this.lookupGlobal(className));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = assert(this.resolver.resolveClass(<ClassPrototype>element, null));\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.isIntegerInclReference);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.isFloatValue);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n      ? assert(filesByName.get(foreignPath))\n      : filesByName.has(foreignPathAlt)\n        ? assert(filesByName.get(foreignPathAlt))\n        : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n          if (queuedExportForeignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExportForeignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.FINAL |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember classes that implement interfaces\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        // cannot implement interfaces when unmanaged\n        if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        } else {\n          queuedImplements.push(element);\n        }\n      }\n    }\n\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            let method = this.initializeMethod(methodDeclaration, element);\n            if (method !== null && methodDeclaration.name.kind == NodeKind.CONSTRUCTOR) {\n              element.constructorPrototype = method;\n            }\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATURE: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return null;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return null;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n    return element;\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.args;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.args)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent, queuedExtends);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, declaration.name /* isImport */);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary || declaration.is(CommonFlags.EXPORT)) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember interfaces that extend another interface\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeFieldAsProperty(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of an interface, as a property. */\n  private initializeFieldAsProperty(\n    /** Field declaration. */\n    declaration: FieldDeclaration,\n    /** Parent interface. */\n    parent: InterfacePrototype\n  ): void {\n    var typeNode = declaration.type;\n    if (!typeNode) typeNode = Node.createOmittedType(declaration.name.range.atEnd);\n    this.initializeProperty(\n      Node.createMethodDeclaration(\n        declaration.name,\n        declaration.decorators,\n        declaration.flags | CommonFlags.GET,\n        null,\n        Node.createFunctionType(\n          [],\n          typeNode,\n          null,\n          false,\n          declaration.range\n        ),\n        null,\n        declaration.range\n      ),\n      parent\n    );\n    if (!declaration.is(CommonFlags.READONLY)) {\n      this.initializeProperty(\n        Node.createMethodDeclaration(\n          declaration.name,\n          declaration.decorators,\n          declaration.flags | CommonFlags.SET,\n          null,\n          Node.createFunctionType(\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                declaration.name,\n                typeNode,\n                null,\n                declaration.name.range\n              )\n            ],\n            Node.createOmittedType(declaration.name.range.atEnd),\n            null,\n            false,\n            declaration.range\n          ),\n          null,\n          declaration.range\n        ),\n        parent\n      );\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original, queuedExtends);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var cyclics = new Set<Class>();\n    // TODO: for (let instance of this.managedClasses.values()) {\n    for (let _values = Map_values(this.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a final class. */\n  FINAL = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.FINAL: return DecoratorFlags.FINAL;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent!: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Checks if this element is public, explicitly or implicitly. */\n  get isPublic(): bool {\n    return !this.isAny(CommonFlags.PRIVATE | CommonFlags.PROTECTED);\n  }\n\n  /** Checks if this element is implicitly public, i.e. not explicitly declared to be. */\n  get isImplicitlyPublic(): bool {\n    return this.isPublic && !this.is(CommonFlags.PUBLIC);\n  }\n\n  /** Checks if the visibility of this element equals the specified. */\n  visibilityEquals(other: Element): bool {\n    if (this.isPublic == other.isPublic) return true;\n    const vis = CommonFlags.PRIVATE | CommonFlags.PROTECTED;\n    return (this.flags & vis) == (other.flags & vis);\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the signature node, if applicable, along the identifier node. */\n  get identifierAndSignatureRange(): Range {\n    var declaration = this.declaration;\n    var identifierNode = declaration.name;\n    if (declaration.kind == NodeKind.FUNCTIONDECLARATION || declaration.kind == NodeKind.METHODDECLARATION) {\n      let signatureNode = (<FunctionDeclaration>declaration).signature;\n      return Range.join(identifierNode.range, signatureNode.range);\n    }\n    return identifierNode.range;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n\n  /** Checks if this element is a compatible override of the specified. */\n  isCompatibleOverride(base: DeclaredElement): bool {\n    var self: DeclaredElement = this; // TS\n    var kind = self.kind;\n    if (kind == base.kind) {\n      switch (kind) {\n        case ElementKind.FUNCTION: {\n          return (<Function>self).signature.isAssignableTo((<Function>base).signature, /* sameSize */ true);\n        }\n        case ElementKind.PROPERTY: {\n          let selfProperty = <Property>self;\n          let baseProperty = <Property>base;\n          let selfGetter = selfProperty.getterInstance;\n          let baseGetter = baseProperty.getterInstance;\n          if (selfGetter) {\n            if (!baseGetter || !selfGetter.signature.isAssignableTo(baseGetter.signature, true)) {\n              return false;\n            }\n          } else if (baseGetter) {\n            return false;\n          }\n          let selfSetter = selfProperty.setterInstance;\n          let baseSetter = baseProperty.setterInstance;\n          if (selfSetter) {\n            if (!baseSetter || !selfSetter.signature.isAssignableTo(baseSetter.signature, true)) {\n              return false;\n            }\n          } else if (baseSetter) {\n            return false;\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction!: Function;\n  /** Array of `import * as X` alias namespaces of this file. */\n  aliasNamespaces: Array<Namespace> = new Array<Namespace>();\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n\n    // Also, add to the namespaces that capture our exports\n    for(let i = 0; i < this.aliasNamespaces.length; i++) {\n      let ns = this.aliasNamespaces[i];\n      ns.add(name, element);\n    }\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asAliasNamespace(\n    name: string, \n    parent: Element, \n    localIdentifier: IdentifierExpression\n  ): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    // NOTE: Some exports are still queued, and can't yet be added here,\n    // so we remember all the alias namespaces and add to them as well\n    // when adding an element to the file.\n    this.aliasNamespaces.push(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64 = i64_zero;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64 = 0;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.isIntegerInclReference);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.isFloatValue);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).initializer;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Original name of the (temporary) local. */\n  private originalName: string;\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.originalName = name;\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n\n  /** Sets the temporary name of this local. */\n  setTemporaryName(name: string): void {\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n\n  /** Resets the temporary name of this local. */\n  resetTemporaryName(): void {\n    var name = this.originalName;\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n  /** Methods overloading this one, if any. These are unbound. */\n  overloads: Set<FunctionPrototype> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS ||\n           parent.kind == ElementKind.PROPERTY_PROTOTYPE && (\n             parent.parent.kind == ElementKind.CLASS ||\n             parent.parent.kind == ElementKind.INTERFACE\n           );\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    bound.overloads = this.overloads;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Concrete type arguments. */\n  typeArguments: Type[] | null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow!: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Varargs stub for calling with omitted arguments. */\n  varargsStub: Function | null = null;\n  /** Virtual stub for calling overloads. */\n  virtualStub: Function | null = null;\n  /** Runtime memory segment, if created. */\n  memorySegment: MemorySegment | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.typeArguments = typeArguments;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = signature.type;\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          thisType,\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = this.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.createParent(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Gets the name of the parameter at the specified index. */\n  getParameterName(index: i32): string {\n    var parameters = (<FunctionDeclaration>this.declaration).signature.parameters;\n    return parameters.length > index\n      ? parameters[index].name.text\n      : getDefaultParameterName(index);\n  }\n\n  /** Creates a stub for use with this function, i.e. for varargs or virtual calls. */\n  newStub(postfix: string): Function {\n    var stub = new Function(\n      this.name + STUB_DELIMITER + postfix,\n      this.prototype,\n      this.typeArguments,\n      this.signature.clone(),\n      this.contextualTypeArguments\n    );\n    stub.set(this.flags & ~CommonFlags.COMPILED | CommonFlags.STUB);\n    return stub;\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempFuncrefs: Local[] | null = null;\n  tempExternrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    var breakStack = this.breakStack;\n    assert(!breakStack || !breakStack.length); // internal error\n    this.breakStack = breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let range = debugLocations[i];\n        let source = range.source;\n        module.setDebugLocation(\n          ref,\n          range.debugInfoRef,\n          source.debugInfoIndex,\n          source.lineAt(range.start),\n          source.columnAt() - 1 // source maps are 0-based\n        );\n      }\n    }\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n  }\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n  /** Property instance, if resolved. */\n  instance: Property | null = null;\n\n  /** Clones of this prototype that are bound to specific classes. */\n  private boundPrototypes: Map<Class,PropertyPrototype> | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element. Either a class prototype or instance. */\n    parent: Element,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    switch (this.parent.kind) {\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: return true;\n    }\n    return false;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): PropertyPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var firstDeclaration = this.declaration;\n    assert(firstDeclaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new PropertyPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>firstDeclaration\n    );\n    bound.flags = this.flags;\n    var getterPrototype = this.getterPrototype;\n    if (getterPrototype) {\n      bound.getterPrototype = getterPrototype.toBound(classInstance);\n    }\n    var setterPrototype = this.setterPrototype;\n    if (setterPrototype) {\n      bound.setterPrototype = setterPrototype.toBound(classInstance);\n    }\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      Node.createVariableDeclaration(\n        prototype.identifierNode,\n        null,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE,\n        null, null,\n        prototype.identifierNode.range\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    if (this.is(CommonFlags.INSTANCE)) {\n      registerConcreteElement(this.program, this);\n    }\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,DeclaredElement> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null;\n  /** Interface prototypes, if applicable. */\n  interfacePrototypes: InterfacePrototype[] | null = null;\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Implemented interfaces, if applicable. */\n  interfaces: Set<Interface> | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n  /** Classes directly extending this class. */\n  extendees: Set<Class> | null = null;\n  /** Classes implementing this interface. */\n  implementers: Set<Class> | null = null;\n  /** Whether the field initialization check has already been performed. */\n  didCheckFieldInitialization: bool = false;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY_PROTOTYPE &&\n        (<PropertyPrototype>lengthField).getterPrototype !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    type.classReference = this;\n    this.setType(type);\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n    var extendees = base.extendees;\n    if (!extendees) base.extendees = extendees = new Set();\n    extendees.add(this);\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Adds an interface. */\n  addInterface(iface: Interface): void {\n    var interfaces = this.interfaces;\n    if (!interfaces) this.interfaces = interfaces = new Set();\n    interfaces.add(iface);\n    var implementers = iface.implementers;\n    if (!implementers) iface.implementers = implementers = new Set();\n    implementers.add(this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      if (target.kind == ElementKind.INTERFACE) {\n        let interfaces = current.interfaces;\n        if (interfaces) {\n          for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n            let iface = _values[i];\n            if (iface.isAssignableTo(target)) return true;\n          }\n        }\n      }\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Creates a buffer suitable to hold a runtime instance of this class. */\n  createBuffer(overhead: i32 = 0): Uint8Array {\n    var size = this.nextMemoryOffset + overhead;\n    var buffer = new Uint8Array(this.program.runtimeHeaderSize + size);\n    assert(!this.program.options.isWasm64); // TODO: WASM64, mmInfo is usize\n    // see: std/assembly/rt/common.ts\n    assert(size < (1 << 28));     // 1 bit BUFFERED + 3 bits color\n    writeI32(size, buffer, 0);    // mmInfo = 0\n    writeI32(1, buffer, 4);       // gcInfo (RC) = 1\n    writeI32(this.id, buffer, 8); // rtId\n    writeI32(size, buffer, 12);   // rtSize\n    return buffer;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32 = this.program.runtimeHeaderSize): i32 {\n    var element = this.lookupInSelf(name);\n    if (element !== null && element.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>element;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      let typeKind = fieldInstance.type.kind;\n      switch (typeKind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          assert(!i64_is(value));\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          assert(!i64_is(value));\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          assert(!i64_is(value));\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (this.program.options.isWasm64) {\n            if (i64_is(value)) {\n              writeI64(value, buffer, offset);\n            } else {\n              writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.USIZE);\n            }\n            return 8;\n          } else {\n            if (i64_is(value)) {\n              writeI64AsI32(value, buffer, offset, typeKind == TypeKind.USIZE);\n            } else {\n              writeI32(i32(value), buffer, offset);\n            }\n            return 4;\n          }\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          if (i64_is(value)) {\n            writeI64(value, buffer, offset);\n          } else {\n            writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.U64);\n          }\n          return 8;\n        }\n        case TypeKind.F32: {\n          assert(!i64_is(value));\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          assert(!i64_is(value));\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var arrayPrototype = program.arrayPrototype;\n    if (this.extends(arrayPrototype)) {\n      return this.getTypeArgumentsTo(arrayPrototype)![0];\n    }\n    var staticArrayPrototype = program.staticArrayPrototype;\n    if (this.extends(staticArrayPrototype)) {\n      return this.getTypeArgumentsTo(staticArrayPrototype)![0];\n    }\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    switch (prototype.name.charCodeAt(0)) {\n      case CharCode.F: {\n        if (prototype == program.float32ArrayPrototype) return Type.f32;\n        if (prototype == program.float64ArrayPrototype) return Type.f64;\n        break;\n      }\n      case CharCode.I: {\n        if (prototype == program.int8ArrayPrototype) return Type.i8;\n        if (prototype == program.int16ArrayPrototype) return Type.i16;\n        if (prototype == program.int32ArrayPrototype) return Type.i32;\n        if (prototype == program.int64ArrayPrototype) return Type.i64;\n        break;\n      }\n      case CharCode.U: {\n        if (prototype == program.uint8ArrayPrototype) return Type.u8;\n        if (prototype == program.uint8ClampedArrayPrototype) return Type.u8;\n        if (prototype == program.uint16ArrayPrototype) return Type.u16;\n        if (prototype == program.uint32ArrayPrototype) return Type.u32;\n        if (prototype == program.uint64ArrayPrototype) return Type.u64;\n        break;\n      }\n    }\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.isReference) {\n            if ((current = fieldType.getClass()) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n\n  /** Gets all extendees of this class (that do not have the specified instance member). */\n  getAllExtendees(exceptIfMember: string | null = null, out: Set<Class> = new Set()): Set<Class> {\n    var extendees = this.extendees;\n    if (extendees) {\n      for (let _values = Set_values(extendees), i = 0, k = _values.length; i < k; ++i) {\n        let extendee = _values[i];\n        if (exceptIfMember) {\n          let instanceMembers = extendee.prototype.instanceMembers;\n          if (instanceMembers !== null && instanceMembers.has(exceptIfMember)) continue;\n        }\n        out.add(extendee);\n        extendee.getAllExtendees(exceptIfMember, out);\n      }\n    }\n    return out;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: InterfacePrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    case ElementKind.PROPERTY_PROTOTYPE: // properties are just containers\n    case ElementKind.PROPERTY: {         //\n      parent = parent.parent;\n      // fall-through\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index];\n}\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport type NativeType = usize;\nexport namespace NativeType {\n  export const None: NativeType = 0 /* _BinaryenTypeNone */;\n  export const Unreachable: NativeType = 1 /* _BinaryenTypeUnreachable */;\n  export const I32: NativeType = 2 /* _BinaryenTypeInt32 */;\n  export const I64: NativeType = 3 /* _BinaryenTypeInt64 */;\n  export const F32: NativeType = 4 /* _BinaryenTypeFloat32 */;\n  export const F64: NativeType = 5 /* _BinaryenTypeFloat64 */;\n  export const V128: NativeType = 6 /* _BinaryenTypeVec128 */;\n  export const Funcref: NativeType = 7 /* _BinaryenTypeFuncref */;\n  export const Externref: NativeType = 8 /* _BinaryenTypeExternref */;\n  export const Exnref: NativeType = 9 /* _BinaryenTypeExnref */;\n  export const Anyref: NativeType = 10 /* _BinaryenTypeAnyref */;\n  export const Auto: NativeType = -1 /* _BinaryenTypeAuto */;\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  GC = 1024 /* _BinaryenFeatureGC */,\n  Memory64 = 2048, // TODO: missing in Binaryen API\n  All = 4095 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  MemorySize = 20 /* _BinaryenMemorySizeId */,\n  MemoryGrow = 21 /* _BinaryenMemoryGrowId */,\n  Nop = 22 /* _BinaryenNopId */,\n  Unreachable = 23 /* _BinaryenUnreachableId */,\n  AtomicCmpxchg = 25 /* _BinaryenAtomicCmpxchgId */,\n  AtomicRMW = 24 /* _BinaryenAtomicRMWId */,\n  AtomicWait = 26 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 27 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 28 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 29 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 30 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 31 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 32 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 33 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 34 /* _BinaryenSIMDLoadId */,\n  MemoryInit = 35 /* _BinaryenMemoryInitId */,\n  DataDrop = 36 /* _BinaryenDataDropId */,\n  MemoryCopy = 37 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 38 /* _BinaryenMemoryFillId */,\n  Pop = 39 /* _BinaryenPopId */,\n  RefNull = 40 /* _BinaryenRefNullId */,\n  RefIsNull = 41 /* _BinaryenRefIsNullId */,\n  RefFunc = 42 /* _BinaryenRefFuncId */,\n  Try = 44 /* _BinaryenTryId */,\n  Throw = 45 /* _BinaryenThrowId */,\n  Rethrow = 46 /* _BinaryenRethrowId */,\n  BrOnExn = 47 /* _BinaryenBrOnExnId */,\n  TupleMake = 48 /* _BinaryenTupleMakeId */,\n  TupleExtract = 49 /* _BinaryenTupleExtractId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  AbsI8x16 = 67 /* __BinaryenAbsVecI8x16 */,\n  NegI8x16 = 68 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 69 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 70 /* _BinaryenAllTrueVecI8x16 */,\n  BitmaskI8x16 = 71 /* __BinaryenBitmaskVecI8x16 */,\n  AbsI16x8 = 72 /* __BinaryenAbsVecI16x8 */,\n  NegI16x8 = 73 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 74 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 75 /* _BinaryenAllTrueVecI16x8 */,\n  BitmaskI16x8 = 76 /* _BinaryenBitmaskVecI16x8 */,\n  AbsI32x4 = 77 /* _BinaryenAbsVecI32x4 */,\n  NegI32x4 = 78 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 79 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 80 /* _BinaryenAllTrueVecI32x4 */,\n  BitmaskI32x4 = 81 /* _BinaryenBitmaskVecI32x4 */,\n  NegI64x2 = 82 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 83 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 84 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 85 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 86 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 87 /* _BinaryenSqrtVecF32x4 */,\n  CeilF32x4 = 88 /* _BinaryenCeilVecF32x4 */,\n  FloorF32x4 = 89 /* _BinaryenFloorVecF32x4 */,\n  TruncF32x4 = 90 /* BinaryenTruncVecF32x4 */,\n  NearestF32x4 = 91 /* BinaryenNearestVecF32x4 */,\n  AbsF64x2 = 92 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 93 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 94 /* _BinaryenSqrtVecF64x2 */,\n  CeilF64x2 = 95 /* _BinaryenCeilVecF64x2 */,\n  FloorF64x2 = 96 /* _BinaryenFloorVecF64x2 */,\n  TruncF64x2 = 97 /* BinaryenTruncVecF64x2 */,\n  NearestF64x2 = 98 /* BinaryenNearestVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 99 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 100 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 101 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 102 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 103 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 104 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 105 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 106 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 107 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 108 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 109 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 110 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 111 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 112 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 113 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 114 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrI32 = 11 /* _BinaryenShrSInt32 */,\n  ShrU32 = 12 /* _BinaryenShrUInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrI64 = 36 /* _BinaryenShrSInt64 */,\n  ShrU64 = 37 /* _BinaryenShrUInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  AddI32x4 = 146 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 147 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 148 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 149 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 150 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 151 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 152 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 153 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 154 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 155 /* _BinaryenSubVecI64x2 */,\n\n  AddF32x4 = 157 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 158 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 159 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 160 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 161 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 162 /* _BinaryenMaxVecF32x4 */,\n  PminF32x4 = 163 /* _BinaryenPMinVecF32x4 */,\n  PmaxF32x4 = 164 /* _BinaryenPMaxVecF32x4 */,\n  AddF64x2 = 165 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 166 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 167 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 168 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 169 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 170 /* _BinaryenMaxVecF64x2 */,\n  PminF64x2 = 171 /* _BinaryenPMinVecF64x2 */,\n  PmaxF64x2 = 172 /* _BinaryenPMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 173 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 174 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 175 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 176 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 177 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport enum ExpressionRunnerFlags {\n  Default = 0 /* _ExpressionRunnerFlagsDefault */,\n  PreserveSideeffects = 1 /* _ExpressionRunnerFlagsPreserveSideeffects */,\n  TraverseCalls = 2 /* _ExpressionRunnerFlagsTraverseCalls */\n}\n\nexport class MemorySegment {\n  constructor(\n    /** Segment data. */\n    public buffer: Uint8Array,\n    /** Segment offset. */\n    public offset: i64\n  ) {}\n}\n\nexport class Module {\n  constructor(\n    /** Binaryen module reference. */\n    public ref: ModuleRef\n  ) {\n    this.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n  }\n\n  private lit: usize;\n\n  static create(): Module {\n    return new Module(binaryen._BinaryenModuleCreate());\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    var module = new Module(binaryen._BinaryenModuleRead(cArr, buffer.length));\n    binaryen._free(changetype<usize>(cArr));\n    return module;\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) {\n      binaryen.__i32_store8(out + i, bytes[i]);\n    }\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(type: NativeType): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref, type);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  memory_size(): ExpressionRef {\n    return binaryen._BinaryenMemorySize(this.ref);\n  }\n\n  memory_grow(delta: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenMemoryGrow(this.ref, delta);\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  maybeDropCondition(condition: ExpressionRef, result: ExpressionRef): ExpressionRef {\n    // FIXME: This is necessary because Binaryen's ExpressionRunner bails early\n    // when encountering a local with an unknown value. This helper only drops\n    // the pre-evaluated condition if it has relevant side effects.\n    // see WebAssembly/binaryen#1237\n    if ((getSideEffects(condition) & ~(SideEffects.ReadsLocal | SideEffects.ReadsGlobal)) != 0) {\n      return this.block(null, [\n        this.drop(condition),\n        result\n      ], getExpressionType(result));\n    }\n    return result;\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        )\n      : binaryen._BinaryenCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(\n          this.ref, index, cArr, operands ? operands.length : 0, params, results\n        )\n      : binaryen._BinaryenCallIndirect(\n          this.ref, index, cArr, operands ? operands.length : 0, params, results\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // multi value (pseudo instructions)\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  tuple_make(operands: ExpressionRef[]): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenTupleMake(this.ref, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  tuple_extract(tuple: ExpressionRef, index: Index): ExpressionRef {\n    return binaryen._BinaryenTupleExtract(this.ref, tuple, index);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(varTypes);\n    var ret = binaryen._BinaryenAddFunction(\n      this.ref,\n      cStr,\n      params,\n      results,\n      cArr,\n      varTypes ? varTypes.length : 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(\n    result: NativeType,\n    paramTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocPtrArray(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(\n      this.ref, cStr1, cStr2, cStr3, attribute, params, results\n    );\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let segment = segments[i];\n      let buffer = segment.buffer;\n      let offset = segment.offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(\n      this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared\n    );\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) {\n      binaryen._free(segs[i]);\n    }\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(\n      this.ref, initial, maximum, cArr, numNames, offset\n    );\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  getAllowInliningFunctionsWithLoops(): bool {\n    return binaryen._BinaryenGetAllowInliningFunctionsWithLoops();\n  }\n\n  setAllowInliningFunctionsWithLoops(enabled: bool): void {\n    binaryen._BinaryenSetAllowInliningFunctionsWithLoops(enabled);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  runPass(pass: string, func: FunctionRef = 0): void {\n    var cStr = allocString(pass);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cStr, 1);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cStr, 1);\n    }\n    binaryen._free(cStr);\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var cStrs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      cStrs[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(cStrs);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(cStrs[i]);\n  }\n\n  optimize(optimizeLevel: i32, shrinkLevel: i32, debugInfo: bool = false, usesARC: bool = true): void {\n    // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n    if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\n\n    this.setOptimizeLevel(optimizeLevel);\n    this.setShrinkLevel(shrinkLevel);\n    this.setDebugInfo(debugInfo);\n    this.clearPassArguments();\n\n    // Tweak inlining limits based on optimization levels\n    if (optimizeLevel >= 2 && shrinkLevel == 0) {\n      this.setAlwaysInlineMaxSize(12);\n      this.setFlexibleInlineMaxSize(70);\n      this.setOneCallerInlineMaxSize(200);\n      this.setAllowInliningFunctionsWithLoops(optimizeLevel >= 3);\n    } else {\n      this.setAlwaysInlineMaxSize(\n        optimizeLevel == 0 && shrinkLevel >= 0\n          ? 2\n          : 4\n      );\n      this.setFlexibleInlineMaxSize(65);\n      this.setOneCallerInlineMaxSize(80);\n      this.setAllowInliningFunctionsWithLoops(false);\n    }\n\n    // Pass order here differs substantially from Binaryen's defaults\n    // see: Binaryen/src/pass.cpp\n    if (optimizeLevel > 0 || shrinkLevel > 0) {\n      let passes = new Array<string>();\n\n      // --- PassRunner::addDefaultGlobalOptimizationPrePasses ---\n\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-module-elements\"); // +\n\n      // --- PassRunner::addDefaultFunctionOptimizationPasses ---\n\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n        passes.push(\"ssa-nomerge\");\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"merge-blocks\");\n        passes.push(\"precompute\");\n      }\n      if (optimizeLevel >= 3) {\n        passes.push(\"flatten\");\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"vacuum\");\n\n        passes.push(\"code-folding\");\n        passes.push(\"flatten\");\n        passes.push(\"local-cse\");\n        passes.push(\"reorder-locals\");\n      }\n      // FIXME: see issue #1288\n      // if (usesARC) {\n      //   if (optimizeLevel < 3) {\n      //     passes.push(\"flatten\");\n      //   }\n      //   passes.push(\"post-assemblyscript\");\n      // }\n      passes.push(\"optimize-instructions\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"dce\");\n        passes.push(\"inlining\");\n      }\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"inlining-optimizing\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 2) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"pick-load-signs\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      if (optimizeLevel >= 3 && shrinkLevel <= 1) {\n        passes.push(\"licm\");\n      }\n      passes.push(\"simplify-locals-nostructure\");\n      passes.push(\"vacuum\");\n\n      passes.push(\"reorder-locals\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"simplify-locals\");\n      passes.push(\"vacuum\");\n\n      passes.push(\"reorder-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"reorder-locals\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"merge-locals\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"code-folding\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      passes.push(\"merge-blocks\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"merge-blocks\");\n      if (optimizeLevel >= 3) {\n        passes.push(\"optimize-instructions\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n      }\n\n      // --- PassRunner::addDefaultGlobalOptimizationPostPasses ---\n\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"dae-optimizing\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"inlining-optimizing\");\n      }\n      if (this.getLowMemoryUnused()) {\n        if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n          passes.push(\"optimize-added-constants-propagate\");\n        } else {\n          passes.push(\"optimize-added-constants\");\n        }\n      }\n      passes.push(\"duplicate-import-elimination\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"simplify-globals\");\n        passes.push(\"vacuum\");\n      }\n      // precompute works best after global optimizations\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"directize\"); // replace indirect with direct calls\n      passes.push(\"dae-optimizing\"); // reduce arity\n      passes.push(\"inlining-optimizing\"); // and inline if possible\n      if (usesARC) {\n        // works best after inlining to cover most retains/releases\n        passes.push(\"post-assemblyscript-finalize\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        // move code on early return (after CFG cleanup)\n        passes.push(\"code-pushing\");\n        if (optimizeLevel >= 3) {\n          // very expensive, so O3 only\n          passes.push(\"simplify-globals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"precompute-propagate\");\n\n          // replace indirect with direct calls again and inline\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"directize\");\n          passes.push(\"dae-optimizing\");\n\n          passes.push(\"merge-locals\");\n          passes.push(\"coalesce-locals\");\n          passes.push(\"simplify-locals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"precompute-propagate\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"coalesce-locals\");\n        }\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"vacuum\");\n\n        passes.push(\"optimize-instructions\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      // clean up\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-nonfunction-module-elements\");\n      passes.push(\"memory-packing\");\n      passes.push(\"remove-unused-module-elements\");\n\n      this.runPasses(passes);\n    }\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null = null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var binary = new BinaryModule(readBuffer(binaryPtr, binaryLen), readString(sourceMapPtr));\n    if (cStr) binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return binary;\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStrings), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (<u32>binaryen._BinaryenExpressionGetType(expr)) {\n          case <u32>NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case <u32>NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case <u32>NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case <u32>NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case <u32>NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an externref as it is opaque\n          case <u32>NativeType.Externref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(\n          this.ref, globalName, binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenUnary(\n          this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1\n        );\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenBinary(\n          this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2\n        );\n      }\n    }\n    return 0;\n  }\n\n  copyExpression(expr: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenExpressionCopy(expr, this.ref);\n  }\n\n  runExpression(\n    expr: ExpressionRef,\n    flags: ExpressionRunnerFlags,\n    maxDepth: i32 = 50,\n    maxLoopIterations: i32 = 1\n  ): ExpressionRef {\n    var runner = binaryen._ExpressionRunnerCreate(this.ref, flags, maxDepth, maxLoopIterations);\n    var precomp =  binaryen._ExpressionRunnerRunAndDispose(runner, expr);\n    if (precomp) {\n      assert(getExpressionId(precomp) == ExpressionId.Const);\n      assert(getExpressionType(precomp) == getExpressionType(expr));\n    }\n    return precomp;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocPtrArray(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<NativeType>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChildAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChildAt(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperandAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperandAt(expr, index);\n}\n\nexport function getMemoryGrowDelta(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenMemoryGrowGetDelta(expr);\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType[] {\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return types;\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventParams(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetParams(event);\n}\n\nexport function getEventResults(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetResults(event);\n}\n\nexport class Relooper {\n  constructor(\n    /** Module this relooper belongs to. */\n    public module: Module,\n    /** Binaryen relooper reference. */\n    public ref: RelooperRef\n  ) {}\n\n  static create(module: Module): Relooper {\n    return new Relooper(module, binaryen._RelooperCreate(module.ref));\n  }\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n/** Builds a switch using a sequence of `br_if`s. */\nexport class SwitchBuilder {\n  // This is useful because Binaryen understands sequences of `br_if`s and\n  // knows how to make a `br_table` from such a sequence if switched over\n  // values are considered dense enough, respectively a size-efficient sequence\n  // of `if`s if not, depending on optimization levels.\n\n  private module: Module;\n  private condition: ExpressionRef;\n  private values: i32[] = new Array();\n  private indexes: i32[] = new Array();\n  private cases: ExpressionRef[][] = new Array();\n  private defaultIndex: i32 = -1;\n\n  /** Creates a new builder using the specified i32 condition. */\n  constructor(module: Module, condition: ExpressionRef) {\n    this.module = module;\n    this.condition = condition;\n  }\n\n  /** Links a case to the specified branch. */\n  addCase(value: i32, code: ExpressionRef[]): void {\n    var cases = this.cases;\n    var index = cases.indexOf(code);\n    if (index < 0) {\n      index = cases.length;\n      cases.push(code);\n    }\n    this.values.push(value);\n    this.indexes.push(index);\n  }\n\n  /** Links the default branch. */\n  addDefault(code: ExpressionRef[]): void {\n    assert(this.defaultIndex == -1);\n    var cases = this.cases;\n    this.defaultIndex = cases.length;\n    cases.push(code);\n  }\n\n  /** Renders the switch to a block. */\n  render(localIndex: i32, labelPostfix: string = \"\"): ExpressionRef {\n    var module = this.module;\n    var cases = this.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return module.drop(this.condition);\n    }\n    var values = this.values;\n    var numValues = values.length;\n    var indexes = this.indexes;\n    var entry = new Array<ExpressionRef>(1 + numValues + 1);\n    var labels = new Array<string>(numCases);\n    for (let i = 0; i < numCases; ++i) {\n      labels[i] = \"case\" + i.toString() + labelPostfix;\n    }\n    entry[0] = module.local_set(localIndex, this.condition);\n    for (let i = 0; i < numValues; ++i) {\n      let index = indexes[i];\n      entry[1 + i] = module.br(labels[index],\n        module.binary(BinaryOp.EqI32,\n          module.local_get(localIndex, NativeType.I32),\n          module.i32(values[i])\n        )\n      );\n    }\n    var defaultIndex = this.defaultIndex;\n    var defaultLabel = \"default\" + labelPostfix;\n    entry[1 + numValues] = module.br(\n      ~defaultIndex\n        ? labels[defaultIndex]\n        : defaultLabel\n    );\n    var current = module.block(labels[0], entry);\n    for (let i = 1; i < numCases; ++i) {\n      let block = cases[i - 1];\n      block.unshift(current);\n      current = module.block(labels[i], block);\n    }\n    var lastCase = cases[numCases - 1];\n    lastCase.unshift(current);\n    return module.block(\n      ~defaultIndex\n        ? null\n        : defaultLabel,\n      lastCase\n    );\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  DanglingPop = 2048 /* _BinaryenSideEffectDanglingPop */,\n  Any = 4095 /* _BinaryenSideEffectAny */\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var len = u8s.length;\n  var ptr = binaryen._malloc(len);\n  for (let i = 0; i < len; ++i) {\n    binaryen.__i32_store8(ptr + i, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var len = i32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var len = u32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var len = ptrs.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0, k = len; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      len += 1;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else {\n      len += 4;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1) >>> 0;\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      assert(u < 0x200000, \"Invalid Unicode code point during allocString\");\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, len: i32): Uint8Array {\n  var ret = new Uint8Array(len);\n  for (let i = 0; i < len; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        assert(false, \"Invalid UTF8 sequence during readString\");\n      }\n    }\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >>> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  constructor(\n    /** WebAssembly binary. */\n    public output: Uint8Array,\n    /** Source map, if generated. */\n    public sourceMap: string | null\n  ) {}\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) {\n    return false;\n  }\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: {\n      return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    }\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return (\n          numChildren > 0 &&\n          needsExplicitUnreachable(binaryen._BinaryenBlockGetChildAt(expr, numChildren - 1))\n        );\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(\n  expr:  ExpressionRef,\n  data:  T,\n  visit: (expr: ExpressionRef, data: T) => void\n): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i: Index = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChildAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.MemorySize:\n      break;\n    case ExpressionId.MemoryGrow:\n      visit(binaryen._BinaryenMemoryGrowGetDelta(expr), data);\n      break;\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i: Index = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.TupleMake: {\n      for (let i: Index = 0, n = binaryen._BinaryenTupleMakeGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenTupleMakeGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.TupleExtract: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Function reference. */\n  FUNCREF,\n  /** External reference. */\n  EXTERNREF,\n  /** Exception reference. */\n  EXNREF,\n  /** Any reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a varying (in size) type. */\n  VARYING = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is an external type. */\n  EXTERNAL = 1 << 11,\n  /** Is a class. */\n  CLASS = 1 << 12,\n  /** Is a function. */\n  FUNCTION = 1 << 13\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  private _nonNullableType: Type | null = null;\n  /** Respective nullable type, if non-nullable. */\n  private _nullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    if (!(flags & TypeFlags.NULLABLE)) {\n      this._nonNullableType = this;\n    } else {\n      this._nullableType = this;\n    }\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this type represents a basic value. */\n  get isValue(): bool {\n    return this.is(TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer value. */\n  get isIntegerValue(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a small (< 32 bits) integer value. */\n  get isShortIntegerValue(): bool {\n    return this.is(TypeFlags.SHORT | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a long (> 32 bits) integer value. */\n  get isLongIntegerValue(): bool {\n    return this.is(TypeFlags.LONG | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a signed integer value. */\n  get isSignedIntegerValue(): bool {\n    return this.is(TypeFlags.SIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an unsigned integer value. */\n  get isUnsignedIntegerValue(): bool {\n    return this.is(TypeFlags.UNSIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a varying (in size) integer value. */\n  get isVaryingIntegerValue(): bool {\n    return this.is(TypeFlags.VARYING | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer, including references.  */\n  get isIntegerInclReference(): bool {\n    return this.is(TypeFlags.INTEGER);\n  }\n\n  /** Tests if this type represents a floating point value. */\n  get isFloatValue(): bool {\n    return this.is(TypeFlags.FLOAT | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents a numeric (integer or floating point) value. */\n  get isNumericValue(): bool {\n    return this.isIntegerValue || this.isFloatValue;\n  }\n\n  /** Tests if this type represents a boolean value. */\n  get isBooleanValue(): bool {\n    return this == Type.bool;\n  }\n\n  /** Tests if this type represents a vector value. */\n  get isVectorValue(): bool {\n    return this.is(TypeFlags.VECTOR | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents an internal or external reference. */\n  get isReference(): bool {\n    return this.is(TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a nullable internal or external reference. */\n  get isNullableReference(): bool {\n    return this.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an internal object. */\n  get isInternalReference(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an external object. */\n  get isExternalReference(): bool {\n    return this.is(TypeFlags.EXTERNAL | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a class. */\n  get isClass(): bool {\n    return this.isInternalReference\n      ? this.classReference !== null\n      : false;\n  }\n\n  /** Gets the underlying class of this type, if any. */\n  getClass(): Class | null {\n    return this.isInternalReference\n      ? this.classReference\n      : null;\n  }\n\n  /** Gets the underlying class or wrapper class of this type, if any. */\n  getClassOrWrapper(program: Program): Class | null {\n    let classReference = this.getClass();\n    if (classReference) {\n      // typical class\n      return classReference;\n    } else {\n      let signatureReference = this.getSignature();\n      if (signatureReference) {\n        // function wrapper\n        let type = signatureReference.type;\n        let wrapper = assert(program.resolver.resolveClass(program.functionPrototype, [ type ]));\n        wrapper.wrappedType = type;\n        return wrapper;\n      } else {\n        let wrapperClasses = program.wrapperClasses;\n        if (wrapperClasses.has(this)) {\n          // value wrapper\n          return assert(wrapperClasses.get(this));\n        }\n      }\n    }\n    return null;\n  }\n\n  /** Tests if this type represents a function. */\n  get isFunction(): bool {\n    return this.isInternalReference\n      ? this.signatureReference !== null\n      : false;\n  }\n\n  /** Gets the underlying function signature of this type, if any. */\n  getSignature(): Signature | null {\n    return this.isInternalReference\n      ? this.signatureReference\n      : null;\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.isInternalReference) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      return this.signatureReference !== null; // function references are managed\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Gets the corresponding non-nullable type. */\n  get nonNullableType(): Type {\n    if (this.isExternalReference) {\n      return this; // TODO\n    }\n    return assert(this._nonNullableType); // set either in ctor or asNullable\n  }\n\n  /** Gets the corresponding nullable type, if applicable. */\n  get nullableType(): Type | null {\n    return this._nullableType; // set either in ctor or asNullable\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.isInternalReference);\n    var nullableType = this._nullableType;\n    if (!nullableType) {\n      assert(!this.isNullableReference);\n      this._nullableType = nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      nullableType.classReference = this.classReference;         // either a class reference\n      nullableType.signatureReference = this.signatureReference; // or a function reference\n      nullableType._nonNullableType = this;\n    }\n    return nullableType;\n  }\n\n  /** Tests if this type equals the specified. */\n  equals(other: Type): bool {\n    if (this.kind != other.kind) return false;\n    if (this.isReference) {\n      return (\n        this.classReference == other.classReference &&\n        this.signatureReference == other.signatureReference &&\n        this.isNullableReference == other.isNullableReference\n      );\n    }\n    return true;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.isReference) {\n      if (target.isReference) {\n        if (!this.isNullableReference || target.isNullableReference) {\n          if (currentClass = this.getClass()) {\n            if (targetClass = target.getClass()) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.getSignature()) {\n            if (targetFunction = target.getSignature()) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.isExternalReference && (this.kind == target.kind || target.kind == TypeKind.ANYREF)) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.isReference) {\n      if (this.isIntegerValue) {\n        if (target.isIntegerValue) {\n          if (\n            !signednessIsRelevant ||\n            this.isBooleanValue || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.isSignedIntegerValue == target.isSignedIntegerValue\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.isFloatValue) {\n        if (target.isFloatValue) {\n          return this.size <= target.size;\n        }\n      } else if (this.isVectorValue) {\n        if (target.isVectorValue) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.isReference) return this.isAssignableTo(target);\n    else if (target.isReference) return false;\n    // not dealing with references from here on\n    if (this.isIntegerValue) {\n      return target.isIntegerValue && target.size == this.size && (\n        !signednessIsRelevant ||\n        this.isSignedIntegerValue == target.isSignedIntegerValue\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    // special in that it allows integer references as well\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(validWat: bool = false): string {\n    const nullablePostfix = validWat\n      ? \"|null\"\n      : \" | null\";\n    if (this.isReference) {\n      let classReference = this.getClass();\n      if (classReference) {\n        return this.isNullableReference\n          ? classReference.internalName + nullablePostfix\n          : classReference.internalName;\n      } else {\n        let signatureReference = this.getSignature();\n        if (signatureReference) {\n          return this.isNullableReference\n            ? \"(\" + signatureReference.toString(validWat) + \")\" + nullablePostfix\n            : signatureReference.toString(validWat);\n        }\n      }\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.FUNCREF: return \"funcref\";\n      case TypeKind.EXTERNREF: return \"externref\";\n      case TypeKind.EXNREF: return \"exnref\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.FUNCREF: return NativeType.Funcref;\n      case TypeKind.EXTERNREF: return NativeType.Externref;\n      case TypeKind.EXNREF: return NativeType.Exnref;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Function reference. */\n  static readonly funcref: Type = new Type(TypeKind.FUNCREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** External reference. */\n  static readonly externref: Type = new Type(TypeKind.EXTERNREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Exception reference. */\n  static readonly exnref: Type = new Type(TypeKind.EXNREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Any reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString(true);\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** Unique id representing this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    this.type = type;\n    type.signatureReference = this;\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    this.id = program.nextSignatureId++;\n    program.uniqueSignatures.push(this);\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  /** Tests if this signature equals the specified. */\n  equals(other: Signature): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var otherThisType = other.thisType;\n    if (thisThisType !== null) {\n      if (otherThisType === null || !thisThisType.equals(otherThisType)) return false;\n    } else if (otherThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != other.hasRest) return false;\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var otherParameterTypes = other.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != otherParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      if (!thisParameterTypes[i].equals(otherParameterTypes[i])) return false;\n    }\n\n    // check return type\n    return this.returnType.equals(other.returnType);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature, requireSameSize: bool = false): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false; // TODO\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(validWat: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(validWat ? \"%28\" : \"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(validWat ? \"this:\" : \"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString(validWat));\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(validWat ? \"%2C\" : \", \");\n        if (i == restIndex) sb.push(\"...\");\n        sb.push(parameters[i].toString(validWat));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?\");\n      }\n    }\n    sb.push(validWat ? \"%29=>\" : \") => \");\n    sb.push(this.returnType.toString(validWat));\n    return sb.join(\"\");\n  }\n\n  /** Creates a clone of this signature that is safe to modify. */\n  clone(): Signature {\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    var cloneParameterTypes = new Array<Type>(numParameterTypes);\n    for (let i = 0; i < numParameterTypes; ++i) {\n      cloneParameterTypes[i] = parameterTypes[i];\n    }\n    return new Signature(this.program, cloneParameterTypes, this.returnType, this.thisType);\n  }\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Interface,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  IndexSignature,\n  isTypedElement,\n  InterfacePrototype,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  uniqueMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes and interfaces\n      if (\n        element.kind == ElementKind.CLASS_PROTOTYPE ||\n        element.kind == ElementKind.INTERFACE_PROTOTYPE\n      ) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          uniqueMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = uniqueMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (type.isInternalReference) return type.asNullable();\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_cannot_be_nullable,\n            nameNode.range, nameNode.identifier.text\n          );\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      let numTypeArguments = 0;\n      if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.getClassOrWrapper(this.program);\n    if (classReference) {\n      let overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n      if (overload) return overload.signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.getSignature();\n    if (signatureReference) return signatureReference.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_has_no_call_signatures,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = uniqueMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.args;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, uniqueMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.getClassOrWrapper(this.program);\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    let classReference = type.getClassOrWrapper(this.program);\n    if (classReference) return classReference;\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.getClass();\n        if (classReference) {\n          return classReference.type.asNullable();\n        } else {\n          let signatureReference = ctxType.getSignature();\n          if (signatureReference) {\n            return signatureReference.type.asNullable();\n          } else if (ctxType.isExternalReference) {\n            return ctxType; // TODO: nullable?\n          }\n        }\n        return this.program.options.usizeType;\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, uniqueMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, variableLikeElement.type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyInstance = this.resolveProperty(<PropertyPrototype>target, reportMode);\n        if (!propertyInstance) return null;\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, returnType.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // Function with shadow type, i.e. function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        } else if (!target.is(CommonFlags.GENERIC)) {\n          // Inherit from 'Function' if not overridden, i.e. fn.call\n          let members = target.members;\n          if (!members || !members.has(propertyName)) {\n            let functionInstance = this.resolveFunction(<FunctionPrototype>target, null, uniqueMap<string,Type>(), ReportMode.SWALLOW);\n            if (functionInstance) {\n              let wrapper = functionInstance.type.getClassOrWrapper(this.program);\n              if (wrapper) target = wrapper;\n            }\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            let member = assert(members.get(propertyName));\n            if (member.kind == ElementKind.PROPERTY_PROTOTYPE) {\n              let propertyInstance = this.resolveProperty(<PropertyPrototype>member, reportMode);\n              if (!propertyInstance) return null;\n              member = propertyInstance;\n              if (propertyInstance.is(CommonFlags.STATIC)) {\n                this.currentThisExpression = null;\n              } else {\n                this.currentThisExpression = targetNode;\n              }\n            } else {\n              this.currentThisExpression = targetNode;\n            }\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE, PROPERTY...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (\n            target.kind == ElementKind.CLASS_PROTOTYPE ||\n            target.kind == ElementKind.INTERFACE_PROTOTYPE\n          ) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (\n            target.kind == ElementKind.CLASS ||\n            target.kind == ElementKind.INTERFACE\n          ) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    let classReference = targetType.getClassOrWrapper(this.program);\n    if (classReference) {\n      do {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (ctxType.isValue) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          node.range,\n          \"Const assertion\"\n        );\n        return null;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is common type of LHS and RHS, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        return assert(intType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        return assert(fltType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.STRING: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.getClass();\n        if (classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            this.error(\n              DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n              node.range, \"T\"\n            );\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.isInternalReference\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.args.length > 0\n        ) {\n          return this.resolveExpression(node.args[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let varType = (<VariableLikeElement>target).type;\n        let varElement = this.getElementOfType(varType);\n        if (!varElement || varElement.kind != ElementKind.CLASS) {\n          break;\n        }\n        target = varElement;\n        // fall-through\n      }\n      case ElementKind.CLASS: {\n        let typeArguments = (<Class>target).getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          let signatureReference = assert(ftype.signatureReference);\n          return signatureReference.returnType;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    return assert(Type.bool.getClassOrWrapper(this.program));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS || actualParent.kind == ElementKind.INTERFACE);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      if (parameterType == Type.void) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      parameterTypes[i] = parameterType;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Set<Class> = new Set();\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    if (prototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n      instance = new Interface(nameInclTypeParamters, <InterfacePrototype>prototype, typeArguments);\n    } else {\n      instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    }\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.add(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    var anyPending = false;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        uniqueMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.has(base)) anyPending = true;\n    }\n\n    // Resolve interfaces if applicable\n    var interfacePrototypes = prototype.interfacePrototypes;\n    if (interfacePrototypes) {\n      for (let i = 0, k = interfacePrototypes.length; i < k; ++i) {\n        let interfacePrototype = interfacePrototypes[i];\n        let current: ClassPrototype | null = interfacePrototype;\n        do {\n          if (current == prototype) {\n            this.error(\n              DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n              prototype.identifierNode.range,\n              prototype.internalName\n            );\n            return null;\n          }\n          current = current.basePrototype;\n        } while (current);\n        let implementsNode = assert(prototype.implementsNodes![i]);\n        let iface = this.resolveClassInclTypeArguments(\n          interfacePrototype,\n          implementsNode.typeArguments,\n          prototype.parent,\n          uniqueMap(ctxTypes),\n          implementsNode,\n          reportMode\n        );\n        if (!iface) return null;\n        assert(iface.kind == ElementKind.INTERFACE);\n        instance.addInterface(<Interface>iface);\n\n        // Like above, if any implemented interface is still pending, yield\n        if (pendingClasses.has(iface)) anyPending = true;\n      }\n    }\n    if (anyPending) return instance;\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var members = instance.members;\n    if (!members) instance.members = members = new Map();\n\n    var pendingClasses = this.resolveClassPending;\n    var unimplemented = new Map<string,DeclaredElement>();\n\n    // Alias interface members\n    var interfaces = instance.interfaces;\n    if (interfaces) {\n      for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n        let iface = _values[i];\n        assert(!pendingClasses.has(iface));\n        let ifaceMembers = iface.members;\n        if (ifaceMembers) {\n          for (let _keys = Map_keys(ifaceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = unchecked(_keys[i]);\n            let member = assert(ifaceMembers.get(memberName));\n            if (members.has(memberName)) {\n              let existing = assert(members.get(memberName));\n              if (!member.isCompatibleOverride(existing)) {\n                this.errorRelated(\n                  DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                  member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n                );\n                continue;\n              }\n            }\n            members.set(memberName, member);\n            unimplemented.set(memberName, member);\n          }\n        }\n      }\n    }\n\n    // Alias base members\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.has(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(baseMembers.get(memberName));\n          if (members.has(memberName)) {\n            let existing = assert(members.get(memberName));\n            if (!member.isCompatibleOverride(existing)) {\n              this.errorRelated(\n                DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n              );\n              continue;\n            }\n          }\n          members.set(memberName, member);\n          if (member.is(CommonFlags.ABSTRACT)) {\n            unimplemented.set(memberName, member);\n          } else {\n            unimplemented.delete(memberName);\n          }\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    var properties = new Array<Property>();\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        let memberName = member.name;\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n              if (fieldType == Type.void) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldTypeNode.range\n                  );\n                }\n                break;\n              }\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(memberName, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let boundPrototype = (<PropertyPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          default: assert(false);\n        }\n        if (!member.is(CommonFlags.ABSTRACT)) {\n          unimplemented.delete(memberName);\n        }\n      }\n    }\n\n    // Check that property getters and setters match\n    for (let i = 0, k = properties.length; i < k; ++i) {\n      let property = properties[i];\n      let propertyGetter = property.getterInstance;\n      if (!propertyGetter) {\n        this.error(\n          DiagnosticCode.Property_0_only_has_a_setter_and_is_missing_a_getter,\n          property.identifierNode.range, property.name\n        );\n      } else {\n        let propertySetter = property.setterInstance;\n        if (propertySetter !== null && !propertyGetter.visibilityEquals(propertySetter)) {\n          this.errorRelated(\n            DiagnosticCode.Getter_and_setter_accessors_do_not_agree_in_visibility,\n            propertyGetter.identifierNode.range, propertySetter.identifierNode.range\n          );\n        }\n      }\n    }\n\n    if (instance.kind != ElementKind.INTERFACE) {\n\n      // Check that all required members are implemented\n      if (!instance.is(CommonFlags.ABSTRACT) && unimplemented.size > 0) {\n        for (let _keys = Map_keys(unimplemented), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = _keys[i];\n          let member = assert(unimplemented.get(memberName));\n          this.errorRelated(\n            DiagnosticCode.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2,\n            instance.identifierNode.range, member.identifierNode.range,\n            instance.internalName, memberName, member.parent.internalName\n          );\n        }\n      }\n\n      // Finalize memory offset\n      instance.nextMemoryOffset = memoryOffset;\n\n      // Link _own_ constructor if present\n      {\n        let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n        if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n          assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let ctorInstance = this.resolveFunction(\n            <FunctionPrototype>ctorPrototype,\n            null,\n            assert(instance.contextualTypeArguments),\n            reportMode\n          );\n          if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    assert(pendingClasses.has(instance)); // must be pending\n    pendingClasses.delete(instance);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    for (let _values = Set_values(pendingClasses), i = 0, k = _values.length; i < k; ++i) {\n      let pending = _values[i];\n      let dependsOnInstance = pending.base === instance;\n      let interfaces = pending.interfaces;\n      if (interfaces) {\n        let anyPending = false;\n        for (let _values2 = Set_values(interfaces), j = 0, l = _values2.length; j < l; ++j) {\n          let iface = _values2[j];\n          if (iface === instance) dependsOnInstance = true;\n          else if (pendingClasses.has(iface)) anyPending = true;\n        }\n        if (anyPending) continue;\n      }\n      if (dependsOnInstance) this.finishResolveClass(pending, reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a property prototype. */\n  resolveProperty(\n    /** The prototype of the property. */\n    prototype: PropertyPrototype,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Property | null {\n    var instance = prototype.instance;\n    if (instance) return instance;\n    prototype.instance = instance = new Property(prototype, prototype);\n    var getterPrototype = prototype.getterPrototype;\n    if (getterPrototype) {\n      let getterInstance = this.resolveFunction(\n        getterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (getterInstance) {\n        instance.getterInstance = getterInstance;\n        instance.setType(getterInstance.signature.returnType);\n      }\n    }\n    var setterPrototype = prototype.setterPrototype;\n    if (setterPrototype) {\n      let setterInstance = this.resolveFunction(\n        setterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (setterInstance) {\n        instance.setterInstance = setterInstance;\n        if (!instance.is(CommonFlags.RESOLVED)) {\n          assert(setterInstance.signature.parameterTypes.length == 1);\n          instance.setType(setterInstance.signature.parameterTypes[0]);\n        }\n      }\n    }\n    return instance;\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global,\n  Field,\n  Class\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChildAt,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperandAt,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  uniqueMap\n} from \"./util\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always accesses `this`. Constructors only. */\n  ACCESSES_THIS = 1 << 6,\n  /** This flow always calls `super`. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally accesses `this` in a child flow. Constructors only. */\n  CONDITIONALLY_ACCESSES_THIS = 1 << 13,\n  /** This flow may return a non-this value. Constructors only. */\n  MAY_RETURN_NONTHIS = 1 << 14,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ACCESSES_THIS\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ACCESSES_THIS\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  NONE = 0,\n  INITIALIZED = 1 << 0\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Creates the parent flow of the specified function. */\n  static createParent(parentFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    if (parentFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    if (inlineFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  private constructor(\n    /** Function this flow belongs to. */\n    public parentFunction: Function\n  ) {\n    /* nop */\n  }\n\n  /** Parent flow. */\n  parent: Flow | null = null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags = FlowFlags.NONE;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null = null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null = null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[] = [];\n  /** Field flags on `this`. Constructors only. */\n  thisFieldFlags: Map<Field,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null = null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null = null;\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Gets the current return type. */\n  get returnType(): Type {\n    return this.actualFunction.signature.returnType;\n  }\n\n  /** Gets the current contextual type arguments. */\n  get contextualTypeArguments(): Map<string,Type> | null {\n    return this.actualFunction.contextualTypeArguments;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow(this.parentFunction);\n    branch.parent = this;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.localFlags = this.localFlags.slice();\n    if (this.actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n      let thisFieldFlags = assert(this.thisFieldFlags);\n      branch.thisFieldFlags = uniqueMap<Field,FieldFlags>(thisFieldFlags);\n    } else {\n      assert(!this.thisFieldFlags);\n    }\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (<u32>type.toNativeType()) {\n      case <u32>NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case <u32>NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case <u32>NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case <u32>NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case <u32>NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case <u32>NativeType.Funcref: { temps = parentFunction.tempFuncrefs; break; }\n      case <u32>NativeType.Externref: { temps = parentFunction.tempExternrefs; break; }\n      case <u32>NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      case <u32>NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++).toString(), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    local.resetTemporaryName();\n    switch (<u32>local.type.toNativeType()) {\n      case <u32>NativeType.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case <u32>NativeType.Funcref: {\n        let tempFuncrefs = parentFunction.tempFuncrefs;\n        if (tempFuncrefs) temps = tempFuncrefs;\n        else parentFunction.tempFuncrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Externref: {\n        let tempExternrefs = parentFunction.tempExternrefs;\n        if (tempExternrefs) temps = tempExternrefs;\n        else parentFunction.tempExternrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Exnref: {\n        let tempExnrefs = parentFunction.tempExnrefs;\n        if (tempExnrefs) temps = tempExnrefs;\n        else parentFunction.tempExnrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    scopedLocal.setTemporaryName(name);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped dummy local of the specified name. */\n  addScopedDummyLocal(name: string, type: Type): Local {\n    var scopedDummy = new Local(name, -1, type, this.parentFunction);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedDummy.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedDummy);\n    return scopedDummy;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else {\n      let existingLocal = scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees a single scoped local by its name. */\n  freeScopedDummyLocal(name: string): void {\n    var scopedLocals = assert(this.scopedLocals);\n    assert(scopedLocals.has(name));\n    let local = assert(scopedLocals.get(name));\n    assert(local.index == -1);\n    scopedLocals.delete(name);\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Initializes `this` field flags. */\n  initThisFieldFlags(): void {\n    var actualFunction = this.actualFunction;\n    assert(actualFunction.is(CommonFlags.CONSTRUCTOR));\n    var actualParent = actualFunction.parent;\n    assert(actualParent.kind == ElementKind.CLASS);\n    var actualClass = <Class>actualParent;\n    this.thisFieldFlags = new Map();\n    var members = actualClass.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = _values[i];\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          if (\n            // guaranteed by super\n            field.parent != actualClass ||\n            // has field initializer\n            field.initializerNode !== null ||\n            // is initialized as a ctor parameter\n            field.prototype.parameterIndex != -1 ||\n            // is safe to initialize with zero\n            field.type.isAny(TypeFlags.VALUE | TypeFlags.NULLABLE)\n          ) {\n            this.setThisFieldFlag(field, FieldFlags.INITIALIZED);\n          }\n        }\n      }\n    }\n  }\n\n  /** Tests if the specified `this` field has the specified flag or flags. */\n  isThisFieldFlag(field: Field, flag: FieldFlags): bool {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags) {\n      return (changetype<FieldFlags>(fieldFlags.get(field)) & flag) == flag;\n    }\n    return false;\n  }\n\n  /** Sets the specified flag or flags on the given `this` field. */\n  setThisFieldFlag(field: Field, flag: FieldFlags): void {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags) {\n      assert(this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n      if (fieldFlags.has(field)) {\n        let flags = changetype<FieldFlags>(fieldFlags.get(field));\n        fieldFlags.set(field, flags | flag);\n      } else {\n        fieldFlags.set(field, flag);\n      }\n    } else {\n      assert(!this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n    }\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n    this.thisFieldFlags = other.thisFieldFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ACCESSES_THIS) { // can become conditional\n      if (otherFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (otherFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    // may be the case in any\n    newFlags |= (thisFlags | otherFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n\n    // field flags do not matter here since there's only INITIALIZED, which can\n    // only be set if it has been observed prior to entering the branch.\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ACCESSES_THIS) {\n      if (rightFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (rightFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    newFlags |= (leftFlags | rightFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        let newFlags = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n        if (leftFlags & LocalFlags.RETAINED) {\n          if (rightFlags & LocalFlags.RETAINED) {\n            newFlags |= LocalFlags.RETAINED;\n          } else {\n            newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n          }\n        } else if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        } else {\n          newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n        }\n        thisLocalFlags[i] = newFlags;\n      }\n    }\n\n    // field flags (currently only INITIALIZED, so can simplify)\n    var leftFieldFlags = left.thisFieldFlags;\n    if (leftFieldFlags) {\n      let newFieldFlags = new Map<Field,FieldFlags>();\n      let rightFieldFlags = assert(right.thisFieldFlags);\n      for (let _keys = Map_keys(leftFieldFlags), i = 0, k = _keys.length; i < k; ++i) {\n        let key = _keys[i];\n        let leftFlags = changetype<FieldFlags>(leftFieldFlags.get(key));\n        if (\n          (leftFlags & FieldFlags.INITIALIZED) != 0 && rightFieldFlags.has(key) && \n          (changetype<FieldFlags>(rightFieldFlags.get(key)) & FieldFlags.INITIALIZED)\n        ) {\n          newFieldFlags.set(key, FieldFlags.INITIALIZED);\n        }\n      }\n      this.thisFieldFlags = newFieldFlags;\n    } else {\n      assert(!right.thisFieldFlags);\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.isShortIntegerValue) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.isNullableReference) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.isNullableReference) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        if (name == program.retainInstance.internalName) {\n          // __retain just passes through the argument\n          this.inheritNonnullIfTrue(getCallOperandAt(expr, 0), iff);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.isShortIntegerValue) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow((<Global>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.isSignedIntegerValue\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) &&\n                !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (<u32>getExpressionType(expr)) {\n          case <u32>NativeType.I32: { value = getConstValueI32(expr); break; }\n          case <u32>NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case <u32>NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case <u32>NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChildAt(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ACCESSES_THIS)) sb.push(\"ACCESSES_THIS\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ACCESSES_THIS)) sb.push(\"CONDITIONALLY_ACCESSES_THIS\");\n    if (this.is(FlowFlags.MAY_RETURN_NONTHIS)) sb.push(\"MAY_RETURN_NONTHIS\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return toType.isShortIntegerValue && (\n    !fromType.isIntegerValue ||                                    // i.e. float to small int\n    fromType.size > toType.size ||                                 // larger int to small int\n    fromType.isSignedIntegerValue != toType.isSignedIntegerValue   // signedness mismatch\n  );\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set<i32>()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression,\n  NodeKind,\n  LiteralExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  createType,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element,\n  ClassPrototype,\n  Class\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const add = \"~lib/builtins/add\";\n  export const sub = \"~lib/builtins/sub\";\n  export const mul = \"~lib/builtins/mul\";\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_add = \"~lib/builtins/i32.add\";\n  export const i64_add = \"~lib/builtins/i64.add\";\n  export const f32_add = \"~lib/builtins/f32.add\";\n  export const f64_add = \"~lib/builtins/f64.add\";\n  export const i32_sub = \"~lib/builtins/i32.sub\";\n  export const i64_sub = \"~lib/builtins/i64.sub\";\n  export const f32_sub = \"~lib/builtins/f32.sub\";\n  export const f64_sub = \"~lib/builtins/f64.sub\";\n  export const i32_mul = \"~lib/builtins/i32.mul\";\n  export const i64_mul = \"~lib/builtins/i64.mul\";\n  export const f32_mul = \"~lib/builtins/f32.mul\";\n  export const f64_mul = \"~lib/builtins/f64.mul\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_bitmask = \"~lib/builtins/v128.bitmask\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_pmin = \"~lib/builtins/v128.pmin\";\n  export const v128_pmax = \"~lib/builtins/v128.pmax\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_ceil = \"~lib/builtins/v128.ceil\";\n  export const v128_floor = \"~lib/builtins/v128.floor\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n  export const v128_nearest = \"~lib/builtins/v128.nearest\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_abs = \"~lib/builtins/i8x16.abs\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_bitmask = \"~lib/builtins/i8x16.bitmask\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_abs = \"~lib/builtins/i16x8.abs\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_bitmask = \"~lib/builtins/i16x8.bitmask\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_abs = \"~lib/builtins/i32x4.abs\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_bitmask = \"~lib/builtins/i32x4.bitmask\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_pmin = \"~lib/builtins/f32x4.pmin\";\n  export const f32x4_pmax = \"~lib/builtins/f32x4.pmax\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_ceil = \"~lib/builtins/f32x4.ceil\";\n  export const f32x4_floor = \"~lib/builtins/f32x4.floor\";\n  export const f32x4_trunc = \"~lib/builtins/f32x4.trunc\";\n  export const f32x4_nearest = \"~lib/builtins/f32x4.nearest\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_pmin = \"~lib/builtins/f64x2.pmin\";\n  export const f64x2_pmax = \"~lib/builtins/f64x2.pmax\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_ceil = \"~lib/builtins/f64x2.ceil\";\n  export const f64x2_floor = \"~lib/builtins/f64x2.floor\";\n  export const f64x2_trunc = \"~lib/builtins/f64x2.trunc\";\n  export const f64x2_nearest = \"~lib/builtins/f64x2.nearest\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/function.ts\n  export const Function = \"~lib/function/Function\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_data = \"~lib/memory/memory.data\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/bindings/wasi.ts\n  export const wasiAbort = \"~lib/wasi/index/abort\";\n  export const wasiTrace = \"~lib/wasi/index/trace\";\n  export const wasiSeed = \"~lib/wasi/index/seed\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  constructor(\n    /** Compiler reference. */\n    public compiler: Compiler,\n    /** Prototype being called. */\n    public prototype: FunctionPrototype,\n    /** Provided type arguments. */\n    public typeArguments: Type[] | null,\n    /** Provided operands. */\n    public operands: Expression[],\n    /** Provided this operand, if any. */\n    public thisOperand: Expression | null,\n    /** Contextual type. */\n    public contextualType: Type,\n    /** Respective call expression. */\n    public reportNode: CallExpression,\n    /** Whether originating from inline assembly. */\n    public contextIsExact: bool\n  ) {}\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n/** Function builtins map. */\nexport const function_builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFloatValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isBooleanValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isSignedIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isAssignableTo(compiler.program.stringInstance)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.extends(compiler.program.arrayPrototype)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isArrayLike\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFunction ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isNullableReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element !== null ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classReference = type.getClassOrWrapper(compiler.program);\n  if (!classReference) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.isIntegerValue && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.isIntegerValue && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classReference.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classReference.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classReference.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.isInternalReference) {\n    let classReference = resultType.getClass();\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      assert(resultType.getSignature());\n      value = \"Function\";\n    }\n  } else {\n    value = resultType.toString();\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  let signatureReference = type.getSignature();\n  if (signatureReference) {\n    return module.i32(signatureReference.id);\n  }\n  let classReference = type.getClassOrWrapper(compiler.program);\n  if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n    return module.i32(classReference.id);\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotlI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotrI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I32)\n          ),\n          module.local_get(temp2.index, NativeType.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                isWasm64 ? module.i64(63) : module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, options.nativeSizeType)\n          ),\n          module.local_get(temp2.index, options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0),\n                module.i64(63)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I64)\n          ),\n          module.local_get(temp2.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64\n            : UnaryOp.ReinterpretF32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(0));\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(1));\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.isSignedIntegerValue,\n    arg0,\n    outType.toNativeType(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 3) {\n    immOffset = evaluateImmediateOffset(operands[2], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (numOperands == 4) {\n      immAlign = evaluateImmediateAlign(operands[3], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// add<T?>(left: T, right: T) -> T\nfunction builtin_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2))\n    return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP\n      )\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.MUST_WRAP\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP\n      );\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.AddI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      {\n        op = BinaryOp.AddI32;\n        break;\n      }       \n      case TypeKind.I64:\n      case TypeKind.U64: {\n        op = BinaryOp.AddI64;\n        break;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32;\n        break;\n      }\n      case TypeKind.F32: {\n        op = BinaryOp.AddF32;\n        break;\n      }\n      case TypeKind.F64: {\n        op = BinaryOp.AddF64;\n        break;\n      }\n    }\n    if (op != -1) {\n      return module.binary(op, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"add\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.add, builtin_add);\n\n// sub<T?>(left: T, right: T) -> T\nfunction builtin_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2))\n    return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP\n      )\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.MUST_WRAP\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP\n      );\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.SubI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      {\n        op = BinaryOp.SubI32;\n        break;\n      }       \n      case TypeKind.I64:\n      case TypeKind.U64: {\n        op = BinaryOp.SubI64;\n        break;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64 ? BinaryOp.SubI64 : BinaryOp.SubI32;\n        break;\n      }\n      case TypeKind.F32: {\n        op = BinaryOp.SubF32;\n        break;\n      }\n      case TypeKind.F64: {\n        op = BinaryOp.SubF64;\n        break;\n      }\n    }\n    if (op != -1) {\n      return module.binary(op, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"sub\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sub, builtin_sub);\n\n// mul<T?>(left: T, right: T) -> T\nfunction builtin_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2))\n    return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP\n      )\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.MUST_WRAP\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP\n      );\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.MulI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      {\n        op = BinaryOp.MulI32;\n        break;\n      }       \n      case TypeKind.I64:\n      case TypeKind.U64: {\n        op = BinaryOp.MulI64;\n        break;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64 ? BinaryOp.MulI64 : BinaryOp.MulI32;\n        break;\n      }\n      case TypeKind.F32: {\n        op = BinaryOp.MulF32;\n        break;\n      }\n      case TypeKind.F64: {\n        op = BinaryOp.MulF64;\n        break;\n      }\n    }\n    if (op != -1) {\n      return module.binary(op, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"mul\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.mul, builtin_mul);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toNativeType(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue|| // float to int\n      inType.size < type.size  // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    arg2 = compiler.convertExpression(arg2,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[2]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType, // ^\n    operands[2]\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.memory_size();\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  return module.memory_grow(compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.CONV_IMPLICIT));\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// memory.data(size[, align]) -> usize\n// memory.data<T>(values[, align]) -> usize\nfunction builtin_memory_data(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var usizeType = compiler.options.usizeType;\n  var offset: i64;\n  if (typeArguments !== null && typeArguments.length > 0) { // data<T>(values[, align])\n    let elementType = typeArguments[0];\n    if (!elementType.isValue) {\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        ctx.reportNode.typeArgumentsRange, \"memory.data\", elementType.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let valuesOperand = operands[0];\n    if (valuesOperand.kind != NodeKind.LITERAL || (<LiteralExpression>valuesOperand).literalKind != LiteralKind.ARRAY) {\n      compiler.error(\n        DiagnosticCode.Array_literal_expected,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let expressions = (<ArrayLiteralExpression>valuesOperand).elementExpressions;\n    let numElements = expressions.length;\n    let exprs = new Array<ExpressionRef>(numElements);\n    let isStatic = true;\n    for (let i = 0; i < numElements; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = compiler.compileExpression(elementExpression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        exprs[i] = expr;\n      } else {\n        exprs[i] = compiler.makeZero(elementType, elementExpression);\n      }\n    }\n    if (!isStatic) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        valuesOperand.range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = elementType.byteSize;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    let buf = new Uint8Array(numElements * elementType.byteSize);\n    assert(compiler.writeStaticBuffer(buf, 0, elementType, exprs) == buf.byteLength);\n    offset = compiler.addMemorySegment(buf, align).offset;\n  } else { // data(size[, align])\n    let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(arg0, ExpressionRunnerFlags.PreserveSideeffects);\n    if (!precomp) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let size = getConstValueI32(precomp);\n    if (size < 1) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[0].range, \"1\", i32.MAX_VALUE.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = 16;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    offset = compiler.addMemorySegment(new Uint8Array(size), align).offset;\n  }\n  // FIXME: what if recompiles happen? recompiles are bad.\n  compiler.currentType = usizeType;\n  if (usizeType == Type.usize32) {\n    assert(!i64_high(offset));\n    return module.i32(i64_low(offset));\n  } else {\n    return module.i64(i64_low(offset), i64_high(offset));\n  }\n}\nbuiltins.set(BuiltinNames.memory_data, builtin_memory_data);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // omit if assertions are disabled\n  if (compiler.options.noAssert) {\n    return arg0;\n  }\n\n  // omit if the assertion can be proven statically\n  var evaled = module.runExpression(arg0, ExpressionRunnerFlags.Default);\n  if (evaled) {\n    switch (<u32>getExpressionType(evaled)) {\n      case <u32>NativeType.I32: {\n        if (getConstValueI32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        if (getConstValueI64Low(evaled) | getConstValueI64High(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        if (getConstValueF32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        if (getConstValueF64(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF: return module.if(module.ref_is_null(arg0), abort);\n          \n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0),\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0),\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF: {\n        let temp = flow.getTempLocal(type);\n        let ret = module.if(\n          module.ref_is_null(\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"assert\", compiler.currentType.toString()\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// call_indirect<T?>(index: u32, ...args: *[]) -> T\nfunction builtin_call_indirect(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, i32.MAX_VALUE)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var returnType: Type;\n  if (typeArguments) {\n    assert(typeArguments.length);\n    returnType = typeArguments[0];\n  } else {\n    returnType = ctx.contextualType;\n  }\n  var indexArg = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length - 1;\n  var operandExprs = new Array<ExpressionRef>(numOperands);\n  var nativeParamTypes = new Array<NativeType>(numOperands);\n  for (let i = 0; i < numOperands; ++i) {\n    operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.auto);\n    nativeParamTypes[i] = compiler.currentType.toNativeType();\n  }\n  compiler.currentType = returnType;\n  return module.call_indirect(indexArg, operandExprs, createType(nativeParamTypes), returnType.toNativeType());\n}\nbuiltins.set(BuiltinNames.call_indirect, builtin_call_indirect);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.getClass();\n  if (!classInstance) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  var ctor = compiler.ensureConstructor(classInstance, ctx.reportNode);\n  compiler.checkFieldInitialization(classInstance, ctx.reportNode);\n  return compiler.compileInstantiate(ctor, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Function builtins ======================================================================\n\n// Function<T>#call(thisArg: thisof<T> | null, ...args: *[]) -> returnof<T>\nfunction builtin_function_call(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var parent = ctx.prototype.parent;\n  assert(parent.kind == ElementKind.CLASS);\n  var classInstance = <Class>parent;\n  assert(classInstance.prototype == compiler.program.functionPrototype);\n  var typeArguments = assert(classInstance.typeArguments);\n  assert(typeArguments.length == 1);\n  var ftype = typeArguments[0];\n  var signature = assert(ftype.getSignature());\n  var returnType = signature.returnType;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsOptional(ctx, 1 + signature.requiredParameters, 1 + signature.parameterTypes.length)\n  ) {\n    compiler.currentType = returnType;\n    return compiler.module.unreachable();\n  }\n  var indexArg = compiler.compileExpression(assert(ctx.thisOperand), ftype, Constraints.CONV_IMPLICIT);\n  var thisOperand = assert(ctx.operands.shift());\n  var thisType = signature.thisType;\n  var thisArg: usize = 0;\n  if (thisType) {\n    thisArg = compiler.compileExpression(thisOperand, thisType, Constraints.CONV_IMPLICIT);\n  } else if (thisOperand.kind != NodeKind.NULL) {\n    compiler.error(\n      DiagnosticCode._this_cannot_be_referenced_in_current_location,\n      thisOperand.range\n    );\n    return compiler.module.unreachable();\n  }\n  return compiler.compileCallIndirect(signature, indexArg, ctx.operands, ctx.reportNode, thisArg, ctx.contextualType == Type.void);\n}\nfunction_builtins.set(\"call\", builtin_function_call);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i8, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI8(getConstValueI32(precomp), bytes, i);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i16, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI16(getConstValueI32(precomp), bytes, i << 1);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI32(getConstValueI32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      let off = i << 3;\n      writeI32(getConstValueI64Low(precomp), bytes, off);\n      writeI32(getConstValueI64High(precomp), bytes, off + 4);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF32(getConstValueF32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF64(getConstValueF64(precomp), bytes, i << 3);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (type.isValue) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.compileExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          let precomp = module.runExpression(argN, ExpressionRunnerFlags.PreserveSideeffects);\n          let idx = 0;\n          if (precomp) {\n            idx = getConstValueI32(precomp);\n            if (idx < 0 || idx > maxIdx) {\n              compiler.error(\n                DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                operand.range, \"Lane index\", \"0\", maxIdx.toString()\n              );\n              idx = 0;\n            }\n          } else {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_saturate, builtin_v128_add_saturate);\n\n// v128.sub_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_saturate, builtin_v128_sub_saturate);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.pmin<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmin(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PminF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PminF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmin\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmin, builtin_v128_pmin);\n\n// v128.pmax<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmax(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PmaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PmaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmax\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmax, builtin_v128_pmax);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.AbsI8x16, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.AbsI16x8, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.AbsI32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.ceil<T!>(a: v128) -> v128\nfunction builtin_v128_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ceil, builtin_v128_ceil);\n\n// v128.floor<T!>(a: v128) -> v128\nfunction builtin_v128_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_floor, builtin_v128_floor);\n\n// v128.trunc<T!>(a: v128) -> v128\nfunction builtin_v128_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc, builtin_v128_trunc);\n\n// v128.nearest<T!>(a: v128) -> v128\nfunction builtin_v128_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_nearest, builtin_v128_nearest);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.widen_low<T!>(a: v128) -> v128\nfunction builtin_v128_widen_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_low, builtin_v128_widen_low);\n\n// v128.widen_high<T!>(a: v128) -> v128\nfunction builtin_v128_widen_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_high, builtin_v128_widen_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndNotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true<T!>(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AnyTrueI64x2\n            : UnaryOp.AnyTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AllTrueI64x2\n            : UnaryOp.AllTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.bitmask<T!>(a: v128) -> i32\nfunction builtin_v128_bitmask(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.BitmaskI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.BitmaskI16x8, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.BitmaskI32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.bitmask\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_bitmask, builtin_v128_bitmask);\n\n// v128.qfma<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfma(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfma, builtin_v128_qfma);\n\n// v128.qfms<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfms(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfms, builtin_v128_qfms);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.add -> add<i32>\nfunction builtin_i32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_add, builtin_i32_add);\n\n// i64.add -> add<i64>\nfunction builtin_i64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_add, builtin_i64_add);\n\n// i32.sub -> sub<i32>\nfunction builtin_i32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_sub, builtin_i32_sub);\n\n// i64.sub -> sub<i64>\nfunction builtin_i64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_sub, builtin_i64_sub);\n\n// i32.mul -> mul<i32>\nfunction builtin_i32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32_mul, builtin_i32_mul);\n\n// i64.mul -> mul<i64>\nfunction builtin_i64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i64_mul, builtin_i64_mul);\n\n// f32.add -> add<f32>\nfunction builtin_f32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32_add, builtin_f32_add);\n\n// f64.add -> add<f64>\nfunction builtin_f64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64_add, builtin_f64_add);\n\n// f32.sub -> sub<f32>\nfunction builtin_f32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sub, builtin_f32_sub);\n\n// f64.sub -> sub<f64>\nfunction builtin_f64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sub, builtin_f64_sub);\n\n// f32.mul -> mul<f32>\nfunction builtin_f32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32_mul, builtin_f32_mul);\n\n// f64.mul -> mul<f64>\nfunction builtin_f64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64_mul, builtin_f64_mul);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.mul -> v128.mul<i8>\nfunction builtin_i8x16_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_mul, builtin_i8x16_mul);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.abs -> v128.abs<i8>\nfunction builtin_i8x16_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_abs, builtin_i8x16_abs);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_saturate_s -> v128.add_saturate<i8>\nfunction builtin_i8x16_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_s, builtin_i8x16_add_saturate_s);\n\n// i8x16.add_saturate_u -> v128.add_saturate<u8>\nfunction builtin_i8x16_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_u, builtin_i8x16_add_saturate_u);\n\n// i8x16.sub_saturate_s -> v128.sub_saturate<i8>\nfunction builtin_i8x16_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_s, builtin_i8x16_sub_saturate_s);\n\n// i8x16.sub_saturate_u -> v128.sub_saturate<u8>\nfunction builtin_i8x16_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_u, builtin_i8x16_sub_saturate_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.any_true -> v128.any_true<i8>\nfunction builtin_i8x16_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_any_true, builtin_i8x16_any_true);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.bitmask -> v128.bitmask<i8>\nfunction builtin_i8x16_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_bitmask, builtin_i8x16_bitmask);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.abs -> v128.abs<i16>\nfunction builtin_i16x8_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_abs, builtin_i16x8_abs);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_saturate_s -> v128.add_saturate<i16>\nfunction builtin_i16x8_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_s, builtin_i16x8_add_saturate_s);\n\n// i16x8.add_saturate_u -> v128.add_saturate<u16>\nfunction builtin_i16x8_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_u, builtin_i16x8_add_saturate_u);\n\n// i16x8.sub_saturate_s -> v128.sub_saturate<i16>\nfunction builtin_i16x8_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_s, builtin_i16x8_sub_saturate_s);\n\n// i16x8.sub_saturate_u -> v128.sub_saturate<u16>\nfunction builtin_i16x8_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_u, builtin_i16x8_sub_saturate_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.any_true -> v128.any_true<i16>\nfunction builtin_i16x8_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_any_true, builtin_i16x8_any_true);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.bitmask -> v128.bitmask<i16>\nfunction builtin_i16x8_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_bitmask, builtin_i16x8_bitmask);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.widen_low_i8x16_s -> v128.widen_low<i8>\nfunction builtin_i16x8_widen_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_s, builtin_i16x8_widen_low_i8x16_s);\n\n// i16x8.widen_low_i8x16_u -> v128.widen_low<u8>\nfunction builtin_i16x8_widen_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_u, builtin_i16x8_widen_low_i8x16_u);\n\n// i16x8.widen_high_i8x16_s -> v128.widen_high<i8>\nfunction builtin_i16x8_widen_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_s, builtin_i16x8_widen_high_i8x16_s);\n\n// i16x8.widen_high_i8x16_u -> v128.widen_high<u8>\nfunction builtin_i16x8_widen_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_u, builtin_i16x8_widen_high_i8x16_u);\n\n// i16x8.load8x8_s -> v128.load_ext<i8>\nfunction builtin_i16x8_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_s, builtin_i16x8_load8x8_s);\n\n// i16x8.load8x8_u -> v128.load_ext<u8>\nfunction builtin_i16x8_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_u, builtin_i16x8_load8x8_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.abs -> v128.abs<i32>\nfunction builtin_i32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_abs, builtin_i32x4_abs);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.any_true -> v128.any_true<i32>\nfunction builtin_i32x4_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_any_true, builtin_i32x4_any_true);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.bitmask -> v128.bitmask<i32>\nfunction builtin_i32x4_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_bitmask, builtin_i32x4_bitmask);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.widen_low_i16x8_s -> // v128.widen_low<i16>\nfunction builtin_i32x4_widen_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_s, builtin_i32x4_widen_low_i16x8_s);\n\n// i32x4.widen_low_i16x8_u -> v128.widen_low<u16>\nfunction builtin_i32x4_widen_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_u, builtin_i32x4_widen_low_i16x8_u);\n\n// i32x4.widen_high_i16x8_s -> v128.widen_high<i16>\nfunction builtin_i32x4_widen_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_s, builtin_i32x4_widen_high_i16x8_s);\n\n// i32x4.widen_high_i16x8_u -> v128.widen_high<u16>\nfunction builtin_i32x4_widen_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_u, builtin_i32x4_widen_high_i16x8_u);\n\n// i32x4.load16x4_s -> v128.load_ext<i16>\nfunction builtin_i32x4_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_s, builtin_i32x4_load16x4_s);\n\n// i32x4.load16x4_u -> v128.load_ext<u16>\nfunction builtin_i32x4_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_u, builtin_i32x4_load16x4_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.any_true -> v128.any_true<i64>\nfunction builtin_i64x2_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_any_true, builtin_i64x2_any_true);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.trunc_sat_f64x2_s -> v128.trunc_sat<i64>\nfunction builtin_i64x2_trunc_sat_f64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_s, builtin_i64x2_trunc_sat_f64x2_s);\n\n// i64x2.trunc_sat_f64x2_u -> v128.trunc_sat<u64>\nfunction builtin_i64x2_trunc_sat_f64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_u, builtin_i64x2_trunc_sat_f64x2_u);\n\n// i64x2.load32x2_s -> v128.load_ext<i32>\nfunction builtin_i64x2_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_s, builtin_i64x2_load32x2_s);\n\n// i64x2.load32x2_u -> v128.load_ext<u32>\nfunction builtin_i64x2_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_u, builtin_i64x2_load32x2_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.pmin -> v128.pmin<f32>\nfunction builtin_f32x4_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmin, builtin_f32x4_pmin);\n\n// f32x4.pmax -> v128.pmax<f32>\nfunction builtin_f32x4_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmax, builtin_f32x4_pmax);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.ceil -> v128.ceil<f32>\nfunction builtin_f32x4_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ceil, builtin_f32x4_ceil);\n\n// f32x4.floor -> v128.floor<f32>\nfunction builtin_f32x4_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_floor, builtin_f32x4_floor);\n\n// f32x4.trunc -> v128.trunc<f32>\nfunction builtin_f32x4_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_trunc, builtin_f32x4_trunc);\n\n// f32x4.nearest -> v128.nearest<f32>\nfunction builtin_f32x4_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_nearest, builtin_f32x4_nearest);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.qfma -> v128.qfma<f32>\nfunction builtin_f32x4_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfma, builtin_f32x4_qfma);\n\n// f32x4.qfms -> v128.qfms<f32>\nfunction builtin_f32x4_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfms, builtin_f32x4_qfms);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.pmin -> v128.pmin<f64>\nfunction builtin_f64x2_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmin, builtin_f64x2_pmin);\n\n// f64x2.pmax -> v128.pmax<f64>\nfunction builtin_f64x2_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmax, builtin_f64x2_pmax);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.ceil -> v128.ceil<f64>\nfunction builtin_f64x2_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ceil, builtin_f64x2_ceil);\n\n// f64x2.floor -> v128.floor<f64>\nfunction builtin_f64x2_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_floor, builtin_f64x2_floor);\n\n// f64x2.trunc -> v128.trunc<f64>\nfunction builtin_f64x2_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_trunc, builtin_f64x2_trunc);\n\n// f64x2.nearest -> v128.nearest<f64>\nfunction builtin_f64x2_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_nearest, builtin_f64x2_nearest);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_i64x2_s -> v128.convert<i64>\nfunction builtin_f64x2_convert_i64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_s, builtin_f64x2_convert_i64x2_s);\n\n// f64x2.convert_i64x2_u -> v128.convert<u64>\nfunction builtin_f64x2_convert_i64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_u, builtin_f64x2_convert_i64x2_u);\n\n// f64x2.qfma -> v128.qfma<f64>\nfunction builtin_f64x2_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfma, builtin_f64x2_qfma);\n\n// f64x2.qfms -> v128.qfms<f64>\nfunction builtin_f64x2_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfms, builtin_f64x2_qfms);\n\n// v8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_v8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_shuffle, builtin_v8x16_shuffle);\n\n// v8x16.swizzle -> v128.swizzle\nfunction builtin_v8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_swizzle, builtin_v8x16_swizzle);\n\n// v8x16.load_splat -> v128.load_splat<u8>\nfunction builtin_v8x16_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_load_splat, builtin_v8x16_load_splat);\n\n// v16x8.load_splat -> v128.load_splat<u16>\nfunction builtin_v16x8_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v16x8_load_splat, builtin_v16x8_load_splat);\n\n// v32x4.load_splat -> v128.load_splat<u32>\nfunction builtin_v32x4_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v32x4_load_splat, builtin_v32x4_load_splat);\n\n// v64x2.load_splat -> v128.load_splat<u64>\nfunction builtin_v64x2_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v64x2_load_splat, builtin_v64x2_load_splat);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classReference = globalType.getClass();\n    if (\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instance.type.isManaged);\n    assert(instanceId == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\")) !== null) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        let visitThisType = assert(visitSig.thisType);\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        // TODO: for (let member of members.values()) {\n        for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n          let member = unchecked(_values[j]);\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      module.flatten(code)\n    );\n    relooper.addBranchForSwitch(outer, block, [ instanceId ]);\n    blocks.push(block);\n  }\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    let base = instance.base;\n    if (base) relooper.addBranch(blocks[instanceId], blocks[base.id]);\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var staticArrayPrototype = program.staticArrayPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(arrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    } else if (instance.extends(staticArrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.STATICARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var module = compiler.module;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    let expr = compiler.compileExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      assert(getConstValueI64High(precomp) == 0); // TODO\n      value = getConstValueI64Low(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    let expr = compiler.compileExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      value = getConstValueI32(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Evaluates a compile-time constant immediate align argument. */\nfunction evaluateImmediateAlign(expression: Expression, naturalAlign: i32, compiler: Compiler): i32 {\n  var align = evaluateImmediateOffset(expression, compiler);\n  if (align < 0) return align;\n  if (align < 1 || naturalAlign > 16) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n      expression.range, \"Alignment\", \"1\", naturalAlign.toString()\n    );\n    return -1;\n  }\n  if (!isPowerOf2(align)) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_power_of_two,\n      expression.range, \"Alignment\"\n    );\n    return -1;\n  }\n  return align;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.isIntegerValue) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.binaryen || (global.binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function toText() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  function_builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChildAt,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  getSideEffects,\n  SideEffects,\n  SwitchBuilder,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target,\n  featureToString\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  FieldFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n  FunctionTypeNode,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  uniqueMap,\n  isPowerOf2,\n  v128_zero\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** It true, exports the memory to the embedder. */\n  exportMemory: bool = true;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** Initial memory size, in pages. */\n  initialMemory: u32 = 0;\n  /** Maximum memory size, in pages. */\n  maximumMemory: u32 = 0;\n  /** If true, memory is declared as shared. */\n  sharedMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** Static table start offset. */\n  tableBase: u32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n  /** Indicates a very low (<64k) memory limit. */\n  lowMemoryLimit: u32 = 0;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5,\n  /** Indicates that the value will become `this` of a property access or instance call. */\n  IS_THIS = 1 << 6\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3,\n  /** Requires the setArgumentsLength export. */\n  setArgumentsLength = 1 << 4\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: Function[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled functions. */\n  lazyFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Functions potentially involving a virtual call. */\n  virtualCalls: Set<Function> = new Set();\n  /** Elements currently undergoing compilation. */\n  pendingElements: Set<Element> = new Set();\n  /** Elements, that are module exports, already processed */\n  doneModuleExports: Set<Element> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create();\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    if (options.hasFeature(Feature.GC)) featureFlags |= FeatureFlags.GC;\n    if (options.hasFeature(Feature.MEMORY64)) featureFlags |= FeatureFlags.Memory64;\n    module.setFeatures(featureFlags);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = new Array<ExpressionRef>();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize();\n\n    // obtain the main start function\n    var startFunctionInstance = this.currentFlow.actualFunction;\n    assert(startFunctionInstance.internalName == BuiltinNames.start);\n    var startFunctionBody = this.currentBody;\n    assert(startFunctionBody.length == 0);\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = program.isWasi || options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinNames.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        // TODO: for (let classInstance of cyclicClasses) {\n        for (let _values = Set_values(cyclicClasses), i = 0, k = _values.length; i < k; ++i) {\n          let classInstance = unchecked(_values[i]);\n          this.pedantic(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy functions\n    var lazyFunctions = this.lazyFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual lookup tables\n    var functionTable = this.functionTable;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instance = functionTable[i];\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        assert(instance.is(CommonFlags.INSTANCE));\n        functionTable[i] = this.ensureVirtualStub(instance); // incl. varargs\n        this.finalizeVirtualStub(instance);\n      } else if (instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n        functionTable[i] = this.ensureVarargsStub(instance);\n      }\n    }\n    var virtualCalls = this.virtualCalls;\n    for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      this.finalizeVirtualStub(instance);\n    }\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    var lowMemoryLimit32 = this.options.lowMemoryLimit;\n    if (lowMemoryLimit32) {\n      let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n      if (i64_gt(memoryOffset, lowMemoryLimit)) {\n        this.error(\n          DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1,\n          null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit)\n        );\n      }\n    }\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var initialPages: u32 = 0;\n    if (this.options.memoryBase /* is specified */ || this.memorySegments.length) {\n      initialPages = u32(i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16))));\n    }\n    if (options.initialMemory) {\n      if (options.initialMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_initial_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        initialPages = options.initialMemory;\n      }\n    }\n    var maximumPages = Module.UNLIMITED_MEMORY;\n    if (options.maximumMemory) {\n      if (options.maximumMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_maximum_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        maximumPages = options.maximumMemory;\n      }\n    }\n    var isSharedMemory = false;\n    if (options.sharedMemory) {\n      isSharedMemory = true;\n      if (!options.maximumMemory) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_maximum_memory_to_be_defined,\n          null\n        );\n        isSharedMemory = false;\n      }\n      if (!options.hasFeature(Feature.THREADS)) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_feature_threads_to_be_enabled,\n          null\n        );\n        isSharedMemory = false;\n      }\n    }\n    module.setMemory(\n      initialPages,\n      maximumPages,\n      this.memorySegments,\n      options.target,\n      options.exportMemory ? ExportNames.memory : null,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    var functionTableNames = new Array<string>(functionTable.length);\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      functionTableNames[i] = functionTable[i].internalName;\n    }\n    module.setFunctionTable(tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTableNames, module.i32(tableBase));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n\n    // expose the arguments length helper if there are varargs exports\n    if (this.runtimeFeatures & RuntimeFeatures.setArgumentsLength) {\n      module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n        module.global_set(BuiltinNames.argumentsLength, module.local_get(0, NativeType.I32))\n      );\n      module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>element;\n        let functionInstances = functionPrototype.instances;\n        if (functionInstances !== null && functionInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (functionPrototype.is(CommonFlags.GENERIC)) {\n          this.warning(\n            DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n            functionPrototype.identifierNode.range\n          );\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classPrototype = <ClassPrototype>element;\n        let classInstances = classPrototype.instances;\n        if (classInstances !== null && classInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (classPrototype.is(CommonFlags.GENERIC)) {\n          this.warning(\n            DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n            classPrototype.identifierNode.range\n          );\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (propertyInstance) this.ensureModuleExport(name, propertyInstance, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else {\n          if (element.is(CommonFlags.COMPILED)) this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        if (!functionInstance.hasDecorator(DecoratorFlags.BUILTIN)) {\n          let signature = functionInstance.signature;\n          if (signature.requiredParameters < signature.parameterTypes.length) {\n            // utilize varargs stub to fill in omitted arguments\n            functionInstance = this.ensureVarargsStub(functionInstance);\n            this.ensureArgumentsLength();\n            this.runtimeFeatures |= RuntimeFeatures.setArgumentsLength;\n          }\n          if (functionInstance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(functionInstance.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.ensureModuleExport(GETTER_PREFIX + name, getterInstance, prefix);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.ensureModuleExport(SETTER_PREFIX + name, setterInstance, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let module = this.module;\n          module.addFunctionExport(fieldInstance.internalGetterName, prefix + GETTER_PREFIX + name);\n          if (!element.is(CommonFlags.READONLY)) {\n            module.addFunctionExport(fieldInstance.internalSetterName, prefix + SETTER_PREFIX + name);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n\n          if (!this.doneModuleExports.has(element)) {\n            module.addGlobal(internalName, NativeType.I32, false, module.i32(classInstance.id));\n            this.doneModuleExports.add(element);\n          }\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (functionInstance) this.compileFunction(functionInstance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let classInstance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (classInstance) this.compileClass(classInstance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n        if (propertyInstance) this.compileProperty(propertyInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return !global.is(CommonFlags.ERRORED);\n    global.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(global);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) {\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(resolvedType);\n        this.checkTypeSupported(global.type, typeNode);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        global.set(CommonFlags.ERRORED);\n        pendingElements.delete(global);\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      pendingElements.delete(global);\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        pendingElements.delete(global);\n        return true;\n      }\n\n      // Importing mutable globals is not supported in the MVP\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        global.declaration.range, \"mutable-globals\"\n      );\n      global.set(CommonFlags.ERRORED);\n      pendingElements.delete(global);\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              initializeInStart = true;\n            }\n          }\n          if (this.skippedAutoreleases.has(initExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (<u32>exprType) {\n            case <u32>NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case <u32>NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case <u32>NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case <u32>NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              global.set(CommonFlags.ERRORED);\n              pendingElements.delete(global);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC | Constraints.WILL_RETAIN);\n      } else {\n        initExpr = this.makeZero(type, global.declaration);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type, global.declaration));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr, type);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    pendingElements.delete(global);\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return !element.is(CommonFlags.ERRORED);\n    element.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(element);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  member.declaration.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, Type.i32, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    pendingElements.delete(element);\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return !instance.is(CommonFlags.ERRORED);\n\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyFunctions.add(instance);\n        return true;\n      }\n    }\n\n    instance.set(CommonFlags.COMPILED);\n    var pendingElements = this.pendingElements;\n    pendingElements.add(instance);\n\n    var previousType = this.currentType;\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n    var declarationNode = instance.declaration;\n    assert(declarationNode.kind == NodeKind.FUNCTIONDECLARATION || declarationNode.kind == NodeKind.METHODDECLARATION);\n    this.checkSignatureSupported(instance.signature, (<FunctionDeclaration>declarationNode).signature);\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // In normal instance functions, `this` is effectively a constant\n        // retained elsewhere so does not need to be retained.\n        if (instance.is(CommonFlags.CONSTRUCTOR)) {\n          // Constructors, however, can allocate their own memory, and as such\n          // must refcount the allocation in case something else is `return`ed.\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType()),\n                type\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      let body: ExpressionRef;\n      if (this.compileFunctionBody(instance, stmts)) {\n        if (!flow.is(FlowFlags.TERMINATES)) {\n          this.performAutoreleases(flow, stmts);\n          this.finishAutoreleases(flow, stmts);\n        }\n        body = module.flatten(stmts, instance.signature.returnType.toNativeType());\n      } else {\n        body = module.unreachable();\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        body\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declarationNode); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract or interface function\n    } else if (instance.is(CommonFlags.ABSTRACT) || instance.parent.kind == ElementKind.INTERFACE) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        null,\n        module.unreachable()\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n      instance.set(CommonFlags.ERRORED);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    pendingElements.delete(instance);\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[]\n  ): bool {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n    var thisLocal = instance.signature.thisType\n      ? assert(flow.lookupLocal(CommonNames.this_))\n      : null;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // Make constructors return their instance pointer, and prepend a conditional\n    // allocation if any code path accesses `this`.\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      thisLocal = assert(thisLocal);\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (flow.isAny(FlowFlags.ACCESSES_THIS | FlowFlags.CONDITIONALLY_ACCESSES_THIS) || !flow.is(FlowFlags.TERMINATES)) {\n        // Allocate `this` if not a super call, and initialize fields\n        let allocStmts = new Array<ExpressionRef>();\n        allocStmts.push(\n          module.if(\n            module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n              module.local_get(thisLocal.index, nativeSizeType)\n            ),\n            module.local_set(thisLocal.index,\n              this.makeRetain(\n                this.makeAllocation(classInstance),\n                classInstance.type\n              )\n            )\n          )\n        );\n        this.makeFieldInitializationInConstructor(classInstance, allocStmts);\n        if (flow.isInline) {\n          let firstStmt = stmts[0]; // `this` alias assignment\n          assert(getExpressionId(firstStmt) == ExpressionId.LocalSet);\n          assert(getLocalSetIndex(firstStmt) == thisLocal.index);\n          allocStmts.unshift(firstStmt);\n          stmts[0] = module.flatten(allocStmts, NativeType.None);\n        } else {\n          stmts.unshift(\n            module.flatten(allocStmts, NativeType.None)\n          );\n        }\n\n        // Just prepended allocation is dropped when returning non-'this'\n        if (flow.is(FlowFlags.MAY_RETURN_NONTHIS)) {\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Explicitly_returning_constructor_drops_this_allocation,\n              instance.identifierNode.range\n            );\n          }\n        }\n      }\n\n      // Returning something else than 'this' would break 'super()' calls\n      if (flow.is(FlowFlags.MAY_RETURN_NONTHIS) && !classInstance.hasDecorator(DecoratorFlags.FINAL)) {\n        this.error(\n          DiagnosticCode.A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final,\n          classInstance.identifierNode.range\n        );\n      }\n\n      // Implicitly return `this` if the flow falls through\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        assert(flow.isAnyLocalFlag(thisLocal.index, LocalFlags.ANY_RETAINED));\n        flow.unsetLocalFlag(thisLocal.index, LocalFlags.ANY_RETAINED); // undo\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n      return false; // not recoverable\n    }\n\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    this.checkFieldInitialization(instance);\n\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    // A getter retains, while a load, as of a field access, does not.\n    if (instance.getterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.load(type.byteSize, type.isSignedIntegerValue,\n      module.local_get(0, nativeThisType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) valueExpr = this.makeRetain(valueExpr, type);\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null, valueExpr);\n    if (instance.setterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr: ExpressionRef;\n    var varTypes: NativeType[] | null = null;\n    if (type.isManaged) {\n      // Can't use makeReplace here since there's no corresponding flow, so\n      // 0: this, 1: value, 2: oldValue (temp)\n      valueExpr = module.block(null, [\n        module.if(\n          module.binary(nativeValueType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            // value != (oldValue = this.field)\n            module.local_get(1, nativeValueType),\n            module.local_tee(2,\n              module.load(type.byteSize, false,\n                module.local_get(0, nativeThisType),\n                nativeValueType, instance.memoryOffset\n              )\n            )\n          ),\n          module.block(null, [\n            module.drop(\n              this.makeRetain(module.local_get(1, nativeValueType), type)\n            ),\n            this.makeRelease(module.local_get(2, nativeValueType), type)\n          ])\n        ),\n        module.local_get(1, nativeValueType)\n      ], nativeValueType);\n      varTypes = [ nativeValueType ];\n    } else {\n      valueExpr = module.local_get(1, nativeValueType);\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, varTypes,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.getterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    assert(isPowerOf2(alignment));\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let len = stringValue.length;\n      let buf = stringInstance.createBuffer(len << 1);\n      for (let i = 0; i < len; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var ptr = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ptr), i64_high(ptr));\n    } else {\n      assert(i64_is_u32(ptr));\n      return this.module.i32(i64_low(ptr));\n    }\n  }\n\n  /** Writes a series of static values of the specified type to a buffer. */\n  writeStaticBuffer(buf: Uint8Array, pos: i32, elementType: Type, values: ExpressionRef[]): i32 {\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var nativeType = elementType.toNativeType();\n    switch (<u32>nativeType) {\n      case <u32>NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    return pos;\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var arrayBufferInstance = program.arrayBufferInstance;\n    var buf = arrayBufferInstance.createBuffer(values.length * elementType.byteSize);\n    writeI32(id, buf, 8); // use specified rtId\n    assert(this.writeStaticBuffer(buf, program.runtimeHeaderSize, elementType, values) == buf.length);\n    return this.addMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n    var bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n    var buf = arrayInstance.createBuffer();\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf));\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a runtime counterpart of the specified function exists and returns its address. */\n  ensureRuntimeFunction(instance: Function): i64 {\n    assert(instance.is(CommonFlags.COMPILED) && !instance.is(CommonFlags.STUB));\n    var program = this.program;\n    var memorySegment = instance.memorySegment;\n    if (!memorySegment) {\n\n      // Add to the function table\n      let functionTable = this.functionTable;\n      let tableBase = this.options.tableBase;\n      if (!tableBase) tableBase = 1; // leave first elem blank\n      let index = tableBase + functionTable.length;\n      functionTable.push(instance);\n\n      // Create runtime function\n      let rtInstance = assert(this.resolver.resolveClass(program.functionPrototype, [ instance.type ]));\n      let buf = rtInstance.createBuffer();\n      assert(rtInstance.writeField(\"_index\", index, buf));\n      assert(rtInstance.writeField(\"_env\", 0, buf));\n      instance.memorySegment = memorySegment = this.addMemorySegment(buf);\n    }\n    return i64_add(memorySegment.offset, i64_new(program.runtimeHeaderSize));\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATURE:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          statement.range,\n          \"Inner type alias\"\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChildAt(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        labelNode.range,\n        \"Break label\"\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        label.range,\n        \"Continue label\"\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current !== null && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType,\n        statement.condition\n      );\n      let condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          assert(!flowAfter); // should work on the first attempt\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpression(condition, Type.bool),\n        this.currentType,\n        condition\n      );\n      condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        stmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Iterators\"\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        return module.block(null, [\n          module.drop(condExpr),\n          this.compileStatement(ifTrue)\n        ]);\n      }\n      case ConditionKind.FALSE: {\n        return ifFalse\n          ? module.block(null, [\n              module.drop(condExpr),\n              this.compileStatement(ifFalse)\n            ])\n          : module.drop(condExpr);\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      flow.inheritMutual(thenFlow, elseFlow);\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n      if (flow.actualFunction.is(CommonFlags.CONSTRUCTOR) && valueExpression.kind != NodeKind.THIS) {\n        flow.set(FlowFlags.MAY_RETURN_NONTHIS);\n      }\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length > 0) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr != 0 && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n      ? \"case\" + defaultIndex.toString()\n      : \"break\"\n    ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    // TODO: requires exception-handling spec.\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).args;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n    // generates dead code (after unreachable) but still updates state\n    var dropped = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, dropped);\n    this.finishAutoreleases(flow, dropped);\n    flow.freeScopedLocals();\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Exceptions\"\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        this.checkTypeSupported(type, typeNode);\n\n        if (initializerNode) {\n          let pendingElements = this.pendingElements;\n          let dummy = flow.addScopedDummyLocal(name, type); // pending dummy\n          pendingElements.add(dummy);\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n          pendingElements.delete(dummy);\n          flow.freeScopedDummyLocal(name);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let pendingElements = this.pendingElements;\n        let temp = flow.addScopedDummyLocal(name, Type.auto); // pending dummy\n        pendingElements.add(temp);\n        initExpr = this.compileExpression(initializerNode, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        pendingElements.delete(temp);\n        flow.freeScopedDummyLocal(name);\n\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n          if (precomp) {\n            initExpr = precomp; // always use precomputed initExpr\n            let local: Local | null = null;\n            switch (<u32>getExpressionType(initExpr)) {\n              case <u32>NativeType.I32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.I64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.F32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case <u32>NativeType.F64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n            }\n            if (local) {\n              // Add as a virtual local that doesn't actually exist in WebAssembly\n              let scopedLocals = flow.scopedLocals;\n              if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n              else if (scopedLocals.has(name)) {\n                let existing = assert(scopedLocals.get(name));\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  declaration.name.range,\n                  existing.declaration.name.range,\n                  name\n                );\n                return this.module.unreachable();\n              }\n              scopedLocals.set(name, local);\n              isStatic = true;\n            }\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr, type)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.isShortIntegerValue) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type, declaration)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.isShortIntegerValue) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      stmts.push(\n        module.drop(condExpr)\n      );\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.isIntegerValue &&\n      contextualType.isIntegerValue &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr, returnType);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.isReference || toType.isReference) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.isNullableReference && !toType.isNullableReference) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(toType.isExternalReference || fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        if (toType.isExternalReference) {\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            reportNode.range,\n            \"ref.cast\"\n          );\n          this.currentType = toType;\n          return module.unreachable();\n        }\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n    assert(!fromType.isReference && !toType.isReference);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.isFloatValue) {\n\n      // float to float\n      if (toType.isFloatValue) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.isIntegerValue) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f32, reportNode);\n            wrap = false;\n          } else if (toType.isSignedIntegerValue) {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f64, reportNode);\n            wrap = false;\n          } else if (toType.isSignedIntegerValue) {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.isIntegerValue && toType.isFloatValue) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.isLongIntegerValue) {\n\n        // i64 to i32 or smaller\n        if (toType.isBooleanValue) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.isLongIntegerValue) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.isLongIntegerValue) {\n        expr = module.unary(\n          fromType.isSignedIntegerValue ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.isShortIntegerValue) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.isVaryingIntegerValue && !toType.isVaryingIntegerValue) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Const assertion\"\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n  private i32PowInstance: Function | null = null;\n  private i64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        leftExpr = this.convertExpression(leftExpr,\n          leftType, leftType = commonType,\n          false, true, // !\n          left\n        );\n        rightExpr = this.convertExpression(rightExpr,\n          rightType, rightType = commonType,\n          false, true, // !\n          right\n        );\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EQUALS_EQUALS) { // can't overload '==='\n          let classReference = leftType.getClassOrWrapper(this.program);\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.FUNCREF: \n          case TypeKind.EXTERNREF:\n          case TypeKind.EXNREF:\n          case TypeKind.ANYREF: {\n            this.error(\n              DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n              expression.range,\n              \"ref.eq\",\n              commonType.toString()\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS) { // can't overload '!=='\n          let classReference = leftType.getClass();\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.FUNCREF:\n          case TypeKind.EXTERNREF:\n          case TypeKind.EXNREF:\n          case TypeKind.ANYREF: {\n            this.error(\n              DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n              expression.range,\n              \"ref.eq\",\n              commonType.toString()\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POW);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"**\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n\n        let instance: Function | null;\n        switch (commonType.kind) {\n          case TypeKind.BOOL: {\n            expr = module.select(\n              module.i32(1),\n              module.binary(BinaryOp.EqI32, rightExpr, module.i32(0)),\n              leftExpr\n            );\n            break;\n          }\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            instance = this.i32PowInstance;\n            if (!instance) {\n              let prototype = this.program.lookupGlobal(CommonNames.ipow32);\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"ipow32\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.i32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n              if (commonType.size != 32) {\n                expr = this.ensureSmallIntegerWrap(expr, commonType);\n              }\n            }\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            instance = this.i64PowInstance;\n            if (!instance) {\n              let prototype = this.program.lookupGlobal(CommonNames.ipow64);\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"ipow64\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.i64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let isWasm64 = this.options.isWasm64;\n            instance = isWasm64 ? this.i64PowInstance : this.i32PowInstance;\n            if (!instance) {\n              let prototype = this.program.lookupGlobal(isWasm64 ? CommonNames.ipow64 : CommonNames.ipow32);\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, isWasm64 ? \"ipow64\" : \"ipow32\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n              if (isWasm64) {\n                this.i64PowInstance = instance;\n              } else {\n                this.i32PowInstance = instance;\n              }\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F32: {\n            instance = this.f32PowInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.pow\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.pow));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          // Math.pow otherwise (result is f64)\n          case TypeKind.F64: {\n            instance = this.f64PowInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.pow\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.pow));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.REM);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.mod));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.mod));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType, left),\n            this.makeIsTrueish(rightExpr, rightType, right),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr, rightType);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType()),\n                  leftType\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType, left),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType()),\n                    leftType\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType, left),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType, left),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType, left),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType, right)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr, rightType);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType()),\n                  leftType\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType, left),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType()),\n                    leftType\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType, left),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType, left),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(\n    expression: Expression,\n    valueExpression: Expression,\n    contextualType: Type\n  ): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        if (this.pendingElements.has(target)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            target.internalName\n          );\n          return this.module.unreachable();\n        }\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return this.module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.WILL_RETAIN);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, valueType, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        let isConstructor = flow.actualFunction.is(CommonFlags.CONSTRUCTOR);\n\n        // Cannot assign to readonly fields except in constructors if there's no initializer\n        if (fieldInstance.is(CommonFlags.READONLY)) {\n          if (!isConstructor || initializerNode !== null) {\n            this.error(\n              DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n              valueExpression.range, fieldInstance.internalName\n            );\n            return module.unreachable();\n          }\n        }\n\n        // Mark initialized fields in constructors\n        thisExpression = assert(thisExpression);\n        if (isConstructor && thisExpression.kind == NodeKind.THIS) {\n          flow.setThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED);\n        }\n\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          valueType,\n          this.compileExpression(\n            thisExpression,\n            (<Class>fieldParent).type,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          ),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          let thisType = assert(setterInstance.signature.thisType);\n          let thisExpr = this.compileExpression(\n            assert(thisExpression),\n            thisType,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n          if (!tee) return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          assert(getterInstance.signature.thisType == thisType);\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          let tempThis = flow.getTempLocal(returnType);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempThis.index, thisExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempThis.index, nativeReturnType)\n            ], valueExpression)\n          ], nativeReturnType);\n          flow.freeTempLocal(tempThis);\n          return ret;\n        } else {\n          if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          return module.block(null, [\n            this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n            this.makeCallDirect(getterInstance, null, valueExpression)\n          ], getterInstance.signature.returnType.toNativeType());\n        }\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let valueType = setterInstance.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(\n          assert(thisExpression),\n          classInstance.type,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(classInstance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = getterInstance.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.isNullableReference) {\n      if (!valueType.isNullableReference || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          valueExpr,\n          valueType,\n          module.local_get(localIndex, type.toNativeType()),\n          type,\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr, valueType);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.isShortIntegerValue) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          valueExpr,\n          valueType,\n          module.global_get(global.internalName, nativeType),\n          type,\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (!field.is(CommonFlags.COMPILED)) {\n      field.set(CommonFlags.COMPILED);\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(field.type, typeNode);\n    }\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType, findUsedLocals(valueExpr));\n      // set before and read after valueExpr executes below ^\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.local_tee(tempValue.index, valueExpr),\n              valueType,\n              module.load(fieldType.byteSize, fieldType.isSignedIntegerValue,\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              fieldType,\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            valueExpr,\n            valueType,\n            module.load(fieldType.byteSize, fieldType.isSignedIntegerValue,\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            fieldType,\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = assert(classInstance.base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      let baseCtorInstance = this.ensureConstructor(baseClassInstance, expression);\n      this.checkFieldInitialization(baseClassInstance, expression);\n      let superCall = this.compileCallDirect(\n        baseCtorInstance,\n        expression.args,\n        expression,\n        module.local_get(thisLocal.index, nativeSizeType),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(superCall)); // guaranteed\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ACCESSES_THIS |\n        FlowFlags.CONDITIONALLY_ACCESSES_THIS\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ACCESSES_THIS | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.local_set(thisLocal.index, superCall);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = this.resolver.currentThisExpression;\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          // builtins handle present respectively omitted type arguments on their own\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        target = functionInstance;\n        // fall-through\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>target;\n        let thisArg: ExpressionRef = 0;\n        if (functionInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(functionInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(\n          functionInstance,\n          expression.args,\n          expression,\n          thisArg,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low(local.constantIntegerValue));\n          } else {\n            indexArg = module.local_get(local.index, NativeType.I32);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          indexArg = module.global_get(global.internalName, global.type.toNativeType());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let fieldParent = fieldInstance.parent;\n          assert(fieldParent.kind == ElementKind.CLASS);\n          indexArg = module.load(4, false,\n            this.compileExpression(\n              assert(thisExpression),\n              (<Class>fieldParent).type,\n              Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n            ),\n            NativeType.I32,\n            fieldInstance.memoryOffset\n          );\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, fieldType.toString()\n        );\n        return module.unreachable();\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>target);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression, thisArg);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>target;\n        let typeArguments = classInstance.getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          signature = ftype.getSignature();\n          indexArg = this.compileExpression(expression.expression, ftype, Constraints.CONV_IMPLICIT);\n          break;\n        }\n        // fall-through\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: bootstrap can't see this yet\n      indexArg,\n      expression.args,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        uniqueMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n    var callee = expression.expression;\n    var ctx = new BuiltinContext(\n      this,\n      prototype,\n      typeArguments,\n      expression.args,\n      callee.kind == NodeKind.PROPERTYACCESS\n        ? (<PropertyAccessExpression>callee).expression\n        : null,\n      contextualType,\n      expression,\n      false\n    );\n    // global builtins\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    // class builtins\n    var parent = prototype.parent;\n    if (parent.kind == ElementKind.CLASS) {\n      let classPrototype = (<Class>parent).prototype;\n      if (classPrototype == this.program.functionPrototype) {\n        let methodName = prototype.name;\n        if (function_builtins.has(methodName)) {\n          let fn = assert(function_builtins.get(methodName));\n          return fn(ctx);\n        }\n      }\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        reportNode.range,\n        \"Rest parameters\"\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node, relatedReportNode: Node | null = null): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      if (relatedReportNode) {\n        this.errorRelated(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range, relatedReportNode.range\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range\n        );\n      }\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // handle call on `this` in constructors\n    let actualFunction = this.currentFlow.actualFunction;\n    if (actualFunction.is(CommonFlags.CONSTRUCTOR) && reportNode.isAccessOnThis) {\n      let parent = actualFunction.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitialization(<Class>parent, reportNode);\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE) && (!instance.is(CommonFlags.VIRTUAL) || reportNode.isAccessOnSuper)) {\n      assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr, paramType);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // In normal instance functions, `this` is effectively a constant\n      // retained elsewhere so does not need to be retained.\n      if (instance.is(CommonFlags.CONSTRUCTOR)) {\n        // Constructors, however, can allocate their own memory, and as such\n        // must refcount the allocation in case something else is `return`ed.\n        flow.setLocalFlag(thisLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr, initType);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // If a constructor, perform field init checks on its flow directly\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let parent = instance.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitializationInFlow(<Class>parent, flow);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n    }\n  }\n\n  /** Ensures compilation of the varargs stub for the specified function. */\n  ensureVarargsStub(original: Function): Function {\n    // A varargs stub is a function called with omitted arguments being zeroed,\n    // reading the `argumentsLength` helper global to decide which initializers\n    // to inject before calling the original function. It is typically attempted\n    // to circumvent the varargs stub where possible, for example where omitted\n    // arguments are constants and can be inlined into the original call.\n    var stub = original.varargsStub;\n    if (stub) return stub;\n\n    var originalSignature = original.signature;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the varargs stub\n    stub = original.newStub(\"varargs\");\n    stub.signature.requiredParameters = maxArguments;\n    original.varargsStub = stub;\n\n    // compile initializers of omitted arguments in the scope of the stub,\n    // accounting for additional locals and a proper `this` context.\n    var previousFlow = this.currentFlow;\n    var flow = stub.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(original.internalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      typesToNativeTypes(stub.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n    stub.finalize(module, funcRef);\n    return stub;\n  }\n\n  /** Ensures compilation of the virtual stub for the specified function. */\n  ensureVirtualStub(original: Function): Function {\n    // A virtual stub is a function redirecting virtual calls to the actual\n    // overload targeted by the call. It utilizes varargs stubs where necessary\n    // and as such has the same semantics as one. Here, we only make sure that\n    // a placeholder exist, with actual code being generated as a finalization\n    // step once module compilation is otherwise complete.\n    var stub = original.virtualStub;\n    if (stub) return stub;\n    stub = original.newStub(\"virtual\");\n    original.virtualStub = stub;\n    var module = this.module;\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      null,\n      module.unreachable()\n    );\n    this.virtualCalls.add(original);\n    return stub;\n  }\n\n  /** Finalizes the virtual stub of the specified function. */\n  private finalizeVirtualStub(instance: Function): void {\n    var stub = this.ensureVirtualStub(instance);\n    if (stub.is(CommonFlags.COMPILED)) return;\n\n    // Wouldn't be here if there wasn't at least one overload\n    var overloadPrototypes = assert(instance.prototype.overloads);\n\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var parameterTypes = instance.signature.parameterTypes;\n    var returnType = instance.signature.returnType;\n    var numParameters = parameterTypes.length;\n    var tempIndex = 1 + parameterTypes.length; // incl. `this`\n\n    // Switch over this's rtId and map it to the respective overload\n    var builder = new SwitchBuilder(this.module,\n      module.load(4, false,\n        module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          module.local_get(0, nativeSizeType),\n          nativeSizeType == NativeType.I64\n            ? module.i64(8) // rtId offset = -8\n            : module.i32(8)\n        ),\n        NativeType.I32\n      )\n    );\n\n    // A method's `overloads` property contains its unbound overload prototypes\n    // so we first have to find the concrete classes it became bound to, obtain\n    // their bound prototypes and make sure these are resolved and compiled as\n    // we are going to call them conditionally based on this's class id.\n    for (let _values = Set_values(overloadPrototypes), i = 0, k = _values.length; i < k; ++i) {\n      let unboundOverloadPrototype = _values[i];\n      assert(!unboundOverloadPrototype.isBound);\n      let unboundOverloadParent = unboundOverloadPrototype.parent;\n      let isProperty = unboundOverloadParent.kind == ElementKind.PROPERTY_PROTOTYPE;\n      let classInstances: Map<string,Class> | null;\n      if (isProperty) {\n        let propertyParent = (<PropertyPrototype>unboundOverloadParent).parent;\n        assert(propertyParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>propertyParent).instances;\n      } else {\n        assert(unboundOverloadParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>unboundOverloadParent).instances;\n      }\n      if (classInstances) {\n        for (let _values = Map_values(classInstances), j = 0, l = _values.length; j < l; ++j) {\n          let classInstance = _values[j];\n          let overloadInstance: Function | null;\n          if (isProperty) {\n            let boundProperty = assert(classInstance.members!.get(unboundOverloadParent.name));\n            assert(boundProperty.kind == ElementKind.PROPERTY_PROTOTYPE);\n            let boundPropertyInstance = this.resolver.resolveProperty(<PropertyPrototype>boundProperty);\n            if (!boundPropertyInstance) continue;\n            if (instance.is(CommonFlags.GET)) {\n              overloadInstance = boundPropertyInstance.getterInstance;\n            } else {\n              assert(instance.is(CommonFlags.SET));\n              overloadInstance = boundPropertyInstance.setterInstance;\n            }\n          } else {\n            let boundPrototype = assert(classInstance.members!.get(unboundOverloadPrototype.name));\n            assert(boundPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            overloadInstance = this.resolver.resolveFunction(<FunctionPrototype>boundPrototype, instance.typeArguments);\n          }\n          if (!overloadInstance || !this.compileFunction(overloadInstance)) continue;\n          let overloadType = overloadInstance.type;\n          let originalType = instance.type;\n          if (!overloadType.isAssignableTo(originalType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              overloadInstance.identifierNode.range, overloadType.toString(), originalType.toString()\n            );\n            continue;\n          }\n          // TODO: additional optional parameters are not permitted by `isAssignableTo` yet\n          let overloadSignature = overloadInstance.signature;\n          let overloadParameterTypes = overloadSignature.parameterTypes;\n          let overloadNumParameters = overloadParameterTypes.length;\n          let paramExprs = new Array<ExpressionRef>(1 + overloadNumParameters);\n          paramExprs[0] = module.local_get(0, nativeSizeType); // this\n          for (let n = 1; n <= numParameters; ++n) {\n            paramExprs[n] = module.local_get(n, parameterTypes[n - 1].toNativeType());\n          }\n          let needsVarargsStub = false;\n          for (let n = numParameters; n < overloadNumParameters; ++n) {\n            // TODO: inline constant initializers and skip varargs stub\n            paramExprs[1 + n] = this.makeZero(overloadParameterTypes[n], overloadInstance.declaration);\n            needsVarargsStub = true;\n          }\n          let calledName = needsVarargsStub\n            ? this.ensureVarargsStub(overloadInstance).internalName\n            : overloadInstance.internalName;\n          let nativeReturnType = overloadSignature.returnType.toNativeType();\n          let stmts = new Array<ExpressionRef>();\n          if (needsVarargsStub) {\n            this.ensureArgumentsLength();\n            // Safe to prepend since paramExprs are local.get's\n            stmts.push(module.global_set(BuiltinNames.argumentsLength, module.i32(numParameters)));\n          }\n          if (returnType == Type.void) {\n            stmts.push(\n              module.call(calledName, paramExprs, nativeReturnType)\n            );\n            stmts.push(\n              module.return()\n            );\n          } else {\n            stmts.push(\n              module.return(\n                module.call(calledName, paramExprs, nativeReturnType)\n              )\n            );\n          }\n          builder.addCase(classInstance.id, stmts);\n          // Also alias each extendee inheriting this exact overload\n          let extendees = classInstance.getAllExtendees(\n            isProperty\n              ? unboundOverloadParent.name\n              : instance.prototype.name\n          );\n          for (let _values = Set_values(extendees), a = 0, b = _values.length; a < b; ++a) {\n            let extendee = _values[a];\n            builder.addCase(extendee.id, stmts);\n          }\n        }\n      }\n    }\n\n    // Call the original function if no other id matches and the method is not\n    // abstract or part of an interface. Note that doing so will not catch an\n    // invalid id, but can reduce code size significantly since we also don't\n    // have to add branches for extendees inheriting the original function.\n    var body: ExpressionRef;\n    if (instance.prototype.bodyNode) {\n      let paramExprs = new Array<ExpressionRef>(numParameters);\n      paramExprs[0] = module.local_get(0, nativeSizeType); // this\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        paramExprs[1 + i] = module.local_get(1 + i, parameterTypes[i].toNativeType());\n      }\n      body = module.call(instance.internalName, paramExprs, returnType.toNativeType());\n\n    // Otherwise trap\n    } else {\n      body = module.unreachable();\n    }\n\n    // Create the virtual stub function\n    var ref = stub.ref;\n    if (ref) module.removeFunction(stub.internalName);\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      [ NativeType.I32 ],\n      module.block(null, [\n        builder.render(tempIndex),\n        body\n      ], returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef, type: Type): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef, type: Type): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(\n    /** New value being assigned. */\n    newExpr: ExpressionRef,\n    /** The type of the new expression. */\n    newType: Type,\n    /** Old value being replaced. */\n    oldExpr: ExpressionRef,\n    /** The type of the old expression. */\n    oldType: Type,\n    /** Whether the new value is already retained. */\n    alreadyRetained: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr, oldType),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType), newType)\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType), oldType)\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChildAt(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr, type), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType()),\n                local.type\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        // TODO: for (let local of scopedLocals.values()) {\n        for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n          let local = unchecked(_values[i]);\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      let localsByIndex = flow.parentFunction.localsByIndex;\n      for (let i = 0, k = localsByIndex.length; i < k; ++i) {\n        let local = unchecked(localsByIndex[i]);\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType()),\n          local.type\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      if (!instance.is(CommonFlags.VIRTUAL)) {\n        assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n        let inlineStack = this.inlineStack;\n        if (inlineStack.includes(instance)) {\n          this.warning(\n            DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n            reportNode.range, instance.internalName\n          );\n        } else {\n          inlineStack.push(instance);\n          let expr: ExpressionRef;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let theOperands = assert(operands);\n            assert(theOperands.length);\n            expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n          } else {\n            expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n          }\n          let returnType = this.currentType;\n          if (returnType.isManaged) {\n            if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          inlineStack.pop();\n          return expr;\n        }\n      } else {\n        this.warning(\n          DiagnosticCode.Function_0_is_virtual_and_will_not_be_inlined,\n          reportNode.range, instance.internalName\n        );\n      }\n    }\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = instance.signature.parameterTypes;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i], instance.declaration));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!instance.is(CommonFlags.MODULE_IMPORT)) {\n          let original = instance;\n          instance = this.ensureVarargsStub(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          // We know the last operand is optional and omitted, so inject setting\n          // ~argumentsLength into that operand, which is always safe.\n          let lastOperand = operands[maxOperands - 1];\n          assert(!(getSideEffects(lastOperand) & SideEffects.WritesGlobal));\n          let lastOperandType = parameterTypes[maxArguments - 1];\n          operands[maxOperands - 1] = module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            lastOperand\n          ], lastOperandType.toNativeType());\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr, returnType);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureArgumentsLength();\n          return expr;\n        }\n      }\n    }\n\n    // Call the virtual stub with the vtable if the function has overloads\n    if (instance.is(CommonFlags.VIRTUAL) && !reportNode.isAccessOnSuper) {\n      instance = this.ensureVirtualStub(instance);\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, reportNode, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    reportNode: Node,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = signature.parameterTypes;\n    var returnType = signature.returnType;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i], reportNode));\n      }\n    }\n\n    if (this.options.isWasm64) {\n      indexArg = module.unary(UnaryOp.WrapI64, indexArg);\n    }\n\n    // We might be calling a varargs stub here, even if all operands have been\n    // provided, so we must set `argumentsLength` in any case. Inject setting it\n    // into the index argument, which becomes executed last after any operands.\n    this.ensureArgumentsLength();\n    var nativeSizeType = this.options.nativeSizeType;\n    if (getSideEffects(indexArg) & SideEffects.WritesGlobal) {\n      let flow = this.currentFlow;\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(indexArg));\n      indexArg = module.block(null, [\n        module.local_set(temp.index, indexArg),\n        module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n    } else { // simplify\n      indexArg = module.block(null, [\n        module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n        indexArg\n      ], nativeSizeType);\n    }\n    var expr = module.call_indirect(\n      nativeSizeType == NativeType.I64\n        ? module.unary(UnaryOp.WrapI64,\n            module.load(8, false, indexArg, NativeType.I64)\n          )\n        : module.load(4, false, indexArg, NativeType.I32),\n      operands,\n      signature.nativeParams,\n      signature.nativeResults\n    );\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      let classReference = targetType.getClassOrWrapper(this.program);\n      if (classReference) {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (indexedGet) {\n          let thisType = assert(indexedGet.signature.thisType);\n          let thisArg = this.compileExpression(targetExpression, thisType,\n            Constraints.CONV_IMPLICIT\n          );\n          if (!isUnchecked && this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n              expression.range\n            );\n          }\n          return this.compileCallDirect(indexedGet, [\n            expression.elementExpression\n          ], expression, thisArg, constraints);\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = uniqueMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      instance = new Function(\n        prototype.name,\n        prototype,\n        null,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n    }\n\n    var offset = this.ensureRuntimeFunction(instance); // reports\n    return this.options.isWasm64\n      ? this.module.i64(i64_low(offset), i64_high(offset))\n      : this.module.i32(i64_low(offset));\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.isReference) {\n          let classReference = contextualType.getClass();\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.getSignature();\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          return this.makeZero(contextualType, expression);\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        let thisType = actualFunction.signature.thisType;\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n          this.currentType = this.options.usizeType;\n          return module.unreachable();\n        }\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR) && !(constraints & Constraints.IS_THIS)) {\n          let parent = actualFunction.parent;\n          assert(parent.kind == ElementKind.CLASS);\n          this.checkFieldInitialization(<Class>parent, expression);\n        }\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n        flow.set(FlowFlags.ACCESSES_THIS);\n        this.currentType = thisType;\n        return module.local_get(thisLocal.index, thisType.toNativeType());\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.getClass());\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (this.pendingElements.has(local)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            local.internalName\n          );\n          this.currentType = localType;\n          return module.unreachable();\n        }\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.isNullableReference && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            expression.range,\n            \"Closures\"\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let typeParameterNodes = functionPrototype.typeParameterNodes;\n\n        if (typeParameterNodes !== null && typeParameterNodes.length != 0) {\n          this.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            expression.range, typeParameterNodes.length.toString(), \"0\"\n          );\n          return module.unreachable();\n        }\n\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          uniqueMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.isExternalReference) {\n          this.currentType = Type.funcref;\n          return module.ref_func(functionInstance.internalName);\n        }\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      uniqueMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <value> - must be exact\n    if (expectedType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(actualType == expectedType ? 1 : 0));\n    }\n\n    // <value> instanceof <nonValue> - always false\n    if (actualType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(0));\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.isNullableReference && !expectedType.isNullableReference) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType, expression.expression)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.maybeDropCondition(expr, module.i32(1));\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.getClass();\n    if (classReference) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.isNullableReference) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType, expression.expression)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.maybeDropCondition(expr, module.i32(1));\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      case LiteralKind.REGEXP: {\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Regular expressions\"\n        );\n        this.currentType = contextualType;\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    let contextualClass = contextualType.getClass();\n    if (contextualClass !== null && contextualClass.extends(program.staticArrayPrototype)) {\n      return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = !elementType.isExternalReference;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(<Expression>elementExpression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __allocArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr, arrayType);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32(arrayInstance.id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], expression),\n          arrayType\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStartMember).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr, elementType);\n        }\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    var arrayInstance = assert(contextualType.getClass());\n    var arrayType = arrayInstance.type;\n    var typeArguments = assert(arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype));\n    var elementType = typeArguments[0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = !elementType.isExternalReference;\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(elementExpression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.runtimeHeaderSize));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        if (constraints & Constraints.WILL_RETAIN) {\n          this.skippedAutoreleases.add(expr);\n        } else {\n          // not necessary since this is static data anyway\n          // expr = this.makeAutorelease(expr, arrayType, flow);\n        }\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __allocBuffer(bufferSize, id, buffer)\n        let expr = this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id),\n            isWasm64\n              ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n              : module.i32(i64_low(bufferAddress))\n          ], expression),\n          program.arrayBufferInstance.type\n        );\n        if (arrayType.isManaged) {\n          if (constraints & Constraints.WILL_RETAIN) {\n            this.skippedAutoreleases.add(expr);\n          } else {\n            expr = this.makeAutorelease(expr, arrayType);\n          }\n        }\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id)\n          ], expression),\n          program.arrayBufferInstance.type\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr, elementType);\n        }\n      }\n      // store<T>(tempThis, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempThis.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // Check that contextual type is a class (TODO: hidden class for interfaces?)\n    var classReference = contextualType.getClass();\n    if (!classReference) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n    var classType = classReference.type;\n    this.currentType = classType.nonNullableType;\n    if (classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.range\n      );\n      return module.unreachable();\n    }\n\n    // Check that the class is compatible with object literals\n    var ctorPrototype = classReference.prototype.constructorPrototype;\n    if (ctorPrototype) {\n      this.errorRelated(\n        DiagnosticCode.Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal,\n        expression.range, ctorPrototype.identifierNode.range, classType.toString()\n      );\n      return module.unreachable();\n    }\n\n    var isManaged = classType.isManaged;\n    if (!isManaged) {\n      this.checkUnsafe(expression, findDecorator(DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>();\n    var flow = this.currentFlow;\n    var tempLocal = isManaged\n      ? flow.getAutoreleaseLocal(classType)\n      : flow.getTempLocal(classType);\n    var nativeClassType = classType.toNativeType();\n    assert(numNames == values.length);\n\n    // Assume all class fields will be omitted, and add them to our omitted list\n    var omittedFields = new Set<Field>();\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberKey = _keys[i];\n        let member = assert(members.get(memberKey));\n        if (member !== null && member.kind == ElementKind.FIELD) {\n          omittedFields.add(<Field>member); // incl. private/protected\n        }\n      }\n    }\n\n    // Iterate through the members defined in our expression\n    for (let i = 0; i < numNames; ++i) {\n      let memberName = names[i].text;\n      let member: DeclaredElement;\n      if (!members || !members.has(memberName) || (member = assert(members.get(memberName))).kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Property_0_is_private_and_only_accessible_within_class_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n\n      let expr = this.compileExpression(values[i], fieldType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n      if (fieldType.isManaged && !this.skippedAutoreleases.has(expr)) {\n        expr = this.makeRetain(expr, fieldType);\n      }\n      exprs.push(\n        module.store( // TODO: handle setters as well\n          fieldType.byteSize,\n          module.local_get(tempLocal.index, nativeClassType),\n          expr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        )\n      );\n\n      // This member is no longer omitted, so delete from our omitted fields\n      omittedFields.delete(fieldInstance);\n    }\n    this.currentType = classType.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // Check remaining omitted fields\n    for (let _values = Set_values(omittedFields), j = 0, l = _values.length; j < l; ++j) {\n      let fieldInstance = _values[j];\n      let fieldType = fieldInstance.type;\n\n      if (fieldInstance.initializerNode) {\n        continue; // set by generated ctor\n      }\n\n      if (fieldType.isReference) {\n        if (!fieldType.isNullableReference) {\n          this.error(\n            DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n            expression.range, fieldInstance.name, \"<object>\", classType.toString()\n          );\n          hasErrors = true;\n          continue;\n        }\n      }\n\n      switch (fieldType.kind) {\n        // Number Types (and Number alias types)\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL:\n        case TypeKind.F32:\n        case TypeKind.F64: {\n          exprs.push(\n            module.store( // TODO: handle setters as well\n              fieldType.byteSize,\n              module.local_get(tempLocal.index, nativeClassType),\n              this.makeZero(fieldType, expression),\n              fieldType.toNativeType(),\n              fieldInstance.memoryOffset\n            )\n          );\n          continue;\n        }\n      }\n\n      // Otherwise error\n      this.error(\n        DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n        expression.range, fieldInstance.name, \"<object>\", classType.toString()\n      );\n      hasErrors = true;\n    }\n    if (hasErrors) return module.unreachable();\n\n    // generate the default constructor\n    var ctor = this.ensureConstructor(classReference, expression);\n    // note that this is not checking field initialization within the ctor, but\n    // instead checks conditions above with provided fields taken into account.\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs.unshift(\n      module.local_set(tempLocal.index,\n        this.compileInstantiate(ctor, [], Constraints.WILL_RETAIN, expression)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs.push(\n      module.local_get(tempLocal.index, nativeClassType)\n    );\n\n    if (!isManaged) flow.freeTempLocal(tempLocal);\n    this.currentType = classType.nonNullableType;\n    return module.flatten(exprs, nativeClassType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    if (target.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        uniqueMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        uniqueMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var ctor = this.ensureConstructor(classInstance, expression);\n    if (!ctor.hasDecorator(DecoratorFlags.INLINE)) {\n      // Inlined ctors haven't been compiled yet and are checked upon inline\n      // compilation of their body instead.\n      this.checkFieldInitialization(classInstance, expression);\n    }\n    return this.compileInstantiate(ctor, expression.args, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(\n    /** Class wanting a constructor. */\n    classInstance: Class,\n    /** Report node. */\n    reportNode: Node\n  ): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // shortcut if already compiled\n      if (instance.is(CommonFlags.COMPILED)) return instance;\n      // do not attempt to compile if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n    } else {\n      // clone base constructor if a derived class\n      let baseClass = classInstance.base;\n      let contextualTypeArguments = uniqueMap(classInstance.contextualTypeArguments);\n      if (baseClass) {\n        let baseCtor = this.ensureConstructor(baseClass, reportNode);\n        this.checkFieldInitialization(baseClass, reportNode);\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance,\n            // declaration is important, i.e. to access optional parameter initializers\n            (<FunctionDeclaration>baseCtor.declaration).clone()\n          ),\n          null,\n          baseCtor.signature,\n          contextualTypeArguments\n        );\n\n      // otherwise make a default constructor\n      } else {\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance, // bound\n            this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n              CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n            )\n          ),\n          null,\n          new Signature(this.program, null, classInstance.type, classInstance.type),\n          contextualTypeArguments\n        );\n        let members = classInstance.members;\n        if (!members) classInstance.members = members = new Map();\n        members.set(\"constructor\", instance.prototype);\n      }\n\n      instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n      instance.set(CommonFlags.COMPILED);\n      instance.prototype.setResolvedInstance(\"\", instance);\n      classInstance.constructorInstance = instance;\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n\n      // generate body\n      let signature = instance.signature;\n      let module = this.module;\n      let nativeSizeType = this.options.nativeSizeType;\n      let stmts = new Array<ExpressionRef>();\n\n      // {\n      //   if (!this) this = <ALLOC>\n      //   IF_DERIVED: this = super(this, ...args)\n      //   this.a = X\n      //   this.b = Y\n      //   return this\n      // }\n      let allocExpr = this.makeAllocation(classInstance);\n      let classType = classInstance.type;\n      if (classType.isManaged) allocExpr = this.makeRetain(allocExpr, classType);\n      stmts.push(\n        module.if(\n          module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n            module.local_get(0, nativeSizeType)\n          ),\n          module.local_set(0, allocExpr)\n        )\n      );\n      if (baseClass) {\n        let parameterTypes = signature.parameterTypes;\n        let numParameters = parameterTypes.length;\n        let operands = new Array<ExpressionRef>(1 + numParameters);\n        operands[0] = module.local_get(0, nativeSizeType);\n        for (let i = 1; i <= numParameters; ++i) {\n          operands[i] = module.local_get(i, parameterTypes[i - 1].toNativeType());\n        }\n        stmts.push(\n          module.local_set(0,\n            this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n          )\n        );\n      }\n      this.makeFieldInitializationInConstructor(classInstance, stmts);\n      let body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n      flow.freeScopedLocals();\n      this.currentFlow = previousFlow;\n\n      // make the function\n      let locals = instance.localsByIndex;\n      let varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n      let numOperands = 1 + signature.parameterTypes.length;\n      let numLocals = locals.length;\n      if (numLocals > numOperands) {\n        for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n      }\n      let funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n      instance.finalize(module, funcRef);\n    }\n\n    return instance;\n  }\n\n  /** Checks that all class fields have been initialized. */\n  checkFieldInitialization(classInstance: Class, relatedNode: Node | null = null): void {\n    if (classInstance.didCheckFieldInitialization) return;\n    classInstance.didCheckFieldInitialization = true;\n    var ctor = assert(classInstance.constructorInstance);\n    this.checkFieldInitializationInFlow(classInstance, ctor.flow, relatedNode);\n  }\n\n  /** Checks that all class fields have been initialized in the specified flow. */\n  checkFieldInitializationInFlow(classInstance: Class, flow: Flow, relatedNode: Node | null = null): void {\n    var members = classInstance.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let element = _values[i];\n        if (element.kind == ElementKind.FIELD && element.parent == classInstance) {\n          let field = <Field>element;\n          if (!field.initializerNode && !flow.isThisFieldFlag(field, FieldFlags.INITIALIZED)) {\n            if (!field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n              if (relatedNode) {\n                this.errorRelated(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  relatedNode.range,\n                  field.internalName\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  field.internalName\n                );\n              }\n            }\n          } else if (field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n            if (field.type.isReference) {\n              this.warning( // involves a runtime check\n                DiagnosticCode.Property_0_is_always_assigned_before_being_used,\n                field.identifierNode.range,\n                field.internalName\n              );\n            } else {\n              this.pedantic( // is a nop anyway\n                DiagnosticCode.Unnecessary_definite_assignment,\n                field.identifierNode.range\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  compileInstantiate(\n    /** Constructor to call. */\n    ctorInstance: Function,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(ctorInstance.is(CommonFlags.CONSTRUCTOR));\n    var parent = ctorInstance.parent;\n    assert(parent.kind == ElementKind.CLASS);\n    var classInstance = <Class>parent;\n    if (classInstance.type.isUnmanaged || ctorInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctorInstance,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType, reportNode),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly WILL_DROP\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        thisExpression = assert(thisExpression);\n        let thisExpr = this.compileExpression(\n          thisExpression,\n          (<Class>fieldParent).type,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let thisType = this.currentType;\n        if (\n          flow.actualFunction.is(CommonFlags.CONSTRUCTOR) &&\n          thisExpression.kind == NodeKind.THIS &&\n          !flow.isThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED) &&\n          !fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED)\n        ) {\n          this.errorRelated(\n            DiagnosticCode.Property_0_is_used_before_being_assigned,\n            expression.range,\n            fieldInstance.identifierNode.range,\n            fieldInstance.internalName\n          );\n        }\n        if (thisType.isNullableReference) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        if (!fieldInstance.is(CommonFlags.COMPILED)) {\n          fieldInstance.set(CommonFlags.COMPILED);\n          let typeNode = fieldInstance.typeNode;\n          if (typeNode) this.checkTypeSupported(fieldInstance.type, typeNode);\n        }\n        this.currentType = fieldType;\n        let ret = module.load(\n          fieldType.byteSize,\n          fieldType.isSignedIntegerValue,\n          thisExpr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        );\n        if (fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED) && fieldType.isReference && !fieldType.isNullableReference) {\n          ret = this.makeRuntimeNonNullCheck(ret, fieldType, expression);\n        }\n        return ret;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = this.resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (getterInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(getterInstance, [], expression, thisArg);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n        if (!functionInstance) return module.unreachable();\n        if (!this.compileFunction(functionInstance)) return module.unreachable();\n        this.currentType = functionInstance.type;\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(expression.condition, Type.bool),\n      this.currentType,\n      expression.condition\n    );\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = this.evaluateCondition(condExpr);\n    if (condKind == ConditionKind.TRUE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifThen, ctxType));\n    }\n    if (condKind == ConditionKind.FALSE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifElse, ctxType));\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr, ifThenType);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr, ifElseType);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr, ifThenType);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr, ifElseType);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (isInstance) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PLUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MINUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType, expression.operand),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          // fall back to compare by value\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType, expression.operand));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.isFloatValue\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        expr = this.convertExpression(expr,\n          this.currentType, this.currentType.intType,\n          false, false,\n          expression.operand\n        );\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER: break; // ignore error: typeof doesntExist -> undefined\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) { // access on non-object\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            // fall-through\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto); // may trigger an error\n            expr = this.convertExpression(expr, this.currentType, Type.void, true, false, operand);\n          }\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.isReference) {\n              let signatureReference = type.getSignature();\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.getClass();\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"externref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isNumericValue) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  /** Checks whether a particular feature is enabled. */\n  checkFeatureEnabled(feature: Feature, reportNode: Node): bool {\n    if (!this.options.hasFeature(feature)) {\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        reportNode.range, featureToString(feature)\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Checks whether a particular type is supported. */\n  checkTypeSupported(type: Type, reportNode: Node): bool {\n    switch (type.kind) {\n      case TypeKind.V128: return this.checkFeatureEnabled(Feature.SIMD, reportNode);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode);\n      case TypeKind.EXNREF: {\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode)\n            && this.checkFeatureEnabled(Feature.EXCEPTION_HANDLING, reportNode);\n      }\n      case TypeKind.ANYREF: {\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode)\n            && this.checkFeatureEnabled(Feature.GC, reportNode);\n      }\n    }\n    let classReference = type.getClass();\n    if (classReference) {\n      do {\n        let typeArguments = classReference.typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n              return false;\n            }\n          }\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    } else {\n      let signatureReference = type.getSignature();\n      if (signatureReference) {\n        let thisType = signatureReference.thisType;\n        if (thisType) {\n          if (!this.checkTypeSupported(thisType, reportNode)) {\n            return false;\n          }\n        }\n        let parameterTypes = signatureReference.parameterTypes;\n        for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n          if (!this.checkTypeSupported(parameterTypes[i], reportNode)) {\n            return false;\n          }\n        }\n        let returnType = signatureReference.returnType;\n        if (!this.checkTypeSupported(returnType, reportNode)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Checks whether a particular function signature is supported. */\n  checkSignatureSupported(signature: Signature, reportNode: FunctionTypeNode): bool {\n    var supported = true;\n    var explicitThisType = reportNode.explicitThisType;\n    if (explicitThisType) {\n      if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n        supported = false;\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (!this.checkTypeSupported(parameterTypes[i], reportNode.parameters[i])) {\n        supported = false;\n      }\n    }\n    if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n      supported = false;\n    }\n    return supported;\n  }\n\n  /** Evaluates a boolean condition, determining whether it is TRUE, FALSE or UNKNOWN. */\n  evaluateCondition(expr: ExpressionRef): ConditionKind {\n    var module = this.module;\n    var evaled = module.runExpression(expr, ExpressionRunnerFlags.Default);\n    if (evaled) {\n      return getConstValueI32(evaled)\n        ? ConditionKind.TRUE\n        : ConditionKind.FALSE;\n    }\n    return ConditionKind.UNKNOWN;\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF:\n        return module.ref_null(type.toNativeType());\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u32>(x) & 0x7FFFFFFF) - 1 <= 0x7F800000 - 1\n        //\n        // and finally:\n        // (reinterpret<u32>(x) << 1) - (1 << 1) <= ((0x7F800000 - 1) << 1)\n        return module.binary(BinaryOp.LeU32,\n          module.binary(BinaryOp.SubI32,\n            module.binary(BinaryOp.ShlI32,\n              module.unary(UnaryOp.ReinterpretF32, expr),\n              module.i32(1)\n            ),\n            module.i32(2) // 1 << 1\n          ),\n          module.i32(0xFEFFFFFE) // (0x7F800000 - 1) << 1\n        );\n      }\n      case TypeKind.F64: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u64>(x) & 0x7FFFFFFFFFFFFFFF) - 1 <= 0x7FF0000000000000 - 1\n        //\n        // and finally:\n        // (reinterpret<u64>(x) << 1) - (1 << 1) <= ((0x7FF0000000000000 - 1) << 1)\n        return module.binary(BinaryOp.LeU64,\n          module.binary(BinaryOp.SubI64,\n            module.binary(BinaryOp.ShlI64,\n              module.unary(UnaryOp.ReinterpretF64, expr),\n              module.i64(1)\n            ),\n            module.i64(2) // 1 << 1\n          ),\n          module.i64(0xFFFFFFFE, 0xFFDFFFFF) // (0x7FF0000000000000 - 1) << 1\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF:{\n        return module.ref_is_null(expr);\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.nextMemoryOffset)\n        : module.i32(classInstance.nextMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? flow.lookupLocal(CommonNames.this_)!.index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(fieldType, typeNode);\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? flow.lookupLocal(field.name)!.index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr, fieldType);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr, fieldType);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType, fieldPrototype.declaration);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return this.module.unreachable();\n\n    var stringInstance = program.stringInstance;\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type, codeLocation);\n    }\n\n    return this.makeStaticAbort(messageArg, codeLocation);\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeStaticAbort(\n    /** Message argument of type string. May be zero. */\n    messageExpr: ExpressionRef,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var filenameExpr = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    var range = codeLocation.range;\n    var source = range.source;\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageExpr,\n          filenameExpr,\n          module.i32(source.lineAt(range.start)),\n          module.i32(source.columnAt())\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeStaticAbort(this.ensureStaticString(\"unexpected null\"), reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    this.currentType = type.nonNullableType;\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.isReference && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(toType.classReference!.id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeStaticAbort(this.ensureStaticString(\"unexpected upcast\"), reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    this.currentType = toType;\n    return expr;\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.args;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented_0 = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Low_memory_limit_exceeded_by_static_data_0_1 = 104,\n  Module_requires_at_least_0_pages_of_initial_memory = 105,\n  Module_requires_at_least_0_pages_of_maximum_memory = 106,\n  Shared_memory_requires_maximum_memory_to_be_defined = 107,\n  Shared_memory_requires_feature_threads_to_be_enabled = 108,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_final_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Array_literal_expected = 227,\n  Function_0_is_virtual_and_will_not_be_inlined = 228,\n  Property_0_only_has_a_setter_and_is_missing_a_getter = 229,\n  _0_keyword_cannot_be_used_here = 230,\n  A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final = 231,\n  Exported_generic_function_or_class_has_no_concrete_instances = 232,\n  Property_0_is_always_assigned_before_being_used = 233,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Explicitly_returning_constructor_drops_this_allocation = 905,\n  Unnecessary_definite_assignment = 906,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  An_interface_can_only_extend_an_interface = 2312,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Property_0_is_private_and_only_accessible_within_class_1 = 2341,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  Getter_and_setter_accessors_do_not_agree_in_visibility = 2379,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Overload_signatures_must_all_be_public_private_or_protected = 2385,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  This_overload_signature_is_not_compatible_with_its_implementation_signature = 2394,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_class_can_only_implement_an_interface = 2422,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses = 2445,\n  Variable_0_used_before_its_declaration = 2448,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Cannot_create_an_instance_of_an_abstract_class = 2511,\n  Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2 = 2515,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned = 2564,\n  Property_0_is_used_before_being_assigned = 2565,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Property_0_is_missing_in_type_1_but_required_in_type_2 = 2741,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented: {0}\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Low memory limit exceeded by static data: {0} > {1}\";\n    case 105: return \"Module requires at least '{0}' pages of initial memory.\";\n    case 106: return \"Module requires at least '{0}' pages of maximum memory.\";\n    case 107: return \"Shared memory requires maximum memory to be defined.\";\n    case 108: return \"Shared memory requires feature 'threads' to be enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is final and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Class '{0}' cannot declare a constructor when instantiated from an object literal.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 227: return \"Array literal expected.\";\n    case 228: return \"Function '{0}' is virtual and will not be inlined.\";\n    case 229: return \"Property '{0}' only has a setter and is missing a getter.\";\n    case 230: return \"'{0}' keyword cannot be used here.\";\n    case 231: return \"A class with a constructor explicitly returning something else than 'this' must be '@final'.\";\n    case 232: return \"Exported generic function or class has no concrete instances.\";\n    case 233: return \"Property '{0}' is always assigned before being used.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 905: return \"Explicitly returning constructor drops 'this' allocation.\";\n    case 906: return \"Unnecessary definite assignment.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2312: return \"An interface can only extend an interface.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2341: return \"Property '{0}' is private and only accessible within class '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2379: return \"Getter and setter accessors do not agree in visibility.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2385: return \"Overload signatures must all be public, private or protected.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2394: return \"This overload signature is not compatible with its implementation signature.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2422: return \"A class can only implement an interface.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2445: return \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\";\n    case 2448: return \"Variable '{0}' used before its declaration.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2511: return \"Cannot create an instance of an abstract class.\";\n    case 2515: return \"Non-abstract class '{0}' does not implement inherited abstract member '{1}' from '{2}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2564: return \"Property '{0}' has no initializer and is not assigned in the constructor before 'this' is used or returned.\";\n    case 2565: return \"Property '{0}' is used before being assigned.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2741: return \"Property '{0}' is missing in type '{1}' but required in type '{2}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter,\n  DiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureNode,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Represents a dependee. */\nclass Dependee {\n  constructor(\n    public source: Source,\n    public reportNode: Node\n  ) {}\n}\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source | null = null;\n  /** Map of dependees being depended upon by a source, by path. */\n  dependees: Map<string, Dependee> = new Map();\n  /** An array of parsed sources. */\n  sources: Source[];\n\n  /** Constructs a new parser. */\n  constructor(\n    diagnostics: DiagnosticMessage[] | null = null,\n    sources: Source[] | null = null\n  ) {\n    super(diagnostics);\n    this.sources = sources ? sources : new Array<Source>();\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file, or `null` to indicate not found. */\n    text: string | null,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with file extensions\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(path);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // check if this is an error\n    if (text === null) {\n      let dependees = this.dependees;\n      let dependee: Dependee | null = null;\n      if (dependees.has(internalPath)) dependee = assert(dependees.get(internalPath));\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        dependee\n          ? dependee.reportNode.range\n          : null,\n        path\n      );\n      return;\n    }\n\n    // create the source element\n    var source = new Source(\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER,\n      normalizedPath,\n      text\n    );\n\n    this.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, this.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) {\n        statements.push(statement);\n      } else {\n        this.skipStatement(tn);\n      }\n    }\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart = 0;\n    var exportEnd = 0;\n    var defaultStart = 0;\n    var defaultEnd = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart = 0;\n    var declareEnd = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        let abstractStart = tn.tokenPos;\n        let abstractEnd = tn.pos;\n        let next = tn.peek(true);\n        if (tn.nextTokenOnNewLine) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        }\n        if (next != Token.CLASS) {\n          if (next == Token.INTERFACE) {\n            this.error(\n              DiagnosticCode._abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration,\n              tn.range(abstractStart, abstractEnd)\n            );\n          }\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the path of the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var dependees = this.dependees;\n    if (dependees.has(dependent)) {\n      let dependee = assert(dependees.get(dependent));\n      return dependee.source.internalPath;\n    }\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'null'\n    } else if (token == Token.NULL) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"null\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, false, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... | null\n    while (tn.skip(Token.BAR)) {\n      if (tn.skip(Token.NULL)) {\n        type.isNullable = true;\n      } else {\n        let notNullStart = tn.pos;\n        let notNull = this.parseType(tn, false, true);\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            notNull ? notNull.range : tn.range(notNullStart), \"null\"\n          );\n        }\n        return null;\n      }\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let paramStart = -1;\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          paramStart = tn.tokenPos;\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn, false);\n            if (!type) return null;\n            if (type.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                type.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>type;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = Node.createParameter(kind, name, type, null, tn.range(paramStart, tn.pos));\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = Node.createParameter(kind, name, Node.createOmittedType(tn.range(tn.pos)), null, tn.range(paramStart, tn.pos));\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = Node.createParameter(\n            firstParamKind,\n            firstParamNameNoType,\n            Node.createOmittedType(firstParamNameNoType.range.atEnd),\n            null,\n            firstParamNameNoType.range\n          );\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    if (!parameters) parameters = [];\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var declarations = new Array<VariableDeclaration>();\n    do {\n      let declaration = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!declaration) return null;\n      declarations.push(declaration);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(decorators, declarations, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITELY_ASSIGNED;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if (initializer !== null && (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range\n      );\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      parentDecorators,\n      flags,\n      type,\n      initializer,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      decorators,\n      flags,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      parentFlags,\n      value,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>type;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>type;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        identifier,\n        type,\n        initializer,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      decorators,\n      flags,\n      typeParameters,\n      signature,\n      body,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n      // or at '(' of arrow function:\n      //  Parameters (':' Type)?\n      //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, this.parseParametersThis, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    explicitThis: NamedTypeNode | null,\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      explicitThis,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      signature,\n      body,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let type = this.parseType(tn);\n      if (!type) return null;\n      if (type.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          type.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>type;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        null,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(member instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      null,\n      null,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(declaration instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): Node | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n    var startPos = 0;\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      startPos = tn.tokenPos;\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface && decorators !== null) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      } else {\n        flags |= CommonFlags.PUBLIC;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      } else {\n        flags |= CommonFlags.PRIVATE;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      } else {\n        flags |= CommonFlags.PROTECTED;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      } else {\n        flags |= CommonFlags.STATIC;\n        staticStart = tn.tokenPos;\n        staticEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface || !parent.is(CommonFlags.ABSTRACT)) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        } else {\n          flags |= CommonFlags.ABSTRACT;\n          abstractStart = tn.tokenPos;\n          abstractEnd = tn.pos;\n        }\n        if (!startPos) startPos = tn.tokenPos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart = 0;\n    var readonlyEnd = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n        if (!startPos) startPos = readonlyStart;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart = 0;\n    var getEnd = 0;\n    var isSetter = false;\n    var setStart = 0;\n    var setEnd = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          getStart = tn.tokenPos;\n          getEnd = tn.pos;\n          if (!startPos) startPos = getStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (!startPos) startPos = setStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (!startPos) startPos = tn.tokenPos;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var isGetterOrSetter = isGetter || isSetter;\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!isGetterOrSetter && tn.skip(Token.OPENBRACKET)) {\n        if (!startPos) startPos = tn.tokenPos;\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignature(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetterOrSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.type,\n              null, // initialized via parameter\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      } else if (name.text == \"constructor\") {\n        this.error(\n          DiagnosticCode._0_keyword_cannot_be_used_here,\n          name.range, \"constructor\"\n        );\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, isSetter || name.kind == NodeKind.CONSTRUCTOR);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        } else if (isInterface) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!isInterface && !(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT))) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        decorators,\n        flags,\n        typeParameters,\n        signature,\n        body,\n        tn.range(startPos, tn.pos)\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetterOrSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITELY_ASSIGNED;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if (\n        (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0 &&\n        (isInterface || initializer !== null || (flags & CommonFlags.STATIC) != 0)\n      ) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        decorators,\n        flags,\n        type,\n        initializer,\n        range\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignature(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureNode | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignature(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          decorators,\n          flags,\n          members,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    var currentSource = assert(this.currentSource);\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      if (path !== null) {\n        let internalPath = assert(ret.internalPath);\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(currentSource, path));\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, new Dependee(currentSource, path));\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          tn.range(),\n          \"Mixed default and named imports\"\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createWildcardImportStatement(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(assert(this.currentSource), path));\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n      // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          decorators,\n          flags,\n          typeParameters,\n          type,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN) ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            null,\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = Node.createOmittedExpression(tn.range(tn.pos));\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                identifier.range\n              )\n            ],\n            null,\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN) ||\n      potentiallyGeneric &&\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n} from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate = includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (!propertyInstance) break;\n        element = propertyInstance;\n        // fall-through\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(element.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(element.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var isWasm64 = this.program.options.isWasm64;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type i64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type isize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type isize = number;\\n\");\n    }\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type u64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type usize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type usize = number;\\n\");\n    }\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; },\n  {\n    \"MIN_VALUE\": { value: -128, writable: false },\n    \"MAX_VALUE\": { value:  127, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; },\n  {\n    \"MIN_VALUE\": { value: -32768, writable: false },\n    \"MAX_VALUE\": { value:  32767, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; },\n  {\n    \"MIN_VALUE\": { value: -2147483648, writable: false },\n    \"MAX_VALUE\": { value:  2147483647, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; },\n  {\n    \"MIN_VALUE\": { value:   0, writable: false },\n    \"MAX_VALUE\": { value: 255, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; },\n  {\n    \"MIN_VALUE\": { value:     0, writable: false },\n    \"MAX_VALUE\": { value: 65535, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; },\n  {\n    \"MIN_VALUE\": { value:          0, writable: false },\n    \"MAX_VALUE\": { value: 4294967295, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; },\n  {\n    \"MIN_VALUE\": { value: false, writable: false },\n    \"MAX_VALUE\": { value: true,  writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); },\n  {\n    \"EPSILON\":   { value: 1.1920928955078125e-07, writable: false },\n    \"MIN_VALUE\": { value: 1.4012984643248170e-45, writable: false },\n    \"MAX_VALUE\": { value: 3.4028234663852886e+38, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  1.1754943508222875e-38, writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false },\n    \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n    \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n    \"NaN\": { value: NaN, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; },\n  {\n    \"EPSILON\":   { value: 2.2204460492503131e-016, writable: false },\n    \"MIN_VALUE\": { value:                  5e-324, writable: false },\n    \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  2.2250738585072014e-308, writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false },\n    \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n    \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n    \"NaN\": { value: NaN, writable: false }\n  }\n);\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCharCode.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCharCode.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCodePoint.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCodePoint.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n};\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n};\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean(U64[1] >>> 31);\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() { /* nop */ };\n\nglobalScope[\"trace\"] = function(message, n) {\n  if (n) message += Array.prototype.slice.call(arguments, 2, 2 + n);\n  console.error(\"trace: \" + message);\n};\n\nObject.defineProperty(Int8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8ClampedArray, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8ClampedArray(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float64Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float64Array(buffer, byteOffset, length);\n  }\n});\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9, // see: https://github.com/WebAssembly/multi-value\n  /** Garbage collection. */\n  GC = 1 << 10, // see: https://github.com/WebAssembly/gc\n  /** Memory64. */\n  MEMORY64 = 1 << 11 // see: https://github.com/WebAssembly/memory64\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n    case Feature.GC: return \"gc\";\n    case Feature.MEMORY64: return \"memory64\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** Portable. */\n  JS = 0,\n  /** WebAssembly with 32-bit pointers. */\n  WASM32 = 1,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64 = 2,\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags = TypeinfoFlags.NONE;\n  /** Base class id or `0` if none. */\n  base: u32 = 0;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","/**\n * @fileoverview Floating point glue code for JaavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function f32_as_i32(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function i32_as_f32(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function f64_as_i64(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function i64_as_f64(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero    = Long.ZERO;\nglobal.i64_one     = Long.ONE;\nglobal.i64_neg_one = Long.fromInt(-1);\n\nglobal.i64_is = function i64_is(value) {\n  return Long.isLong(value);\n};\n\nglobal.i64_new = function i64_new(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function i64_low(value) {\n  return value.low;\n};\n\nglobal.i64_high = function i64_high(value) {\n  return value.high;\n};\n\nglobal.i64_add = function i64_add(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function i64_sub(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function i64_mul(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_pow = function i64_pow(left, right) {\n  var rightLo = right.low;\n  var rightHi = right.high;\n  if (rightHi <= 0) {\n    if (rightHi < 0) {\n      if (left.eq(global.i64_neg_one)) {\n        return rightLo & 1 ? left : Long.ONE;\n      }\n      return left.eq(Long.ONE) ? left : Long.ZERO;\n    }\n    if (rightLo == 0) return Long.ONE;\n    if (rightLo == 1) return left;\n    if (rightLo == 2) return left.mul(left);\n  }\n  var result = Long.ONE;\n  while (rightLo | rightHi) {\n    if (rightLo & 1) result = result.mul(left);\n    right = right.shru(1);\n    left  = left.mul(left);\n    rightLo = right.low;\n    rightHi = right.high;\n  }\n  return result;\n};\n\nglobal.i64_div = function i64_div(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function i64_div_u(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function i64_rem(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function i64_rem_u(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function i64_and(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function i64_or(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function i64_xor(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function i64_shl(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function i64_shr(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function i64_shr_u(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function i64_not(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function i64_eq(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function i64_ne(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_gt = function i64_gt(left, right) {\n  return left.gt(right);\n};\n\nglobal.i64_align = function i64_align(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function i64_is_i8(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function i64_is_i16(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function i64_is_i32(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function i64_is_u8(value) {\n  return value.high === 0 && (value.low >>> 0) <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function i64_is_u16(value) {\n  return value.high === 0 && (value.low >>> 0) <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function i64_is_u32(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function i64_is_bool(value) {\n  return (value.high | (value.low & ~1)) === 0;\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function i64_is_f32(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function i64_is_f64(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function i64_to_f32(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function i64_to_f64(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function i64_to_string(value, unsigned) {\n  return unsigned ? value.toUnsigned().toString() : value.toString();\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function Map_keys(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function Map_values(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function Set_values(set) {\n  return Array.from(set.values());\n};\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `exportMemory` option. */\nexport function setExportMemory(options: Options, exportMemory: bool): void {\n  options.exportMemory = exportMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `initialMemory` option. */\nexport function setInitialMemory(options: Options, initialMemory: u32): void {\n  options.initialMemory = initialMemory;\n}\n\n/** Sets the `maximumMemory` option. */\nexport function setMaximumMemory(options: Options, maximumMemory: u32): void {\n  options.maximumMemory = maximumMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: bool): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sets the `lowMemoryLimit` option. */\nexport function setLowMemoryLimit(options: Options, lowMemoryLimit: i32): void {\n  options.lowMemoryLimit = lowMemoryLimit;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n/** Garbage collection. */\nexport const FEATURE_GC = Feature.GC;\n/** Memory64. */\nexport const FEATURE_MEMORY64 = Feature.MEMORY64;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file, or `null` to indicate not found. */\n  text: string | null,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program): void {\n  program.initialize();\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\n// TODO: When vTables are pulled, perhaps it would be better to extend an ASTWalker\nexport * from \"./extra/ast\";\nimport * as util from \"./util/index\";\nexport { util };\n\n// TODO: compat with 0.9, remove with 0.10\nexport * from \"./util/index\";\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Writes a 32-bit integer as a 64-bit integer to the specified buffer. */\nexport function writeI32AsI64(value: i32, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  writeI32(value, buffer, offset);\n  writeI32(unsigned || value >= 0 ? 0 : -1, buffer, offset + 4);\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Writes a 64-bit integer as a 32-bit integer to the specified buffer. */\nexport function writeI64AsI32(value: i64, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  assert(unsigned ? i64_is_u32(value) : i64_is_i32(value));\n  writeI32(i64_low(value), buffer, offset);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\n/** Makes a unique map. Typically used to track contextual type arguemnts. */\nexport function uniqueMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is trivially alphanumeric. */\nexport function isTrivialAlphanum(code: i32): bool {\n  return code >= CharCode.a && code <= CharCode.z\n      || code >= CharCode.A && code <= CharCode.Z\n      || code >= CharCode._0 && code <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/**\n * @fileoverview Various vector utility.\n * @license Apache-2.0\n */\n\n/** v128 zero constant. */\nexport const v128_zero = new Uint8Array(16);\n","/**\n * @fileoverview Abstract Syntax Tree extras.\n *\n * Provides serialization of the AssemblyScript AST back to it source form.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  ArrowKind,\n\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  TypeName,\n  TypeParameterNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  FloatLiteralExpression,\n  IntegerLiteralExpression,\n  StringLiteralExpression,\n  RegexpLiteralExpression,\n  ArrayLiteralExpression,\n  AssertionExpression,\n  AssertionKind,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FunctionExpression,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  UnaryPostfixExpression,\n  UnaryExpression,\n  UnaryPrefixExpression,\n  ClassExpression,\n  ObjectLiteralExpression,\n\n  BlockStatement,\n  BreakStatement,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  ExportImportStatement,\n  ExportStatement,\n  ExportDefaultStatement,\n  ExpressionStatement,\n  ForStatement,\n  ForOfStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  WhileStatement,\n\n  DeclarationStatement,\n  ClassDeclaration,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n\n  DecoratorNode,\n  ParameterNode,\n  ParameterKind,\n  ExportMember,\n  SwitchCase,\n  IndexSignatureNode,\n\n  isTypeOmitted\n} from \"../ast\";\n\nimport {\n  operatorTokenToString\n} from \"../tokenizer\";\n\nimport {\n  CharCode,\n  indent\n} from \"../util\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\n/** An AST builder. */\nexport class ASTBuilder {\n\n  /** Rebuilds the textual source from the specified AST, as far as possible. */\n  static build(node: Node): string {\n    var builder = new ASTBuilder();\n    builder.visitNode(node);\n    return builder.finish();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  visitNode(node: Node): void {\n    switch (node.kind) {\n      case NodeKind.SOURCE: {\n        this.visitSource(<Source>node);\n        break;\n      }\n\n      // types\n\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      case NodeKind.TYPEPARAMETER: {\n        this.visitTypeParameter(<TypeParameterNode>node);\n        break;\n      }\n\n      // expressions\n\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.SUPER:\n      case NodeKind.THIS:\n      case NodeKind.TRUE:\n      case NodeKind.CONSTRUCTOR:\n      case NodeKind.IDENTIFIER: {\n        this.visitIdentifierExpression(<IdentifierExpression>node);\n        break;\n      }\n      case NodeKind.ASSERTION: {\n        this.visitAssertionExpression(<AssertionExpression>node);\n        break;\n      }\n      case NodeKind.BINARY: {\n        this.visitBinaryExpression(<BinaryExpression>node);\n        break;\n      }\n      case NodeKind.CALL: {\n        this.visitCallExpression(<CallExpression>node);\n        break;\n      }\n      case NodeKind.CLASS: {\n        this.visitClassExpression(<ClassExpression>node);\n        break;\n      }\n      case NodeKind.COMMA: {\n        this.visitCommaExpression(<CommaExpression>node);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        this.visitElementAccessExpression(<ElementAccessExpression>node);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        this.visitFunctionExpression(<FunctionExpression>node);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        this.visitInstanceOfExpression(<InstanceOfExpression>node);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        this.visitLiteralExpression(<LiteralExpression>node);\n        break;\n      }\n      case NodeKind.NEW: {\n        this.visitNewExpression(<NewExpression>node);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        this.visitParenthesizedExpression(<ParenthesizedExpression>node);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        this.visitPropertyAccessExpression(<PropertyAccessExpression>node);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        this.visitTernaryExpression(<TernaryExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n\n      // statements\n\n      case NodeKind.BLOCK: {\n        this.visitBlockStatement(<BlockStatement>node);\n        break;\n      }\n      case NodeKind.BREAK: {\n        this.visitBreakStatement(<BreakStatement>node);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        this.visitContinueStatement(<ContinueStatement>node);\n        break;\n      }\n      case NodeKind.DO: {\n        this.visitDoStatement(<DoStatement>node);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        this.visitEmptyStatement(<EmptyStatement>node);\n        break;\n      }\n      case NodeKind.EXPORT: {\n        this.visitExportStatement(<ExportStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.visitExportDefaultStatement(<ExportDefaultStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTIMPORT: {\n        this.visitExportImportStatement(<ExportImportStatement>node);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        this.visitExpressionStatement(<ExpressionStatement>node);\n        break;\n      }\n      case NodeKind.FOR: {\n        this.visitForStatement(<ForStatement>node);\n        break;\n      }\n      case NodeKind.FOROF: {\n        this.visitForOfStatement(<ForOfStatement>node);\n        break;\n      }\n      case NodeKind.IF: {\n        this.visitIfStatement(<IfStatement>node);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.visitImportStatement(<ImportStatement>node);\n        break;\n      }\n      case NodeKind.RETURN: {\n        this.visitReturnStatement(<ReturnStatement>node);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        this.visitSwitchStatement(<SwitchStatement>node);\n        break;\n      }\n      case NodeKind.THROW: {\n        this.visitThrowStatement(<ThrowStatement>node);\n        break;\n      }\n      case NodeKind.TRY: {\n        this.visitTryStatement(<TryStatement>node);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        this.visitVariableStatement(<VariableStatement>node);\n        break;\n      }\n      case NodeKind.WHILE: {\n        this.visitWhileStatement(<WhileStatement>node);\n        break;\n      }\n\n      // declaration statements\n\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMVALUEDECLARATION: {\n        this.visitEnumValueDeclaration(<EnumValueDeclaration>node);\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        this.visitFieldDeclaration(<FieldDeclaration>node);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>node);\n        break;\n      }\n      case NodeKind.IMPORTDECLARATION: {\n        this.visitImportDeclaration(<ImportDeclaration>node);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>node);\n        break;\n      }\n      case NodeKind.METHODDECLARATION: {\n        this.visitMethodDeclaration(<MethodDeclaration>node);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>node);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        this.visitTypeDeclaration(<TypeDeclaration>node);\n        break;\n      }\n      case NodeKind.VARIABLEDECLARATION: {\n        this.visitVariableDeclaration(<VariableDeclaration>node);\n        break;\n      }\n\n      // other\n\n      case NodeKind.DECORATOR: {\n        this.serializeDecorator(<DecoratorNode>node);\n        break;\n      }\n      case NodeKind.EXPORTMEMBER: {\n        this.visitExportMember(<ExportMember>node);\n        break;\n      }\n      case NodeKind.PARAMETER: {\n        this.serializeParameter(<ParameterNode>node);\n        break;\n      }\n      case NodeKind.SWITCHCASE: {\n        this.visitSwitchCase(<SwitchCase>node);\n        break;\n      }\n      case NodeKind.INDEXSIGNATURE: {\n        this.visitIndexSignature(<IndexSignatureNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitSource(source: Source): void {\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      this.visitNodeAndTerminate(statements[i]);\n    }\n  }\n\n  // types\n\n  visitTypeNode(node: TypeNode): void {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitTypeName(node: TypeName): void {\n    this.visitIdentifierExpression(node.identifier);\n    var sb = this.sb;\n    var current = node.next;\n    while (current) {\n      sb.push(\".\");\n      this.visitIdentifierExpression(current.identifier);\n      current = current.next;\n    }\n  }\n\n  visitNamedTypeNode(node: NamedTypeNode): void {\n    this.visitTypeName(node.name);\n    var typeArguments = node.typeArguments;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      let sb = this.sb;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">\");\n      }\n      if (node.isNullable) sb.push(\" | null\");\n    }\n  }\n\n  visitFunctionTypeNode(node: FunctionTypeNode): void {\n    var isNullable = node.isNullable;\n    var sb = this.sb;\n    sb.push(isNullable ? \"((\" : \"(\");\n    var explicitThisType = node.explicitThisType;\n    if (explicitThisType) {\n      sb.push(\"this: \");\n      this.visitTypeNode(explicitThisType);\n    }\n    var parameters = node.parameters;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      if (explicitThisType) sb.push(\", \");\n      this.serializeParameter(parameters[0]);\n      for (let i = 1; i < numParameters; ++i) {\n        sb.push(\", \");\n        this.serializeParameter(parameters[i]);\n      }\n    }\n    var returnType = node.returnType;\n    if (returnType) {\n      sb.push(\") => \");\n      this.visitTypeNode(returnType);\n    } else {\n      sb.push(\") => void\");\n    }\n    if (isNullable) sb.push(\") | null\");\n  }\n\n  visitTypeParameter(node: TypeParameterNode): void {\n    this.visitIdentifierExpression(node.name);\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      this.sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var defaultType = node.defaultType;\n    if (defaultType) {\n      this.sb.push(\"=\");\n      this.visitTypeNode(defaultType);\n    }\n  }\n\n  // expressions\n\n  visitIdentifierExpression(node: IdentifierExpression): void {\n    if (node.isQuoted) this.visitStringLiteral(node.text);\n    else this.sb.push(node.text);\n  }\n\n  visitArrayLiteralExpression(node: ArrayLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"[\");\n    var elements = node.elementExpressions;\n    var numElements = elements.length;\n    if (numElements) {\n      let element = elements[0];\n      if (element) this.visitNode(element);\n      for (let i = 1; i < numElements; ++i) {\n        element = elements[i];\n        sb.push(\", \");\n        if (element) this.visitNode(element);\n      }\n    }\n    sb.push(\"]\");\n  }\n\n  visitObjectLiteralExpression(node: ObjectLiteralExpression): void {\n    var sb = this.sb;\n    var names = node.names;\n    var values = node.values;\n    var numElements = names.length;\n    assert(numElements == values.length);\n    if (numElements) {\n      sb.push(\"{\\n\");\n      indent(sb, ++this.indentLevel);\n      this.visitNode(names[0]);\n      sb.push(\": \");\n      this.visitNode(values[0]);\n      for (let i = 1; i < numElements; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, this.indentLevel);\n        let name = names[i];\n        let value = values[i];\n        if (name === value) {\n          this.visitNode(name);\n        } else {\n          this.visitNode(name);\n          sb.push(\": \");\n          this.visitNode(value);\n        }\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitAssertionExpression(node: AssertionExpression): void {\n    var sb = this.sb;\n    switch (node.assertionKind) {\n      case AssertionKind.PREFIX: {\n        sb.push(\"<\");\n        this.visitTypeNode(assert(node.toType));\n        sb.push(\">\");\n        this.visitNode(node.expression);\n        break;\n      }\n      case AssertionKind.AS: {\n        this.visitNode(node.expression);\n        sb.push(\" as \");\n        this.visitTypeNode(assert(node.toType));\n        break;\n      }\n      case AssertionKind.NONNULL: {\n        this.visitNode(node.expression);\n        sb.push(\"!\");\n        break;\n      }\n      case AssertionKind.CONST: {\n        this.visitNode(node.expression);\n        sb.push(\" as const\");\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitBinaryExpression(node: BinaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.left);\n    sb.push(\" \");\n    sb.push(operatorTokenToString(node.operator));\n    sb.push(\" \");\n    this.visitNode(node.right);\n  }\n\n  visitCallExpression(node: CallExpression): void {\n    this.visitNode(node.expression);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  private visitArguments(typeArguments: TypeNode[] | null, args: Expression[]): void {\n    var sb = this.sb;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">(\");\n      }\n    } else {\n      sb.push(\"(\");\n    }\n    var numArgs = args.length;\n    if (numArgs) {\n      this.visitNode(args[0]);\n      for (let i = 1; i < numArgs; ++i) {\n        sb.push(\", \");\n        this.visitNode(args[i]);\n      }\n    }\n    sb.push(\")\");\n  }\n\n  visitClassExpression(node: ClassExpression): void {\n    var declaration = node.declaration;\n    this.visitClassDeclaration(declaration);\n  }\n\n  visitCommaExpression(node: CommaExpression): void {\n    var expressions = node.expressions;\n    var numExpressions = assert(expressions.length);\n    this.visitNode(expressions[0]);\n    var sb = this.sb;\n    for (let i = 1; i < numExpressions; ++i) {\n      sb.push(\",\");\n      this.visitNode(expressions[i]);\n    }\n  }\n\n  visitElementAccessExpression(node: ElementAccessExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.expression);\n    sb.push(\"[\");\n    this.visitNode(node.elementExpression);\n    sb.push(\"]\");\n  }\n\n  visitFunctionExpression(node: FunctionExpression): void {\n    var declaration = node.declaration;\n    if (!declaration.arrowKind) {\n      if (declaration.name.text.length) {\n        this.sb.push(\"function \");\n      } else {\n        this.sb.push(\"function\");\n      }\n    } else {\n      assert(declaration.name.text.length == 0);\n    }\n    this.visitFunctionCommon(declaration);\n  }\n\n  visitLiteralExpression(node: LiteralExpression): void {\n    switch (node.literalKind) {\n      case LiteralKind.FLOAT: {\n        this.visitFloatLiteralExpression(<FloatLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.INTEGER: {\n        this.visitIntegerLiteralExpression(<IntegerLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.STRING: {\n        this.visitStringLiteralExpression(<StringLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.REGEXP: {\n        this.visitRegexpLiteralExpression(<RegexpLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.ARRAY: {\n        this.visitArrayLiteralExpression(<ArrayLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.OBJECT: {\n        this.visitObjectLiteralExpression(<ObjectLiteralExpression>node);\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  visitFloatLiteralExpression(node: FloatLiteralExpression): void {\n    this.sb.push(node.value.toString());\n  }\n\n  visitInstanceOfExpression(node: InstanceOfExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\" instanceof \");\n    this.visitTypeNode(node.isType);\n  }\n\n  visitIntegerLiteralExpression(node: IntegerLiteralExpression): void {\n    this.sb.push(i64_to_string(node.value));\n  }\n\n  visitStringLiteral(str: string, singleQuoted: bool = false): void {\n    var sb = this.sb;\n    var off = 0;\n    var quote = singleQuoted ? \"'\" : \"\\\"\";\n    sb.push(quote);\n    var i = 0;\n    for (let k = str.length; i < k;) {\n      switch (str.charCodeAt(i)) {\n        case CharCode.NULL: {\n          if (i > off) sb.push(str.substring(off, off = i + 1));\n          sb.push(\"\\\\0\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKSPACE: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\b\");\n          break;\n        }\n        case CharCode.TAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\t\");\n          break;\n        }\n        case CharCode.LINEFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\n\");\n          break;\n        }\n        case CharCode.VERTICALTAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\v\");\n          break;\n        }\n        case CharCode.FORMFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\f\");\n          break;\n        }\n        case CharCode.CARRIAGERETURN: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\r\");\n          off = ++i;\n          break;\n        }\n        case CharCode.DOUBLEQUOTE: {\n          if (!singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\\\\"\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.SINGLEQUOTE: {\n          if (singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\'\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.BACKSLASH: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\\\\\\");\n          off = ++i;\n          break;\n        }\n        default: {\n          ++i;\n          break;\n        }\n      }\n    }\n    if (i > off) sb.push(str.substring(off, i));\n    sb.push(quote);\n  }\n\n  visitStringLiteralExpression(node: StringLiteralExpression): void {\n    this.visitStringLiteral(node.value);\n  }\n\n  visitRegexpLiteralExpression(node: RegexpLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"/\");\n    sb.push(node.pattern);\n    sb.push(\"/\");\n    sb.push(node.patternFlags);\n  }\n\n  visitNewExpression(node: NewExpression): void {\n    this.sb.push(\"new \");\n    this.visitTypeName(node.typeName);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  visitParenthesizedExpression(node: ParenthesizedExpression): void {\n    var sb = this.sb;\n    sb.push(\"(\");\n    this.visitNode(node.expression);\n    sb.push(\")\");\n  }\n\n  visitPropertyAccessExpression(node: PropertyAccessExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\".\");\n    this.visitIdentifierExpression(node.property);\n  }\n\n  visitTernaryExpression(node: TernaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.condition);\n    sb.push(\" ? \");\n    this.visitNode(node.ifThen);\n    sb.push(\" : \");\n    this.visitNode(node.ifElse);\n  }\n\n  visitUnaryExpression(node: UnaryExpression): void {\n    switch (node.kind) {\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitUnaryPostfixExpression(node: UnaryPostfixExpression): void {\n    this.visitNode(node.operand);\n    this.sb.push(operatorTokenToString(node.operator));\n  }\n\n  visitUnaryPrefixExpression(node: UnaryPrefixExpression): void {\n    this.sb.push(operatorTokenToString(node.operator));\n    this.visitNode(node.operand);\n  }\n\n  // statements\n\n  visitNodeAndTerminate(node: Node): void {\n    this.visitNode(node);\n    var sb = this.sb;\n    if (\n      !sb.length ||                     // leading EmptyStatement\n      node.kind == NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n      node.kind == NodeKind.EXPRESSION  // potentially assigns a FunctionExpression\n    ) {\n      sb.push(\";\\n\");\n    } else {\n      let last = sb[sb.length - 1];\n      let lastCharPos = last.length - 1;\n      if (lastCharPos >= 0 && (\n        last.charCodeAt(lastCharPos) == CharCode.CLOSEBRACE ||\n        last.charCodeAt(lastCharPos) == CharCode.SEMICOLON)\n      ) {\n        sb.push(\"\\n\");\n      } else {\n        sb.push(\";\\n\");\n      }\n    }\n  }\n\n  visitBlockStatement(node: BlockStatement): void {\n    var sb = this.sb;\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      sb.push(\"{\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitBreakStatement(node: BreakStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"break \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"break\");\n    }\n  }\n\n  visitContinueStatement(node: ContinueStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"continue \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"continue\");\n    }\n  }\n\n  visitClassDeclaration(node: ClassDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n    if (node.name.text.length) {\n      sb.push(\"class \");\n      this.visitIdentifierExpression(node.name);\n    } else {\n      sb.push(\"class\");\n    }\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var implementsTypes = node.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        sb.push(\" implements \");\n        this.visitTypeNode(implementsTypes[0]);\n        for (let i = 1; i < numImplementsTypes; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(implementsTypes[i]);\n        }\n      }\n    }\n    var indexSignature = node.indexSignature;\n    var members = node.members;\n    var numMembers = members.length;\n    if (indexSignature !== null || numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      if (indexSignature) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(indexSignature);\n      }\n      for (let i = 0, k = members.length; i < k; ++i) {\n        let member = members[i];\n        if (member.kind != NodeKind.FIELDDECLARATION || (<FieldDeclaration>member).parameterIndex < 0) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(member);\n        }\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitDoStatement(node: DoStatement): void {\n    var sb = this.sb;\n    sb.push(\"do \");\n    this.visitNode(node.statement);\n    if (node.statement.kind == NodeKind.BLOCK) {\n      sb.push(\" while (\");\n    } else {\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"while (\");\n    }\n    this.visitNode(node.condition);\n    sb.push(\")\");\n  }\n\n  visitEmptyStatement(node: EmptyStatement): void {\n    /* nop */\n  }\n\n  visitEnumDeclaration(node: EnumDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    this.visitIdentifierExpression(node.name);\n    var values = node.values;\n    var numValues = values.length;\n    if (numValues) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitEnumValueDeclaration(node.values[0]);\n      for (let i = 1; i < numValues; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitEnumValueDeclaration(node.values[i]);\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitEnumValueDeclaration(node: EnumValueDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var initializer = node.initializer;\n    if (initializer) {\n      this.sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitExportImportStatement(node: ExportImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"export import \");\n    this.visitIdentifierExpression(node.externalName);\n    sb.push(\" = \");\n    this.visitIdentifierExpression(node.name);\n  }\n\n  visitExportMember(node: ExportMember): void {\n    this.visitIdentifierExpression(node.localName);\n    if (node.exportedName.text != node.localName.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(node.exportedName);\n    }\n  }\n\n  visitExportStatement(node: ExportStatement): void {\n    var sb = this.sb;\n    if (node.isDeclare) {\n      sb.push(\"declare \");\n    }\n    var members = node.members;\n    if (members != null && members.length > 0) {\n      let numMembers = members.length;\n      sb.push(\"export {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitExportMember(members[0]);\n      for (let i = 1; i < numMembers; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitExportMember(members[i]);\n      }\n      --this.indentLevel;\n      sb.push(\"\\n}\");\n    } else {\n      sb.push(\"export {}\");\n    }\n    var path = node.path;\n    if (path) {\n      sb.push(\" from \");\n      this.visitStringLiteralExpression(path);\n    }\n    sb.push(\";\");\n  }\n\n  visitExportDefaultStatement(node: ExportDefaultStatement): void {\n    var declaration = node.declaration;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>declaration, true);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitExpressionStatement(node: ExpressionStatement): void {\n    this.visitNode(node.expression);\n  }\n\n  visitFieldDeclaration(node: FieldDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    this.visitIdentifierExpression(node.name);\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    var type = node.type;\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitForStatement(node: ForStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    var initializer = node.initializer;\n    if (initializer) {\n      this.visitNode(initializer);\n    }\n    var condition = node.condition;\n    if (condition) {\n      sb.push(\"; \");\n      this.visitNode(condition);\n    } else {\n      sb.push(\";\");\n    }\n    var incrementor = node.incrementor;\n    if (incrementor) {\n      sb.push(\"; \");\n      this.visitNode(incrementor);\n    } else {\n      sb.push(\";\");\n    }\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitForOfStatement(node: ForOfStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    this.visitNode(node.variable);\n    sb.push(\" of \");\n    this.visitNode(node.iterable);\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitFunctionDeclaration(node: FunctionDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n      this.serializeAccessModifiers(node);\n    }\n    if (node.name.text.length) {\n      sb.push(\"function \");\n    } else {\n      sb.push(\"function\");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitFunctionCommon(node: FunctionDeclaration): void {\n    var sb = this.sb;\n    this.visitIdentifierExpression(node.name);\n    var signature = node.signature;\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        this.visitTypeParameter(typeParameters[0]);\n        for (let i = 1; i < numTypeParameters; ++i) {\n          sb.push(\", \");\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n      let parameters = signature.parameters;\n      assert(parameters.length == 1);\n      assert(!signature.explicitThisType);\n      this.serializeParameter(parameters[0]);\n    } else {\n      sb.push(\"(\");\n      let parameters = signature.parameters;\n      let numParameters = parameters.length;\n      let explicitThisType = signature.explicitThisType;\n      if (explicitThisType) {\n        sb.push(\"this: \");\n        this.visitTypeNode(explicitThisType);\n      }\n      if (numParameters) {\n        if (explicitThisType) sb.push(\", \");\n        this.serializeParameter(parameters[0]);\n        for (let i = 1; i < numParameters; ++i) {\n          sb.push(\", \");\n          this.serializeParameter(parameters[i]);\n        }\n      }\n    }\n    var body = node.body;\n    var returnType = signature.returnType;\n    if (node.arrowKind) {\n      if (body) {\n        if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n          assert(isTypeOmitted(returnType));\n        } else {\n          if (isTypeOmitted(returnType)) {\n            sb.push(\")\");\n          } else {\n            sb.push(\"): \");\n            this.visitTypeNode(returnType);\n          }\n        }\n        sb.push(\" => \");\n        this.visitNode(body);\n      } else {\n        assert(!isTypeOmitted(returnType));\n        sb.push(\" => \");\n        this.visitTypeNode(returnType);\n      }\n    } else {\n      if (\n        !isTypeOmitted(returnType) &&\n        !node.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)\n      ) {\n        sb.push(\"): \");\n        this.visitTypeNode(returnType);\n      } else {\n        sb.push(\")\");\n      }\n      if (body) {\n        sb.push(\" \");\n        this.visitNode(body);\n      }\n    }\n  }\n\n  visitIfStatement(node: IfStatement): void {\n    var sb = this.sb;\n    sb.push(\"if (\");\n    this.visitNode(node.condition);\n    sb.push(\") \");\n    var ifTrue = node.ifTrue;\n    this.visitNode(ifTrue);\n    if (ifTrue.kind != NodeKind.BLOCK) {\n      sb.push(\";\\n\");\n    }\n    var ifFalse = node.ifFalse;\n    if (ifFalse) {\n      if (ifTrue.kind == NodeKind.BLOCK) {\n        sb.push(\" else \");\n      } else {\n        sb.push(\"else \");\n      }\n      this.visitNode(ifFalse);\n    }\n  }\n\n  visitImportDeclaration(node: ImportDeclaration): void {\n    var externalName = node.foreignName;\n    var name = node.name;\n    this.visitIdentifierExpression(externalName);\n    if (externalName.text != name.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(name);\n    }\n  }\n\n  visitImportStatement(node: ImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"import \");\n    var declarations = node.declarations;\n    var namespaceName = node.namespaceName;\n    if (declarations) {\n      let numDeclarations = declarations.length;\n      if (numDeclarations) {\n        sb.push(\"{\\n\");\n        let indentLevel = ++this.indentLevel;\n        indent(sb, indentLevel);\n        this.visitImportDeclaration(declarations[0]);\n        for (let i = 1; i < numDeclarations; ++i) {\n          sb.push(\",\\n\");\n          indent(sb, indentLevel);\n          this.visitImportDeclaration(declarations[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"\\n} from \");\n      } else {\n        sb.push(\"{} from \");\n      }\n    } else if (namespaceName) {\n      sb.push(\"* as \");\n      this.visitIdentifierExpression(namespaceName);\n      sb.push(\" from \");\n    }\n    this.visitStringLiteralExpression(node.path);\n  }\n\n  visitIndexSignature(node: IndexSignatureNode): void {\n    var sb = this.sb;\n    sb.push(\"[key: \");\n    this.visitTypeNode(node.keyType);\n    sb.push(\"]: \");\n    this.visitTypeNode(node.valueType);\n  }\n\n  visitInterfaceDeclaration(node: InterfaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"interface \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    // must not have implementsTypes\n    sb.push(\" {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var members = node.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(members[i]);\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitMethodDeclaration(node: MethodDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    if (node.is(CommonFlags.GET)) {\n      this.sb.push(\"get \");\n    } else if (node.is(CommonFlags.SET)) {\n      this.sb.push(\"set \");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitNamespaceDeclaration(node: NamespaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"namespace \");\n    this.visitIdentifierExpression(node.name);\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(members[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitReturnStatement(node: ReturnStatement): void {\n    var value = node.value;\n    if (value) {\n      this.sb.push(\"return \");\n      this.visitNode(value);\n    } else {\n      this.sb.push(\"return\");\n    }\n  }\n\n  visitSwitchCase(node: SwitchCase): void {\n    var sb = this.sb;\n    var label = node.label;\n    if (label) {\n      sb.push(\"case \");\n      this.visitNode(label);\n      sb.push(\":\\n\");\n    } else {\n      sb.push(\"default:\\n\");\n    }\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[0]);\n      for (let i = 1; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      --this.indentLevel;\n    }\n  }\n\n  visitSwitchStatement(node: SwitchStatement): void {\n    var sb = this.sb;\n    sb.push(\"switch (\");\n    this.visitNode(node.condition);\n    sb.push(\") {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var cases = node.cases;\n    for (let i = 0, k = cases.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitSwitchCase(cases[i]);\n      sb.push(\"\\n\");\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitThrowStatement(node: ThrowStatement): void {\n    this.sb.push(\"throw \");\n    this.visitNode(node.value);\n  }\n\n  visitTryStatement(node: TryStatement): void {\n    var sb = this.sb;\n    sb.push(\"try {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var statements = node.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[i]);\n    }\n    var catchVariable = node.catchVariable;\n    if (catchVariable) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} catch (\");\n      this.visitIdentifierExpression(catchVariable);\n      sb.push(\") {\\n\");\n      let catchStatements = node.catchStatements;\n      if (catchStatements) {\n        for (let i = 0, k = catchStatements.length; i < k; ++i) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(catchStatements[i]);\n        }\n      }\n    }\n    var finallyStatements = node.finallyStatements;\n    if (finallyStatements) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} finally {\\n\");\n      for (let i = 0, k = finallyStatements.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(finallyStatements[i]);\n      }\n    }\n    indent(sb, indentLevel - 1);\n    sb.push(\"}\");\n  }\n\n  visitTypeDeclaration(node: TypeDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    this.serializeExternalModifiers(node);\n    sb.push(\"type \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        for (let i = 0; i < numTypeParameters; ++i) {\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    sb.push(\" = \");\n    this.visitTypeNode(node.type);\n  }\n\n  visitVariableDeclaration(node: VariableDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitVariableStatement(node: VariableStatement): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    var declarations = node.declarations;\n    var numDeclarations = assert(declarations.length);\n    var firstDeclaration = declarations[0];\n    this.serializeExternalModifiers(firstDeclaration);\n    sb.push(firstDeclaration.is(CommonFlags.CONST) ? \"const \" : firstDeclaration.is(CommonFlags.LET) ? \"let \" : \"var \");\n    this.visitVariableDeclaration(node.declarations[0]);\n    for (let i = 1; i < numDeclarations; ++i) {\n      sb.push(\", \");\n      this.visitVariableDeclaration(node.declarations[i]);\n    }\n  }\n\n  visitWhileStatement(node: WhileStatement): void {\n    var sb = this.sb;\n    sb.push(\"while (\");\n    this.visitNode(node.condition);\n    var statement = node.statement;\n    if (statement.kind == NodeKind.EMPTY) {\n      sb.push(\")\");\n    } else {\n      sb.push(\") \");\n      this.visitNode(node.statement);\n    }\n  }\n\n  // other\n\n  serializeDecorator(node: DecoratorNode): void {\n    var sb = this.sb;\n    sb.push(\"@\");\n    this.visitNode(node.name);\n    var args = node.args;\n    if (args) {\n      sb.push(\"(\");\n      let numArgs = args.length;\n      if (numArgs) {\n        this.visitNode(args[0]);\n        for (let i = 1; i < numArgs; ++i) {\n          sb.push(\", \");\n          this.visitNode(args[i]);\n        }\n      }\n      sb.push(\")\\n\");\n    } else {\n      sb.push(\"\\n\");\n    }\n    indent(sb, this.indentLevel);\n  }\n\n  serializeParameter(node: ParameterNode): void {\n    var sb = this.sb;\n    var kind = node.parameterKind;\n    var implicitFieldDeclaration = node.implicitFieldDeclaration;\n    if (implicitFieldDeclaration) {\n      this.serializeAccessModifiers(implicitFieldDeclaration);\n    }\n    if (kind == ParameterKind.REST) {\n      sb.push(\"...\");\n    }\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var initializer = node.initializer;\n    if (type) {\n      if (kind == ParameterKind.OPTIONAL && !initializer) sb.push(\"?\");\n      if (!isTypeOmitted(type)) {\n        sb.push(\": \");\n        this.visitTypeNode(type);\n      }\n    }\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  serializeExternalModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.EXPORT)) {\n      sb.push(\"export \");\n    } else if (node.is(CommonFlags.IMPORT)) {\n      sb.push(\"import \");\n    } else if (node.is(CommonFlags.DECLARE)) {\n      sb.push(\"declare \");\n    }\n  }\n\n  serializeAccessModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.PUBLIC)) {\n      sb.push(\"public \");\n    } else if (node.is(CommonFlags.PRIVATE)) {\n      sb.push(\"private \");\n    } else if (node.is(CommonFlags.PROTECTED)) {\n      sb.push(\"protected \");\n    }\n    if (node.is(CommonFlags.STATIC)) {\n      sb.push(\"static \");\n    } else if (node.is(CommonFlags.ABSTRACT)) {\n      sb.push(\"abstract \");\n    }\n    if (node.is(CommonFlags.READONLY)) {\n      sb.push(\"readonly \");\n    }\n  }\n\n  finish(): string {\n    var ret = this.sb.join(\"\");\n    this.sb = [];\n    return ret;\n  }\n}\n"],"sourceRoot":""}